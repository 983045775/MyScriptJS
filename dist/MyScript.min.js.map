{"version":3,"file":"MyScript.min.js","sources":["src/MyScript.js","src/common/generic/point.js","src/common/generic/quadraticPoint.js","src/common/generic/rectangle.js","src/common/stroker.js","src/common/mathUtils.js","src/input/generic/components/abstractComponent.js","src/input/generic/components/boundingBox.js","src/input/generic/components/stroke.js","src/input/generic/abstractParameter.js","src/input/generic/abstractRecognitionInput.js","src/input/generic/abstractRecognitionData.js","src/input/generic/recognitionLanguagesData.js","src/input/text/components/abstractTextInputComponent.js","src/input/text/components/characterInputComponent.js","src/input/text/components/characterInputComponentAlternate.js","src/input/text/components/charInputComponent.js","src/input/text/components/stringInputComponent.js","src/input/text/textInputUnit.js","src/input/text/textParameter.js","src/input/text/textProperties.js","src/input/text/textRecognitionInput.js","src/input/text/textRecognitionData.js","src/input/shape/shapeParameter.js","src/input/shape/shapeRecognitionInput.js","src/input/shape/shapeRecognitionData.js","src/input/math/mathParameter.js","src/input/math/mathRecognitionInput.js","src/input/math/mathRecognitionData.js","src/input/music/components/abstractMusicInputComponent.js","src/input/music/components/musicAccidentalInputComponent.js","src/input/music/components/musicArpeggiateInputComponent.js","src/input/music/components/musicBarInput.js","src/input/music/components/musicBarInputComponent.js","src/input/music/components/musicBeamInput.js","src/input/music/components/musicBeamInputComponent.js","src/input/music/components/musicClefInput.js","src/input/music/components/musicClefInputComponent.js","src/input/music/components/musicDecorationInput.js","src/input/music/components/musicDecorationInputComponent.js","src/input/music/components/musicDotsInputComponent.js","src/input/music/components/musicHeadInputComponent.js","src/input/music/components/musicLedgerLineInputComponent.js","src/input/music/components/musicRestInputComponent.js","src/input/music/components/musicStemInputComponent.js","src/input/music/components/musicTieOrSlurInputComponent.js","src/input/music/components/musicTimeSignatureInputComponent.js","src/input/music/musicStaff.js","src/input/music/musicParameter.js","src/input/music/musicRecognitionInput.js","src/input/music/musicRecognitionData.js","src/input/analyzer/analyzerParameter.js","src/input/analyzer/analyzerRecognitionInput.js","src/input/analyzer/analyzerRecognitionData.js","src/output/generic/abstractResult.js","src/output/text/textCandidate.js","src/output/text/textDocument.js","src/output/text/textResult.js","src/output/text/textSegment.js","src/output/text/textSegmentResult.js","src/output/text/textTagItem.js","src/output/shape/abstractShapePrimitive.js","src/output/shape/abstractDecoratedShape.js","src/output/shape/shapeCandidate.js","src/output/shape/shapeDocument.js","src/output/shape/shapeEllipse.js","src/output/shape/shapeErased.js","src/output/shape/shapeInkRange.js","src/output/shape/shapeLine.js","src/output/shape/shapeNotRecognized.js","src/output/shape/shapePoint.js","src/output/shape/shapeRecognized.js","src/output/shape/shapeResult.js","src/output/shape/shapeScratchOut.js","src/output/shape/shapeSegment.js","src/output/math/mathNode.js","src/output/math/mathNonTerminalNode.js","src/output/math/mathResultElement.js","src/output/math/mathRuleNode.js","src/output/math/mathDocument.js","src/output/math/mathInkRange.js","src/output/math/mathLaTexResultElement.js","src/output/math/mathMathMLResultElement.js","src/output/math/mathResult.js","src/output/math/mathScratchOut.js","src/output/math/mathSymbolTreeResultElement.js","src/output/math/mathTerminalNode.js","src/output/math/mathTerminalNodeCandidate.js","src/output/math/mathFenceRuleNode.js","src/output/math/mathFractionRuleNode.js","src/output/math/mathHorizontalPairRuleNode.js","src/output/math/mathIdentityRuleNode.js","src/output/math/mathLeftFenceRuleNode.js","src/output/math/mathOverscriptRuleNode.js","src/output/math/mathPreSuperscriptRuleNode.js","src/output/math/mathSqrtRuleNode.js","src/output/math/mathSubscriptRuleNode.js","src/output/math/mathSubSuperscriptRuleNode.js","src/output/math/mathSuperscriptRuleNode.js","src/output/math/mathUnderOverscriptRuleNode.js","src/output/math/mathUnderscriptRuleNode.js","src/output/math/mathVerticalPairRuleNode.js","src/output/math/mathExponentiableNonTerminalNode.js","src/output/math/mathExpressionNonTerminalNode.js","src/output/math/mathSqrtNonTerminalNode.js","src/output/math/mathVectorNonTerminalNode.js","src/output/math/mathSystemNonTerminalNode.js","src/output/math/mathTermNonTerminalNode.js","src/output/music/musicElement.js","src/output/music/musicResultElement.js","src/output/music/musicAccidental.js","src/output/music/musicAnnotation.js","src/output/music/musicArpeggiate.js","src/output/music/musicBar.js","src/output/music/musicBeam.js","src/output/music/musicChord.js","src/output/music/musicClef.js","src/output/music/musicDecoration.js","src/output/music/musicDocument.js","src/output/music/musicDots.js","src/output/music/musicHead.js","src/output/music/musicInputRange.js","src/output/music/musicKeySignature.js","src/output/music/musicKeySignatureData.js","src/output/music/musicLedgerLine.js","src/output/music/musicNote.js","src/output/music/musicPart.js","src/output/music/musicPitchData.js","src/output/music/musicRest.js","src/output/music/musicResult.js","src/output/music/musicScore.js","src/output/music/musicScoreTreeResultElement.js","src/output/music/musicScratchOut.js","src/output/music/musicSlur.js","src/output/music/musicStem.js","src/output/music/musicTie.js","src/output/music/musicTimeSignature.js","src/output/music/musicXMLResultElement.js","src/output/analyzer/analyzerElement.js","src/output/analyzer/analyzerCell.js","src/output/analyzer/analyzerCellData.js","src/output/analyzer/analyzerDocument.js","src/output/analyzer/analyzerElementReference.js","src/output/analyzer/analyzerGroup.js","src/output/analyzer/analyzerInkRange.js","src/output/analyzer/analyzerLine.js","src/output/analyzer/analyzerLineData.js","src/output/analyzer/analyzerPointData.js","src/output/analyzer/analyzerRecognizedStroke.js","src/output/analyzer/analyzerResult.js","src/output/analyzer/analyzerStrokeType.js","src/output/analyzer/analyzerTable.js","src/output/analyzer/analyzerTableData.js","src/output/analyzer/analyzerTextLine.js","src/output/analyzer/analyzerTextLineData.js","src/output/analyzer/analyzerUnderline.js","src/output/analyzer/analyzerUnderlineData.js","src/networking/networkInterface.js","src/recognition/abstractRecognizer.js","src/recognition/textRecognizer.js","src/recognition/textWSRecognizer.js","src/recognition/shapeRecognizer.js","src/recognition/mathRecognizer.js","src/recognition/mathWSRecognizer.js","src/recognition/musicRecognizer.js","src/recognition/analyzerRecognizer.js","src/rendering/renderingParameters.js","src/rendering/abstractRenderer.js","src/rendering/textRenderer.js","src/rendering/shapeRenderer.js","src/rendering/mathRenderer.js","src/rendering/musicRenderer.js","src/rendering/analyzerRenderer.js","bower_components/cryptojslib/components/core.js","bower_components/cryptojslib/components/x64-core.js","bower_components/cryptojslib/components/sha512.js","bower_components/cryptojslib/components/hmac.js","bower_components/q/q.js"],"names":[],"mappings":"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","sourcesContent":["/**\n @module MyScript\n */\n/*global MyScript:true */\nMyScript = {};","(function (scope) {\n    'use strict';\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} obj\n     * @constructor\n     */\n    function Point (obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Complex Point object used for quadratic calculation\n     *\n     * @class QuadraticPoint\n     * @param {Object} obj\n     * @constructor\n     */\n    function QuadraticPoint (obj) {\n        scope.Point.call(this, obj);\n        this.pressure = 0.5;\n        this.distance = 0.0;\n        this.length = 0.0;\n        this.ux = 0.0;\n        this.uy = 0.0;\n        this.x1 = 0.0;\n        this.x2 = 0.0;\n        this.y1 = 0.0;\n        this.y2 = 0.0;\n    }\n\n    /**\n     * Inheritance property\n     */\n    QuadraticPoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    QuadraticPoint.prototype.constructor = QuadraticPoint;\n\n    /**\n     * Get pressure\n     *\n     * @method getPressure\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getPressure = function () {\n        return this.pressure;\n    };\n\n    /**\n     * Set pressure\n     *\n     * @method setPressure\n     * @param {Number} pressure\n     */\n    QuadraticPoint.prototype.setPressure = function (pressure) {\n        this.pressure = pressure;\n    };\n\n    /**\n     * Get distance\n     *\n     * @method getDistance\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getDistance = function () {\n        return this.distance;\n    };\n\n    /**\n     * Set distance\n     *\n     * @method setDistance\n     * @param {Number} distance\n     */\n    QuadraticPoint.prototype.setDistance = function (distance) {\n        this.distance = distance;\n    };\n\n    /**\n     * Get length\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getLength = function () {\n        return this.length;\n    };\n\n    /**\n     * Set length\n     *\n     * @method setLength\n     * @param {Number} length\n     */\n    QuadraticPoint.prototype.setLength = function (length) {\n        this.length = length;\n    };\n\n    /**\n     * Get ux\n     *\n     * @method getUx\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getUx = function () {\n        return this.ux;\n    };\n\n    /**\n     * Set ux\n     *\n     * @method setUx\n     * @param {Number} ux\n     */\n    QuadraticPoint.prototype.setUx = function (ux) {\n        this.ux = ux;\n    };\n\n    /**\n     * Get uy\n     *\n     * @method getUy\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getUy = function () {\n        return this.uy;\n    };\n\n    /**\n     * Set uy\n     *\n     * @method setUy\n     * @param {Number} uy\n     */\n    QuadraticPoint.prototype.setUy = function (uy) {\n        this.uy = uy;\n    };\n\n    /**\n     * Get x1\n     *\n     * @method getX1\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getX1 = function () {\n        return this.x1;\n    };\n\n    /**\n     * Set x1\n     *\n     * @method setX1\n     * @param {Number} x1\n     */\n    QuadraticPoint.prototype.setX1 = function (x1) {\n        this.x1 = x1;\n    };\n\n    /**\n     * Get x2\n     *\n     * @method getX2\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getX2 = function () {\n        return this.x2;\n    };\n\n    /**\n     * Set x2\n     *\n     * @method setX2\n     * @param {Number} x2\n     */\n    QuadraticPoint.prototype.setX2 = function (x2) {\n        this.x2 = x2;\n    };\n\n    /**\n     * Get y1\n     *\n     * @method getY1\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getY1 = function () {\n        return this.y1;\n    };\n\n    /**\n     * Set y2\n     *\n     * @method setY1\n     * @param {Number} y1\n     */\n    QuadraticPoint.prototype.setY1 = function (y1) {\n        this.y1 = y1;\n    };\n\n    /**\n     * Get y2\n     *\n     * @method getY2\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getY2 = function () {\n        return this.y2;\n    };\n\n    /**\n     * Set y2\n     *\n     * @method setY2\n     * @param {Number} y2\n     */\n    QuadraticPoint.prototype.setY2 = function (y2) {\n        this.y2 = y2;\n    };\n\n    // Export\n    scope.QuadraticPoint = QuadraticPoint;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} obj\n     * @constructor\n     */\n    function Rectangle (obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number}\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number}\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {MyScript.Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @returns {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * The Stroker class that can use to store writing strokes and manage the undo/redo/clear system\n     *\n     * @class Stroker\n     * @constructor\n     */\n    function Stroker () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    }\n\n    /**\n     * Is Wrinting a stoke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    Stroker.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last current Stroke write\n     *\n     * @method getCurrentStroke\n     * @returns {Stroke}\n     */\n    Stroker.prototype.getCurrentStroke = function () {\n        return this.currentStroke;\n    };\n\n    /**\n     * Start to write a stroke\n     *\n     * @method startStrokeWriting\n     * @param {Number} x abcisse coordinate\n     * @param {Number} y ordinate coordinate\n     */\n    Stroker.prototype.startStrokeWriting = function (x, y) {\n        this.currentStroke = new scope.Stroke();\n        this.currentStroke.addX(x);\n        this.currentStroke.addY(y);\n        this.writing = true;\n    };\n\n    /**\n     * Continue to write a stroke\n     *\n     * @method continueStrokeWriting\n     * @param {Number} x abcisse coordinate\n     * @param {Number} y ordinate coordinate\n     */\n    Stroker.prototype.continueStrokeWriting = function (x, y) {\n        if (this.writing) {\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n        }\n    };\n\n    /**\n     * End of writing a stroke\n     *\n     * @method endStrokeWriting\n     */\n    Stroker.prototype.endStrokeWriting = function () {\n        this.strokes.push(this.currentStroke);\n        this.writing = false;\n    };\n\n    /**\n     * Clear the strokes list\n     *\n     * @method clear\n     */\n    Stroker.prototype.clear = function () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Is The Strokes list is empty\n     *\n     * @method isEmpty\n     * @returns {Boolean}\n     */\n    Stroker.prototype.isEmpty = function () {\n        return this.strokes.length === 0;\n    };\n\n    /**\n     * Is the Undo/Redo Stack empty\n     *\n     * @method isRedoEmpty\n     * @returns {Boolean}\n     */\n    Stroker.prototype.isRedoEmpty = function () {\n        return this.undoRedoStack.length === 0;\n    };\n\n    /**\n     * Make an undo\n     *\n     * @method undo\n     */\n    Stroker.prototype.undo = function () {\n        this.undoRedoStack.push(this.strokes[this.strokes.length - 1]);\n        this.strokes.pop();\n    };\n\n    /**\n     * Make a redo\n     *\n     * @method redo\n     */\n    Stroker.prototype.redo = function () {\n        this.strokes.push(this.undoRedoStack[this.undoRedoStack.length - 1]);\n        this.undoRedoStack.pop();\n    };\n\n    /**\n     * Get the strokes list\n     *\n     * @method getStokes\n     * @returns {Stroke[]}\n     */\n    Stroker.prototype.getStrokes = function () {\n        return this.strokes;\n    };\n\n    /**\n     * Get the Undo/Redo Stack\n     *\n     * @method getUndoRedoStack\n     * @returns {Stroke[]}\n     */\n    Stroker.prototype.getUndoRedoStack = function () {\n        return this.undoRedoStack;\n    };\n\n    /**\n     * Clear the Undo/Redo Stack\n     *\n     * @method clearUndoRedoStack\n     */\n    Stroker.prototype.clearUndoRedoStack = function () {\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Copy the strokes values from index on an other list of strokes\n     *\n     * @method copy\n     * @param {Stroke[]} strokes List of strokes\n     * @param {Number} index Position to start the copy\n     */\n    Stroker.prototype.copy = function (strokes, index) {\n        for (index; index < this.strokes.length; index++) {\n            strokes.push(this.strokes[index]);\n        }\n    };\n\n    // Export\n    scope.Stroker = Stroker;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils () {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {MyScript.Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x:xMin, y:yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {MyScript.Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst,xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x:xMin, y:yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {MyScript.Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x:xMin, y:yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent () {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent a bounding box\n     *\n     * @class BoundingBox\n     * @extends Rectangle\n     * @param {Object} obj\n     * @constructor\n     */\n    function BoundingBox (obj) {\n        scope.Rectangle.call(this, obj);\n        if (obj) {\n            this.xMin = obj.xMin;\n            this.xMax = obj.xMax;\n            this.yMin = obj.yMin;\n            this.yMax = obj.yMax;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    BoundingBox.prototype = new scope.Rectangle();\n\n    /**\n     * Constructor property\n     */\n    BoundingBox.prototype.constructor = BoundingBox;\n\n    BoundingBox.prototype.getX = function () {\n        return this.xMin;\n    };\n\n    BoundingBox.prototype.getY = function () {\n        return this.yMin;\n    };\n\n    BoundingBox.prototype.getXMin = function () {\n        return this.xMin;\n    };\n\n    BoundingBox.prototype.setXMin = function (xMin) {\n        this.xMin = xMin;\n    };\n\n    BoundingBox.prototype.getXMax = function () {\n        return this.xMax;\n    };\n\n    BoundingBox.prototype.setXMax = function (xMax) {\n        this.xMax = xMax;\n    };\n\n    BoundingBox.prototype.getYMin = function () {\n        return this.yMin;\n    };\n\n    BoundingBox.prototype.setYMin = function (yMin) {\n        this.yMin = yMin;\n    };\n\n    BoundingBox.prototype.getYMax = function () {\n        return this.yMax;\n    };\n\n    BoundingBox.prototype.setYMax = function (yMax) {\n        this.yMax = yMax;\n    };\n\n    BoundingBox.prototype.getWidth = function () {\n        return this.xMax - this.xMin;\n    };\n\n    BoundingBox.prototype.getHeight = function () {\n        return this.yMax - this.yMin;\n    };\n\n    // Export\n    scope.BoundingBox = BoundingBox;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent a simple stroke input component\n     *\n     * @class Stroke\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function Stroke () {\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    Stroke.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    Stroke.prototype.constructor = Stroke;\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    Stroke.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    Stroke.prototype.addX = function (x) {\n        this.x.push(x);\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    Stroke.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    Stroke.prototype.addY = function (y) {\n        this.y.push(y);\n    };\n\n    /**\n     * Get the number of points for this stroke\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    Stroke.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {MyScript.BoundingBox}\n     */\n    Stroke.prototype.getBoundingBox = function () {\n        return new scope.BoundingBox({\n            xMin: Math.min.apply(Math, this.getX()),\n            xMax: Math.max.apply(Math, this.getX()),\n            yMin: Math.min.apply(Math, this.getY()),\n            yMax: Math.max.apply(Math, this.getY())\n        });\n    };\n\n    // Export\n    scope.Stroke = Stroke;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter () {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput () {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData () {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharacterInputComponent () {\n        this.type = 'inputCharacter';\n        this.alternates = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {MyScript.CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {MyScript.CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {MyScript.CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate (alternate, probability) {\n        this.alternate = alternate;\n        this.probability = probability;\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent () {\n        this.type = 'char';\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get character\n     *\n     * @method getCharacter\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getCharacter = function () {\n        return this.character;\n    };\n\n    /**\n     * Set character\n     *\n     * @method setCharacter\n     * @param {String} character\n     */\n    CharInputComponent.prototype.setCharacter = function (character) {\n        this.character = character;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent () {\n        this.type = 'string';\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get string\n     *\n     * @method getString\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getString = function () {\n        return this.string;\n    };\n\n    /**\n     * Set string\n     *\n     * @method setString\n     * @param {String} string\n     */\n    StringInputComponent.prototype.setString = function (string) {\n        this.string = string;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit () {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @returns {MyScript.AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {MyScript.AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter (obj) {\n        scope.AbstractParameter.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {String}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {String}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {String} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {MyScript.TextProperties[]}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {MyScript.TextProperties[]} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties () {\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MyScript.TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MyScript.TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {MyScript.TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {MyScript.TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @method getTextRecognitionInput\n     * @returns {MyScript.TextRecognitionInput} inputMode\n     */\n    TextRecognitionData.prototype.getTextRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setTextRecognitionInput\n     * @param {MyScript.TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setTextRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array}\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {MyScript.AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {MyScript.AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method getDoBeautification\n     * @returns {Boolean}\n     */\n    ShapeRecognitionInput.prototype.getDoBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setDoBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeRecognitionInput.prototype.setDoBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Number}\n     */\n    ShapeRecognitionInput.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Number} rejectDetectionSensitivity\n     */\n    ShapeRecognitionInput.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @method getShapeRecognitionInput\n     * @returns {MyScript.ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getShapeRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setShapeRecognitionInput\n     * @param {MyScript.ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setShapeRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter () {\n        this.resultTypes = [];\n        this.isColumnar = false;\n        this.userResources = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array}\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method getIsColumnar\n     * @returns boolean\n     */\n    MathParameter.prototype.getIsColumnar = function () {\n        return this.isColumnar;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setIsColumnar\n     * @param  boolean\n     */\n    MathParameter.prototype.setIsColumnar = function (isColumnar) {\n        this.resultTypes = isColumnar;\n    };\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array}\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number}\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method getIsColumnar\n     * @returns boolean\n     */\n    MathRecognitionInput.prototype.getIsColumnar = function () {\n        return this.isColumnar;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setIsColumnar\n     * @param  boolean\n     */\n    MathRecognitionInput.prototype.setIsColumnar = function (isColumnar) {\n        this.isColumnar = isColumnar;\n    };\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n    /**\n     * Get math input\n     *\n     * @method getMathRecognitionInput\n     * @returns {MyScript.MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getMathRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setMathRecognitionInput\n     * @param {MyScript.MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setMathRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent () {\n        this.type = 'accidental';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent () {\n        this.type = 'arpeggiate';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music bar input\n     *\n     * @class MusicBarInput\n     * @constructor\n     */\n    function MusicBarInput () {\n    }\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBarInput.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBarInput.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBarInput.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBarInput.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    // Export\n    scope.MusicBarInput = MusicBarInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent () {\n        this.type = 'bar';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar input component value\n     *\n     * @method getValue\n     * @returns {MyScript.MusicBarInput}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar input component value\n     *\n     * @method setValue\n     * @param {MyScript.MusicBarInput} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music beam input\n     *\n     * @class MusicBeamInput\n     * @constructor\n     */\n    function MusicBeamInput () {\n    }\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeamInput.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeamInput.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeamInput.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeamInput.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeamInput.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeamInput.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeamInput.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeamInput.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeamInput.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeamInput.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicBeamInput = MusicBeamInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent () {\n        this.type = 'beam';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeamInput}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeamInput} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music clef input\n     *\n     * @class MusicClefInput\n     * @constructor\n     */\n    function MusicClefInput () {\n    }\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClefInput.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClefInput.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClefInput.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClefInput.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClefInput.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClefInput.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClefInput = MusicClefInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Clef input component\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent () {\n        this.type = 'clef';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MyScript.MusicClefInput}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MyScript.MusicClefInput} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music decoration input\n     *\n     * @class MusicDecorationInput\n     * @constructor\n     */\n    function MusicDecorationInput () {\n    }\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecorationInput.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecorationInput.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecorationInput.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecorationInput.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecorationInput = MusicDecorationInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent () {\n        this.type = 'decoration';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecorationInput}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecorationInput} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent () {\n        this.type = 'dots';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent () {\n        this.type = 'head';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent () {\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent () {\n        this.type = 'rest';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent () {\n        this.type = 'stem';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent () {\n        this.type = 'tieOrSlur';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent () {\n        this.type = 'timeSignature';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represents a staff used for music recognition\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff () {\n    }\n\n    /**\n     * Get the count of lines\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the count of lines\n     *\n     * @method setCount\n     * @param {Number}\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number}\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number}\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter () {\n        this.resultTypes = [];\n        this.userResources = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array}\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array}\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number}\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MyScript.MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MyScript.MusicStaff}\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number}\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the result types\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the result types\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicRecognitionInput.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRecognitionInput.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicRecognitionInput.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @method getMusicRecognitionInput\n     * @returns {MyScript.MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getMusicRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setMusicRecognitionInput\n     * @param {MyScript.MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setMusicRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput () {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @method getAnalyzerRecognitionInput\n     * @returns {MyScript.AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getAnalyzerRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setAnalyzerRecognitionInput\n     * @param {MyScript.AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setAnalyzerRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function AbstractResult (obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextCandidate (obj) {\n        this.children = [];\n        this.flags = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[i]));\n            }\n            for (var j in obj.flags) {\n                this.flags.push(obj.flags[j]);\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextDocument (obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            this.textSegmentResult = new scope.TextSegmentResult(obj.textSegmentResult);\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {MyScript.TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word candidates\n     *\n     * @method getWordCandidates\n     * @returns {Array}\n     */\n    TextDocument.prototype.getWordCandidates = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get char candidates\n     *\n     * @method getCharCandidates\n     * @returns {Array}\n     */\n    TextDocument.prototype.getCharCandidates = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get text segment result\n     *\n     * @method getTextSegmentResult\n     * @returns {MyScript.TextSegmentResult}\n     */\n    TextDocument.prototype.getTextSegmentResult = function () {\n        return this.textSegmentResult;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {MyScript.TextDocument}\n     */\n    TextResult.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextSegment (obj) {\n        this.candidates = [];\n        if (obj) {\n            this.inkRanges = obj.inkRanges;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MyScript.TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {String}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text segment result\n     *\n     * @class TextSegmentResult\n     * @extends TextSegment\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextSegmentResult (obj) {\n        scope.TextSegment.call(this, obj);\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextSegmentResult.prototype = new scope.TextSegment();\n\n    /**\n     * Constructor property\n     */\n    TextSegmentResult.prototype.constructor = TextSegmentResult;\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegmentResult.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MyScript.TextCandidate}\n     */\n    TextSegmentResult.prototype.getSelectedCandidate = function () {\n        return this.candidates[this.selectedCandidateIdx];\n    };\n\n    // Export\n    scope.TextSegmentResult = TextSegmentResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextTagItem (obj) {\n        if (obj) {\n            this.tagType = obj.tagType;\n            this.inkRanges = obj.inkRanges;\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {String}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} obj\n     * @constructor\n     */\n    function AbstractShapePrimitive (obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract decorated shape\n     *\n     * @class AbstractDecoratedShape\n     * @extends AbstractShapePrimitive\n     * @param {Object} obj\n     * @constructor\n     */\n    function AbstractDecoratedShape (obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractDecoratedShape.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    AbstractDecoratedShape.prototype.constructor = AbstractDecoratedShape;\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractDecoratedShape.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractDecoratedShape.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractDecoratedShape.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractDecoratedShape.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractDecoratedShape.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractDecoratedShape.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractDecoratedShape = AbstractDecoratedShape;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeCandidate (obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeDocument (obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {MyScript.ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractDecoratedShape\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeEllipse (obj) {\n        scope.AbstractDecoratedShape.call(this, obj);\n        if (obj) {\n            this.center = new scope.ShapePoint(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractDecoratedShape();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {MyScript.ShapePoint}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeErased (obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeInkRange (obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {MyScript.ShapePoint}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {MyScript.ShapePoint}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractDecoratedShape\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeLine (obj) {\n        scope.AbstractDecoratedShape.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.ShapePoint(obj.firstPoint);\n            this.lastPoint = new scope.ShapePoint(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractDecoratedShape();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {ShapePoint}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {ShapePoint}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeNotRecognized (obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape point\n     *\n     * @class ShapePoint\n     * @extends Point\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapePoint (obj) {\n        scope.Point.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapePoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    ShapePoint.prototype.constructor = ShapePoint;\n\n    // Export\n    scope.ShapePoint = ShapePoint;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeRecognized (obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                var primitive;\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        primitive = new scope.ShapeLine(obj.primitives[i]);\n                        break;\n                    case 'ellipse':\n                        primitive = new scope.ShapeEllipse(obj.primitives[i]);\n                        break;\n                }\n                this.primitives.push(primitive);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {MyScript.AbstractDecoratedShape[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    /**\n     * Get shape document\n     *\n     * @method getShapeDocument\n     * @returns {MyScript.ShapeDocument}\n     */\n    ShapeResult.prototype.getShapeDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeScratchOut (obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeSegment (obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                var candidate;\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        candidate = new scope.ShapeErased(obj.candidates[i]);\n                        break;\n                    case 'scratchOut':\n                        candidate = new scope.ShapeScratchOut(obj.candidates[i]);\n                        break;\n                    case 'recognizedShape':\n                        candidate = new scope.ShapeRecognized(obj.candidates[i]);\n                        break;\n                    default:\n                        candidate = new scope.ShapeNotRecognized(obj.candidates[i]);\n                        break;\n                }\n                this.candidates.push(candidate);\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIndex\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIndex = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MyScript.ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MyScript.ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        return this.candidates[this.selectedCandidateIndex];\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathNode (obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathNonTerminalNode (obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        switch (obj.candidates[i].name) {\n                            case 'term':\n                                this.candidates.push(new scope.MathTermNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'sqrtTerm':\n                                this.candidates.push(new scope.MathSqrtNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'vectorTerm':\n                                this.candidates.push(new scope.MathVectorNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'system':\n                                this.candidates.push(new scope.MathSystemNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'exponentiable':\n                                this.candidates.push(new scope.MathExponentiableNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'expression':\n                                this.candidates.push(new scope.MathExpressionNonTerminalNode(obj.candidates[i]));\n                                break;\n                        }\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        switch (obj.candidates[i].name) {\n                            case 'identity':\n                                this.candidates.push(new scope.MathIdentityRuleNode(obj.candidates[i]));\n                                break;\n                            case 'horizontal pair':\n                                this.candidates.push(new scope.MathHorizontalPairRuleNode(obj.candidates[i]));\n                                break;\n                            case 'fence':\n                                this.candidates.push(new scope.MathFenceRuleNode(obj.candidates[i]));\n                                break;\n                            case 'fraction':\n                                this.candidates.push(new scope.MathFractionRuleNode(obj.candidates[i]));\n                                break;\n                            case 'sqrt':\n                                this.candidates.push(new scope.MathSqrtRuleNode(obj.candidates[i]));\n                                break;\n                            case 'subscript':\n                                this.candidates.push(new scope.MathSubscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'superscript':\n                                this.candidates.push(new scope.MathSuperscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'subsuperscript':\n                                this.candidates.push(new scope.MathSubSuperscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'underscript':\n                                this.candidates.push(new scope.MathUnderscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'overscript':\n                                this.candidates.push(new scope.MathOverscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'underoverscript':\n                                this.candidates.push(new scope.MathUnderOverscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'presuperscript':\n                                this.candidates.push(new scope.MathPreSuperscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'vertical pair':\n                                this.candidates.push(new scope.MathVerticalPairRuleNode(obj.candidates[i]));\n                                break;\n                            case 'left fence':\n                                this.candidates.push(new scope.MathLeftFenceRuleNode(obj.candidates[i]));\n                                break;\n                        }\n                        break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MyScript.MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MyScript.MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        return this.candidates[this.selectedCandidate];\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {MyScript.Rectangle}\n     */\n    MathNonTerminalNode.prototype.getBoundingBox = function () {\n        return this.getSelectedCandidate() ? this.getSelectedCandidate().getBoundingBox() : undefined;\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathResultElement (obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);","(function (scope) {\n\t'use strict';\n\t/**\n\t * Math rule node\n\t *\n\t * @class MathRuleNode\n\t * @extends MathNode\n\t * @param {Object} obj\n\t * @constructor\n\t */\n\tfunction MathRuleNode (obj) {\n\t\tscope.MathNode.call(this, obj);\n\t\tthis.children = [];\n\t\tif (obj) {\n\t\t\tthis.name = obj.name;\n\t\t\tfor (var i in obj.children) {\n\t\t\t\tswitch (obj.children[i].type) {\n\t\t\t\t\tcase 'nonTerminalNode':\n\t\t\t\t\t\tswitch (obj.children[i].name) {\n\t\t\t\t\t\t\tcase 'term':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathTermNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'sqrtTerm':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSqrtNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'vectorTerm':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathVectorNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'system':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSystemNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'exponentiable':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathExponentiableNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathExpressionNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'terminalNode':\n\t\t\t\t\t\tthis.children.push(new scope.MathTerminalNode(obj.children[i]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'rule':\n\t\t\t\t\t\tswitch (obj.children[i].name) {\n\t\t\t\t\t\t\tcase 'identity':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathIdentityRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'horizontal pair':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathHorizontalPairRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'fence':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathFenceRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'fraction':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathFractionRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'sqrt':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSqrtRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'subscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSubscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'superscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSuperscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'subsuperscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSubSuperscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'underscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathUnderscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'overscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathOverscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'underoverscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathUnderOverscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'presuperscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathPreSuperscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'vertical pair':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathVerticalPairRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'left fence':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathLeftFenceRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Inheritance property\n\t */\n\tMathRuleNode.prototype = new scope.MathNode();\n\n\t/**\n\t * Constructor property\n\t */\n\tMathRuleNode.prototype.constructor = MathRuleNode;\n\n\t/**\n\t * Get name\n\t *\n\t * @method getName\n\t * @returns {String}\n\t */\n\tMathRuleNode.prototype.getName = function () {\n\t\treturn this.name;\n\t};\n\n\t/**\n\t * Get children\n\t *\n\t * @method getChildren\n\t * @returns {MyScript.MathNode[]}\n\t */\n\tMathRuleNode.prototype.getChildren = function () {\n\t\treturn this.children;\n\t};\n\n\t// Export\n\tscope.MathRuleNode = MathRuleNode;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathDocument (obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(obj.results[i]));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MathSymbolTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MyScript.MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathInkRange (obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathLaTexResultElement (obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathMathMLResultElement (obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    /**\n     * Get math document\n     *\n     * @method getMathDocument\n     * @returns {MyScript.MathDocument}\n     */\n    MathResult.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathScratchOut (obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MyScript.MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSymbolTreeResultElement (obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            switch (obj.root.type) {\n                case 'nonTerminalNode':\n                    switch (obj.root.name) {\n                        case 'term':\n                            this.root = new scope.MathTermNonTerminalNode(obj.root);\n                            break;\n                        case 'sqrtTerm':\n                            this.root = new scope.MathSqrtNonTerminalNode(obj.root);\n                            break;\n                        case 'vectorTerm':\n                            this.root = new scope.MathVectorNonTerminalNode(obj.root);\n                            break;\n                        case 'system':\n                            this.root = new scope.MathSystemNonTerminalNode(obj.root);\n                            break;\n                        case 'exponentiable':\n                            this.root = new scope.MathExponentiableNonTerminalNode(obj.root);\n                            break;\n                        case 'expression':\n                            this.root = new scope.MathExpressionNonTerminalNode(obj.root);\n                            break;\n                    }\n                    break;\n                case 'terminalNode':\n                    this.root = new scope.MathTerminalNode(obj.root);\n                    break;\n                case 'rule':\n                    switch (obj.root.name) {\n                        case 'identity':\n                            this.root = new scope.MathIdentityRuleNode(obj.root);\n                            break;\n                        case 'horizontal pair':\n                            this.root = new scope.MathHorizontalPairRuleNode(obj.root);\n                            break;\n                        case 'fence':\n                            this.root = new scope.MathFenceRuleNode(obj.root);\n                            break;\n                        case 'fraction':\n                            this.root = new scope.MathFractionRuleNode(obj.root);\n                            break;\n                        case 'sqrt':\n                            this.root = new scope.MathSqrtRuleNode(obj.root);\n                            break;\n                        case 'subscript':\n                            this.root = new scope.MathSubscriptRuleNode(obj.root);\n                            break;\n                        case 'superscript':\n                            this.root = new scope.MathSuperscriptRuleNode(obj.root);\n                            break;\n                        case 'subsuperscript':\n                            this.root = new scope.MathSubSuperscriptRuleNode(obj.root);\n                            break;\n                        case 'underscript':\n                            this.root = new scope.MathUnderscriptRuleNode(obj.root);\n                            break;\n                        case 'overscript':\n                            this.root = new scope.MathOverscriptRuleNode(obj.root);\n                            break;\n                        case 'underoverscript':\n                            this.root = new scope.MathUnderOverscriptRuleNode(obj.root);\n                            break;\n                        case 'presuperscript':\n                            this.root = new scope.MathPreSuperscriptRuleNode(obj.root);\n                            break;\n                        case 'vertical pair':\n                            this.root = new scope.MathVerticalPairRuleNode(obj.root);\n                            break;\n                        case 'left fence':\n                            this.root = new scope.MathLeftFenceRuleNode(obj.root);\n                            break;\n                    }\n                    break;\n            }\n            this.value = JSON.stringify(obj.root, null, '  ');\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MyScript.MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathTerminalNode (obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MyScript.MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        return this.candidates[this.selectedCandidate];\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathTerminalNodeCandidate (obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math fence rule node\n     *\n     * @class MathFenceRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathFenceRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathFenceRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathFenceRuleNode.prototype.constructor = MathFenceRuleNode;\n\n    // Export\n    scope.MathFenceRuleNode = MathFenceRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math fraction rule node\n     *\n     * @class MathFractionRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathFractionRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathFractionRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathFractionRuleNode.prototype.constructor = MathFractionRuleNode;\n\n    // Export\n    scope.MathFractionRuleNode = MathFractionRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math horizontal pair rule node\n     *\n     * @class MathHorizontalPairRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathHorizontalPairRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathHorizontalPairRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathHorizontalPairRuleNode.prototype.constructor = MathHorizontalPairRuleNode;\n\n    // Export\n    scope.MathHorizontalPairRuleNode = MathHorizontalPairRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math identity rule node\n     *\n     * @class MathIdentityRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathIdentityRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathIdentityRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathIdentityRuleNode.prototype.constructor = MathIdentityRuleNode;\n\n    // Export\n    scope.MathIdentityRuleNode = MathIdentityRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math rule node\n     *\n     * @class MathLeftFenceRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathLeftFenceRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLeftFenceRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathLeftFenceRuleNode.prototype.constructor = MathLeftFenceRuleNode;\n\n    // Export\n    scope.MathLeftFenceRuleNode = MathLeftFenceRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math overscript rule node\n     *\n     * @class MathOverscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathOverscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathOverscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathOverscriptRuleNode.prototype.constructor = MathOverscriptRuleNode;\n\n    // Export\n    scope.MathOverscriptRuleNode = MathOverscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math pre-superscript rule node\n     *\n     * @class MathPreSuperscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathPreSuperscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathPreSuperscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathPreSuperscriptRuleNode.prototype.constructor = MathPreSuperscriptRuleNode;\n\n    // Export\n    scope.MathPreSuperscriptRuleNode = MathPreSuperscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math sqrt rule node\n     *\n     * @class MathSqrtRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSqrtRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSqrtRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathSqrtRuleNode.prototype.constructor = MathSqrtRuleNode;\n\n    // Export\n    scope.MathSqrtRuleNode = MathSqrtRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math subscript rule node\n     *\n     * @class MathSubscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSubscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSubscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathSubscriptRuleNode.prototype.constructor = MathSubscriptRuleNode;\n\n    // Export\n    scope.MathSubscriptRuleNode = MathSubscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math sub-superscript rule node\n     *\n     * @class MathSubSuperscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSubSuperscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSubSuperscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathSubSuperscriptRuleNode.prototype.constructor = MathSubSuperscriptRuleNode;\n\n    // Export\n    scope.MathSubSuperscriptRuleNode = MathSubSuperscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math superscript rule node\n     *\n     * @class MathSuperscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSuperscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSuperscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathSuperscriptRuleNode.prototype.constructor = MathSuperscriptRuleNode;\n\n    // Export\n    scope.MathSuperscriptRuleNode = MathSuperscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math under-overscript rule node\n     *\n     * @class MathUnderOverscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathUnderOverscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathUnderOverscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathUnderOverscriptRuleNode.prototype.constructor = MathUnderOverscriptRuleNode;\n\n    // Export\n    scope.MathUnderOverscriptRuleNode = MathUnderOverscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math underscript rule node\n     *\n     * @class MathUnderscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathUnderscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathUnderscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathUnderscriptRuleNode.prototype.constructor = MathUnderscriptRuleNode;\n\n    // Export\n    scope.MathUnderscriptRuleNode = MathUnderscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math vertical pair rule node\n     *\n     * @class MathVerticalPairRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathVerticalPairRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathVerticalPairRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathVerticalPairRuleNode.prototype.constructor = MathVerticalPairRuleNode;\n\n    // Export\n    scope.MathVerticalPairRuleNode = MathVerticalPairRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math exponentiable non-terminal node\n     *\n     * @class MathExponentiableNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathExponentiableNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathExponentiableNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathExponentiableNonTerminalNode.prototype.constructor = MathExponentiableNonTerminalNode;\n\n    // Export\n    scope.MathExponentiableNonTerminalNode = MathExponentiableNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math expression non-terminal node\n     *\n     * @class MathExpressionNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathExpressionNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathExpressionNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathExpressionNonTerminalNode.prototype.constructor = MathExpressionNonTerminalNode;\n\n    // Export\n    scope.MathExpressionNonTerminalNode = MathExpressionNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math term non-terminal node\n     *\n     * @class MathSqrtNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSqrtNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSqrtNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathSqrtNonTerminalNode.prototype.constructor = MathSqrtNonTerminalNode;\n\n    // Export\n    scope.MathSqrtNonTerminalNode = MathSqrtNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math term non-terminal node\n     *\n     * @class MathVectorNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathVectorNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathVectorNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathVectorNonTerminalNode.prototype.constructor = MathVectorNonTerminalNode;\n\n    // Export\n    scope.MathVectorNonTerminalNode = MathVectorNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math term non-terminal node\n     *\n     * @class MathSystemNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSystemNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSystemNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathSystemNonTerminalNode.prototype.constructor = MathSystemNonTerminalNode;\n\n    // Export\n    scope.MathSystemNonTerminalNode = MathSystemNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math term non-terminal node\n     *\n     * @class MathTermNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathTermNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTermNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathTermNonTerminalNode.prototype.constructor = MathTermNonTerminalNode;\n\n    // Export\n    scope.MathTermNonTerminalNode = MathTermNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicElement (obj) {\n        this.inputRanges = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MyScript.MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicResultElement (obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicAccidental (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicAnnotation (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicArpeggiate (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicBar (obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MyScript.MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicBeam (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicChord (obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MyScript.MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MyScript.MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MyScript.MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MyScript.MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MyScript.MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MyScript.MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MyScript.MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music clef\n     *\n     * @class MusicClef\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicClef (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.line = obj.line;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicDecoration (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicDocument (obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MyScript.MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MyScript.MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicDots (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicHead (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicInputRange (obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicKeySignature (obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MyScript.MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MyScript.MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicKeySignatureData (obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @mathod getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicLedgerLine (obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicNote (obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MyScript.MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MyScript.MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MyScript.MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MyScript.MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MyScript.MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MyScript.MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MyScript.MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MyScript.MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getTopTie\n     * @returns {MyScript.MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MyScript.MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MyScript.MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicPart (obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                }\n                this.elements.push(obj.elements[i]);\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MyScript.AbstractMusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicPitchData (obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicRest (obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MyScript.MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MyScript.MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    /**\n     * Get music document\n     *\n     * @method getMusicDocument\n     * @returns {MyScript.MusicDocument}\n     */\n    MusicResult.prototype.getMusicDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicScore (obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MyScript.MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicScoreTreeResultElement (obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MyScript.MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicScratchOut (obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MyScript.MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MyScript.MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicSlur (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicStem (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicTie (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicTimeSignature (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MyScript.MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MyScript.MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicXMLResultElement (obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerElement (obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerCell (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerCellData (obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.AnalyzerPointData(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {AnalyzerPointData}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {MyScript.Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerDocument (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {MyScript.AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {MyScript.ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {MyScript.AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {MyScript.AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerElementReference (obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerGroup (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {MyScript.AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerInkRange (obj) {\n        if (obj) {\n            this.firstPoint = new scope.AnalyzerPointData(obj.firstPoint);\n            this.lastPoint = new scope.AnalyzerPointData(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerLine (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MyScript.AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerLineData (obj) {\n        if (obj) {\n            this.p1 = new scope.AnalyzerPointData(obj.p1);\n            this.p2 = new scope.AnalyzerPointData(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer point data\n     *\n     * @class AnalyzerPointData\n     * @extends MyScript.Point\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerPointData (obj) {\n        scope.Point.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerPointData.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerPointData.prototype.constructor = AnalyzerPointData;\n\n    // Export\n    scope.AnalyzerPointData = AnalyzerPointData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke (obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    /**\n     * Get analyzer document\n     *\n     * @method getAnalyzerDocument\n     * @returns {MyScript.AnalyzerDocument}\n     */\n    AnalyzerResult.prototype.getAnalyzerDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerStrokeType (obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {MyScript.AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerTable (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MyScript.AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {MyScript.AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {MyScript.AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerTableData (obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerTextLine (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MyScript.AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {MyScript.TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {MyScript.AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerTextLineData (obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.AnalyzerPointData(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {MyScript.Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if(this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerUnderline (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerUnderlineData (obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface () {\n    }\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} obj\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {QReturnValue}\n     */\n    NetworkInterface.prototype.xhr = function (type, url, data) {\n\n        var deferred = Q.defer();\n\n        function onStateChange () {\n            if (request.readyState === 4) {\n                if (request.status >= 200 && request.status < 300) {\n                    deferred.resolve(NetworkInterface.parse(request));\n                } else {\n                    deferred.reject(NetworkInterface.parse(request));\n                }\n            }\n        }\n\n        function onLoad () {\n            if (request.status >= 200 && request.status < 300) {\n                deferred.resolve(NetworkInterface.parse(request));\n            } else {\n                deferred.reject(new Error('Status code was ' + request.status));\n            }\n        }\n\n        function onError () {\n            deferred.reject(new Error('Can\\'t XHR ' + JSON.stringify(url)));\n        }\n\n        function onProgress (event) {\n            deferred.notify(event.loaded / event.total);\n        }\n\n        var request = new XMLHttpRequest('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Accept', 'application/json');\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        request.onload = onLoad;\n        request.onerror = onError;\n        request.onprogress = onProgress;\n        request.onreadystatechange = onStateChange;\n        request.send(NetworkInterface.transformRequest(data));\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {QReturnValue}\n     */\n    NetworkInterface.prototype.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return this.xhr('GET', src);\n    };\n\n    ///**\n    // * Put request\n    // *\n    // * @method put\n    // * @param {String} src\n    // * @param {Object} data\n    // * @returns {QReturnValue}\n    // */\n    //NetworkInterface.prototype.put = function (url, data) {\n    //    return this.xhr('PUT', url, data);\n    //};\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} src\n     * @param {Object} data\n     * @returns {QReturnValue}\n     */\n    NetworkInterface.prototype.post = function (url, data) {\n        return this.xhr('POST', url, data);\n    };\n\n    ///**\n    // * Delete request\n    // *\n    // * @method delete\n    // * @param {String} src\n    // * @param {Object} data\n    // * @returns {QReturnValue}\n    // */\n    //NetworkInterface.prototype.delete = function (url, data) {\n    //    return this.xhr('DELETE', url, data);\n    //};\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function AbstractRecognizer (url) {\n        this.url = url;\n        this.http = new scope.NetworkInterface();\n    }\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {QReturnValue}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return this.http.get(this.url + '/text/languages.json', data).then(\n            function success (response) {\n                return response.result;\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @method computeHmac\n     * @param {String} applicationKey\n     * @param {String} data\n     * @param {String} hmacKey\n     */\n\n    AbstractRecognizer.prototype.computeHmac = function (applicationKey, data, hmacKey) {\n        var jsonInput = (typeof data === 'object') ? JSON.stringify(data) : data;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    /**\n     * Authenticate the websocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        if (!this.socket) {\n            return;\n        }\n\n        var hmacMessage = {\n            type: 'hmac',\n            applicationKey: applicationKey,\n            hmac: this.computeHmac(applicationKey, challenge, hmacKey),\n            challenge: challenge\n        };\n        this.socket.send(JSON.stringify(hmacMessage));\n    };\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function TextRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {TextParameter} parameters\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, inputUnits, hmacKey) {\n\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(parameters);\n        input.setInputUnits(inputUnits);\n\n        var data = new scope.TextRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setTextRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/text/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.TextResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text websocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function TextWSRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n        this.socket = new WebSocket(url + '/text');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Set websocket open callback\n     *\n     * @method setOpenCallback\n     * @param callback\n     */\n    TextWSRecognizer.prototype.setOpenCallback = function (callback) {\n        this.socket.onopen = callback;\n    };\n\n    /**\n     * Set websocket close callback\n     *\n     * @method setCloseCallback\n     * @param callback\n     */\n    TextWSRecognizer.prototype.setCloseCallback = function (callback) {\n        this.socket.onclose = callback;\n    };\n\n    /**\n     * Set websocket error callback\n     *\n     * @method setErrorCallback\n     * @param callback\n     */\n    TextWSRecognizer.prototype.setErrorCallback = function (callback) {\n        this.socket.onerror = callback;\n    };\n\n    /**\n     * Set websocket data callback\n     *\n     * @method setDataCallback\n     * @param callback\n     */\n    TextWSRecognizer.prototype.setDataCallback = function (callback) {\n        this.socket.onmessage = callback;\n    };\n\n    /**\n     * Initialize the websocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    TextWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        if (!this.socket) {\n            return;\n        }\n\n        var initMessage = {\n            type: 'applicationKey',\n            applicationKey: applicationKey\n        };\n\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(initMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Start the websocket session\n     *\n     * @method startWSRecognition\n     * @param {TextParameter} parameters\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (parameters, inputUnits) {\n        if (!this.socket) {\n            return;\n        }\n\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(parameters);\n        input.setInputUnits(inputUnits);\n\n        input.type = 'start';\n\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(input)));\n        return deferred.promise;\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        if (!this.socket) {\n            return;\n        }\n\n        var continueMessage = {\n            type: 'continue',\n            inputUnits: inputUnits,\n            instanceId: instanceId\n        };\n\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(continueMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Reset the websocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    TextWSRecognizer.prototype.resetWSRecognition = function () {\n        if (!this.socket) {\n            return;\n        }\n\n        var resetMessage = {\n            type: 'reset'\n        };\n\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(resetMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Delete the websocket instance\n     *\n     * @method stopWSRecognition\n     */\n    TextWSRecognizer.prototype.stopWSRecognition = function () {\n        this.socket = undefined;\n    };\n\n    /**\n     * Check if the socket is closed\n     *\n     * @method isClosed\n     * @returns {Boolean}\n     */\n    TextWSRecognizer.prototype.isClosed = function () {\n        return (!this.socket)? true: false;\n    };\n\n    /**\n     * Create a new socket\n     *\n     * @method restartWSRecognition\n     */\n    TextWSRecognizer.prototype.restartWSRecognition = function () {\n        var deferred = Q.defer();\n        deferred.resolve(this.socket = new WebSocket(this.url + '/text'));\n        return deferred.promise;\n    };\n\n    /**\n     * @callback TextWSRecognizer~dataCallback\n     * @callback TextWSRecognizer~errorCallback\n     * @callback TextWSRecognizer~closeCallback\n     * @callback TextWSRecognizer~openCallback\n     */\n\n        // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function ShapeRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {ShapeParameter} parameters\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, components, hmacKey) {\n\n        var input = new scope.ShapeRecognitionInput();\n        input.setComponents(components);\n        input.setDoBeautification(parameters.hasBeautification());\n        input.setRejectDetectionSensitivity(parameters.getRejectDetectionSensitivity());\n\n        var data = new scope.ShapeRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setShapeRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/shape/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.ShapeResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {QReturnValue}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return this.http.post(this.url + '/shape/clearSessionId.json', data).then(\n            function success (response) {\n                return response;\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function MathRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {MathParameter} parameters\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, components, hmacKey) {\n        var input = new scope.MathRecognitionInput();\n        input.setComponents(components);\n        input.setResultTypes(parameters.getResultTypes());\n        input.setIsColumnar(parameters.getIsColumnar());\n        input.setScratchOutDetectionSensitivity(parameters.getScratchOutDetectionSensitivity());\n        input.setUserResources(parameters.getUserResources());\n\n        var data = new scope.MathRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setMathRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/math/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.MathResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math websocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function MathWSRecognizer(url) {\n        scope.AbstractRecognizer.call(this, url);\n        this.socket = new WebSocket(url + '/math');\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Set websocket open callback\n     *\n     * @method setOpenCallback\n     * @param callback\n     */\n    MathWSRecognizer.prototype.setOpenCallback = function (callback) {\n        this.socket.onopen = callback;\n    };\n\n    /**\n     * Set websocket close callback\n     *\n     * @method setCloseCallback\n     * @param callback\n     */\n    MathWSRecognizer.prototype.setCloseCallback = function (callback) {\n        this.socket.onclose = callback;\n    };\n\n    /**\n     * Set websocket error callback\n     *\n     * @method setErrorCallback\n     * @param callback\n     */\n    MathWSRecognizer.prototype.setErrorCallback = function (callback) {\n        this.socket.onerror = callback;\n    };\n\n    /**\n     * Set websocket data callback\n     *\n     * @method setDataCallback\n     * @param callback\n     */\n    MathWSRecognizer.prototype.setDataCallback = function (callback) {\n        this.socket.onmessage = callback;\n    };\n\n    /**\n     * Initialize the websocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    MathWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        if (!this.socket) {\n            return;\n        }\n\n        var initMessage = {\n            type: 'applicationKey',\n            applicationKey: applicationKey\n        };\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(initMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Start the websocket session\n     *\n     * @method startWSRecognition\n     * @param {MathParameter} parameters\n     * @param {MathInputUnit[]} components\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (parameters, components) {\n        if (!this.socket) {\n            return;\n        }\n        var data = {\n            type: 'start',\n            components: components,\n            parameters: parameters\n        };\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(data)));\n        return deferred.promise;\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {MathInputUnit[]} components\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (parameters, components, instanceId) {\n        if (!this.socket) {\n            return;\n        }\n\n        var continueMessage = {\n            type: 'continue',\n            components: components,\n            resultTypes: parameters.getResultTypes(),\n            instanceId: instanceId\n        };\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(continueMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Reset the websocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    MathWSRecognizer.prototype.resetWSRecognition = function () {\n        if (!this.socket) {\n            return;\n        }\n\n        var resetMessage = {\n            type: 'reset'\n        };\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(resetMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Delete the websocket instance\n     *\n     * @method stopWSRecognition\n     */\n    MathWSRecognizer.prototype.stopWSRecognition = function () {\n        this.socket = undefined;\n    };\n\n    /**\n     * Check if the socket is closed\n     *\n     * @method isClosed\n     * @returns {Boolean}\n     */\n    MathWSRecognizer.prototype.isClosed = function () {\n        return (!this.socket) ? true : false;\n    };\n\n    /**\n     * Create a new socket\n     *\n     * @method restartWSRecognition\n     */\n    MathWSRecognizer.prototype.restartWSRecognition = function () {\n        var deferred = Q.defer();\n        deferred.resolve(this.socket = new WebSocket(this.url + '/math'));\n        return deferred.promise;\n    };\n\n    /**\n     * @callback MathWSRecognizer~dataCallback\n     * @callback MathWSRecognizer~errorCallback\n     * @callback MathWSRecognizer~closeCallback\n     * @callback MathWSRecognizer~openCallback\n     */\n\n        // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function MusicRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {MusicParameter} parameters\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, components, hmacKey) {\n\n        var input = new scope.MusicRecognitionInput();\n        input.setComponents(components);\n        input.setStaff(parameters.getStaff());\n        input.setDivisions(parameters.getDivisions());\n        input.setResultTypes(parameters.getResultTypes());\n        input.setScratchOutDetectionSensitivity(parameters.getScratchOutDetectionSensitivity());\n        input.setUserResources(parameters.getUserResources());\n\n        var data = new scope.MusicRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setMusicRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/music/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.MusicResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function AnalyzerRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {AnalyzerParameter} parameters\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, components, hmacKey) {\n\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setComponents(components);\n        input.setParameters(parameters);\n\n        var data = new scope.AnalyzerRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setAnalyzerRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/analyzer/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.AnalyzerResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for both input and output canvas draw\n     *\n     * @class RenderingParameters\n     * @param {String} color\n     * @param {String} rectColor\n     * @param {String} font\n     * @param {String} decoration\n     * @param {Number} width\n     * @param {String} pressureType\n     * @param {String} alpha\n     * @param {Boolean} doFadeOutLoop\n     * @param {Boolean} showBoundingBoxes\n     * @constructor\n     */\n    function RenderingParameters (color, rectColor, font, decoration, width, pressureType, alpha, doFadeOutLoop, showBoundingBoxes) {\n        this.color = color || 'black';\n        this.rectColor = rectColor || 'rgba(0, 0, 0, 0.2)';\n        this.font = font || 'Times New Roman';\n        this.decoration = decoration || '';\n        this.width = width || 4;\n        this.pressureType = pressureType || 'SIMULATED';\n        this.alpha = alpha || '1.0';\n        this.doFadeOutLoop = doFadeOutLoop || false;\n        this.showBoundingBoxes = showBoundingBoxes || false;\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    RenderingParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    RenderingParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    RenderingParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    RenderingParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    RenderingParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    RenderingParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    RenderingParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    RenderingParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    RenderingParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    RenderingParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get the pressure renderer parameter\n     *\n     * @method getPressureType\n     * @returns {String} The pressure type\n     */\n    RenderingParameters.prototype.getPressureType = function () {\n        return this.pressureType;\n    };\n\n    /**\n     * Set the pressure renderer parameter\n     *\n     * @method setPressureType\n     * @param {String} pressureType\n     */\n    RenderingParameters.prototype.setPressureType = function (pressureType) {\n        this.pressureType = pressureType;\n    };\n\n    /**\n     * Get the alpha renderer parameter\n     *\n     * @method getAlpha\n     * @returns {String} The alpha\n     */\n    RenderingParameters.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * Set the alpha renderer parameter\n     *\n     * @method setAlpha\n     * @param {String} alpha\n     */\n    RenderingParameters.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    /**\n     * Get fade out ink fore HTML5 canvas\n     *\n     * @method getDoFadeOutLoop\n     * @returns {Boolean}\n     */\n    RenderingParameters.prototype.getDoFadeOutLoop = function () {\n        return this.doFadeOutLoop;\n    };\n\n    /**\n     * Set fade out ink fore HTML5 canvas\n     *\n     * @method setDoFadeOutLoop\n     * @param {Boolean} doFadeOutLoop\n     */\n    RenderingParameters.prototype.setDoFadeOutLoop = function (doFadeOutLoop) {\n        this.doFadeOutLoop = doFadeOutLoop;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    RenderingParameters.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    RenderingParameters.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    // Export\n    scope.RenderingParameters = RenderingParameters;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @constructor\n     */\n    function AbstractRenderer () {\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Draw ink strokes on HTML5 canvas.\n     *\n     * @method drawStrokesByRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {Object} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawStrokesByRecognitionResult = function (strokes, recognitionResult, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawComponents = function (components, parameters, context) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.Stroke) {\n                this.drawStroke(component, parameters, context);\n            }\n        }\n    };\n\n    /**\n     * Record the beginning of drawing\n     *\n     * @method drawStart\n     * @param {Object} event\n     * @param {Number} x\n     * @param {Number} y\n     */\n    AbstractRenderer.prototype.drawStart = function (event, x, y) {\n        this.points.length = 0;\n        this.drawing = true;\n        this.points.push({\n            x: x,\n            y: y,\n            pressure: 0.5,\n            distance: 0.0,\n            length: 0.0,\n            ux: 0.0,\n            uy: 0.0,\n            x1: 0.0,\n            x2: 0.0,\n            y1: 0.0,\n            y2: 0.0\n        });\n        event.preventDefault();\n    };\n\n    /**\n     * Record the drawing\n     *\n     * @method drawContinue\n     * @param {Object} event\n     * @param {Number} x\n     * @param {Number} y\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawContinue = function (event, x, y, parameters, context) {\n        if (this.drawing) {\n            var point = {\n                x: x,\n                y: y,\n                pressure: 0.5,\n                distance: 0.0,\n                length: 0.0,\n                ux: 0.0,\n                uy: 0.0,\n                x1: 0.0,\n                x2: 0.0,\n                y1: 0.0,\n                y2: 0.0\n            };\n            this.points.push(point);\n\n            if (this.points.length > 1) {\n                var previous = this.points[this.points.length - 2];\n\n                if (this.points.length === 2) {\n                    this.drawQuadratricStart(previous, point, parameters, context);\n                } else {\n                    var third = this.points[this.points.length - 3];\n                    this.drawQuadratricContinue(third, previous, point, parameters, context);\n                }\n\n            }\n        }\n    };\n\n    /**\n     * Stop record of drawing\n     *\n     * @method drawEnd\n     * @param {Object} event\n     * @param {Number} x\n     * @param {Number} y\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawEnd = function (event, x, y, parameters, context) {\n        if (this.drawing) {\n            if (this.points.length === 1) {\n                this.drawPoint({\n                    x: x,\n                    y: y,\n                    pressure: 0.5,\n                    distance: 0.0,\n                    length: 0.0,\n                    ux: 0.0,\n                    uy: 0.0,\n                    x1: 0.0,\n                    x2: 0.0,\n                    y1: 0.0,\n                    y2: 0.0\n                }, parameters, context);\n            } else if (this.points.length > 1) {\n                var lastPoint = this.points[this.points.length - 1];\n                var point = this.points[this.points.length - 2];\n                this.drawQuadratricEnd(point, lastPoint, parameters, context);\n            }\n            this.drawing = false;\n            event.preventDefault();\n        }\n    };\n\n    /**\n     * Clear the context's canvas content to erase drawing strokes\n     *\n     * @method clear\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.clear = function (context) {\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n    };\n\n    /**\n     * Draw guidelines on the HTML5 canvas\n     *\n     * @method drawGuidelines\n     * @param {Number} horizontalSpacing\n     * @param {Number} verticalSpacing\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawGuidelines = function (horizontalSpacing, verticalSpacing, parameters, context) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.clearRect(0, 0, context.canvas.clientWidth, context.canvas.clientHeight);\n\n            if (verticalSpacing) {\n                for (var y = verticalSpacing; y < context.canvas.clientHeight - verticalSpacing; y += verticalSpacing) {\n                    context.beginPath();\n                    context.moveTo(horizontalSpacing, y);\n                    context.lineTo(context.canvas.clientWidth - horizontalSpacing, y);\n                    context.stroke();\n                }\n            }\n            if (horizontalSpacing) {\n                for (var x = horizontalSpacing; x < context.canvas.clientWidth - horizontalSpacing; x += horizontalSpacing) {\n                    context.beginPath();\n                    context.moveTo(x, verticalSpacing);\n                    context.lineTo(x, context.canvas.clientHeight - verticalSpacing);\n                    context.stroke();\n                }\n            }\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Trace line on context\n     *\n     * @method drawLineByCoordinates\n     * @param {Number} lX\n     * @param {Number} lY\n     * @param {Number} cX\n     * @param {Number} cY\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawLineByCoordinates = function (lX, lY, cX, cY, parameters, context) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            // line from\n            context.moveTo(lX, lY);\n            // to\n            context.lineTo(cX, cY);\n            // draw it\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @method drawLineByPoints\n     * @param {QuadraticPoint} firstPoint\n     * @param {QuadraticPoint} lastPoint\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawLineByPoints = function (firstPoint, lastPoint, parameters, context) {\n        this.drawLineByCoordinates(firstPoint.x, firstPoint.y, lastPoint.x, lastPoint.y, parameters, context);\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {MyScript.Rectangle} rectangle\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle, parameters, context) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getRectColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw strokes on context\n     *\n     * @method drawStrokes\n     * @param {Stroke[]} strokes\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes, parameters, context) {\n        for (var i in strokes) {\n            this.drawStroke(strokes[i], parameters, context);\n        }\n    };\n\n    /**\n     * Draw a stroke on context\n     *\n     * @method drawStroke\n     * @param {Object} stroke\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke, parameters, context) {\n        var strokePoints = [];\n        for (var j = 0; j < stroke.getLength(); j++) {\n            strokePoints.push(new scope.QuadraticPoint({\n                x: stroke.getX()[j],\n                y: stroke.getY()[j]\n            }));\n        }\n        if (stroke.getLength() === 1) {\n            this.drawPoint(strokePoints[0], parameters, context);\n            return;\n        }\n\n        for (var k = 0; k < stroke.getLength(); k++) {\n            if (k === 0) {\n                var p1 = strokePoints[0];\n                var p2 = strokePoints[1];\n                this.drawQuadratricStart(p1, p2, parameters, context);\n            } else if (k < stroke.getLength() - 1) {\n                var p3 = strokePoints[k - 1];\n                var p4 = strokePoints[k];\n                var p5 = strokePoints[k + 1];\n                this.drawQuadratricContinue(p3, p4, p5, parameters, context);\n            } else if (k > 1) {\n                var p6 = strokePoints[k - 1];\n                var p7 = strokePoints[k];\n                this.drawQuadratricEnd(p6, p7, parameters, context);\n            }\n        }\n    };\n    /**\n     * Draw point on context\n     *\n     * @method drawPoint\n     * @param {QuadraticPoint} point\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawPoint = function (point, parameters, context) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.arc(point.x, point.y, 0.5 * parameters.getWidth(), 0, 2 * Math.PI);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @method drawArrowHead\n     * @param {QuadraticPoint} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawArrowHead = function (headPoint, angle, length, parameters, context) {\n\n        var alpha = phi(angle + Math.PI - (Math.PI / 8)),\n            beta = phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.x, headPoint.y);\n            context.beginPath();\n            context.lineTo(headPoint.x + (length * Math.cos(alpha)), headPoint.y + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.x + (length * Math.cos(beta)), headPoint.y + (length * Math.sin(beta)));\n            context.lineTo(headPoint.x, headPoint.y);\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Get Strokes from inkRange\n     *\n     * @method extractStroke\n     * @param {Stroke[]} strokes\n     * @param {Object} inkRange\n     * @result {Stroke[]} List of strokes from inkRange\n     */\n    AbstractRenderer.prototype.extractStroke = function (strokes, inkRange) {\n        var result = [],\n            firstPointIndex = Math.floor(inkRange.getFirstPoint()),\n            lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n        for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n            var currentStroke = strokes[strokeIndex];\n            var currentStrokePointCount = currentStroke.x.length;\n\n            var newStroke = new scope.Stroke(), x = [], y = [];\n\n            for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                x.push(currentStroke.x[pointIndex]);\n                y.push(currentStroke.y[pointIndex]);\n            }\n\n            newStroke.setX(x);\n            newStroke.setY(y);\n            result.push(newStroke);\n        }\n        return result;\n    };\n\n    /**\n     * Draw a quadratic stroke on context\n     *\n     * @private\n     * @method drawQuadratricStart\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawQuadratricStart = function (p1, p2, parameters, context) {\n\n        computePoint(null, p1, parameters, true, false);\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            strokeFirstSegment(p1, p2, context);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Continue to draw a quadratic stroke on context\n     *\n     * @private\n     * @method drawQuadratricContinue\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {QuadraticPoint} p3\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawQuadratricContinue = function (p1, p2, p3, parameters, context) {\n\n        computePoint(p2, p3, parameters, false, false);\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            strokeSegment(p1, p2, p3, context);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Stop to draw a quadratic stroke\n     *\n     * @private\n     * @method drawQuadratricEnd\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawQuadratricEnd = function (p1, p2, parameters, context) {\n\n        computePoint(p1, p2, parameters, false, true);\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            strokeLastSegment(p1, p2, context);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Render the first stroke segment.\n     *\n     * @private\n     * @method strokeFirstSegment\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {Object} context\n     */\n    var strokeFirstSegment = function (p1, p2, context) {\n        // compute start points\n        var x11 = p1.x1,\n            y11 = p1.y1,\n            x12 = p1.x2,\n            y12 = p1.y2,\n        // compute end points\n            x21 = 0.5 * p1.x1 + p2.x1,\n            y21 = 0.5 * p1.y1 + p2.y1,\n            x22 = 0.5 * p1.x2 + p2.x2,\n            y22 = 0.5 * p1.y2 + p2.y2;\n\n        // stroke segment\n        context.moveTo(x11, y11);\n        context.lineTo(x21, y21);\n        context.lineTo(x22, y22);\n        context.lineTo(x12, y12);\n        context.lineTo(x11, y11);\n    };\n\n    /**\n     * Render a stroke segment\n     *\n     * @private\n     * @method strokeSegment\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {QuadraticPoint} p3\n     * @param {Object} context\n     */\n    var strokeSegment = function (p1, p2, p3, context) {\n        // compute start points\n        var x11 = 0.5 * (p1.x1 + p2.x1),\n            y11 = 0.5 * (p1.y1 + p2.y1),\n            x12 = 0.5 * (p1.x2 + p2.x2),\n            y12 = 0.5 * (p1.y2 + p2.y2),\n        // compute end points\n            x21 = 0.5 * (p2.x1 + p3.x1),\n            y21 = 0.5 * (p2.y1 + p3.y1),\n            x22 = 0.5 * (p2.x2 + p3.x2),\n            y22 = 0.5 * (p2.y2 + p3.y2);\n        // stroke segment\n        context.moveTo(x11, y11);\n        context.quadraticCurveTo(p2.x1, p2.y1, x21, y21);\n        context.lineTo(x22, y22);\n        context.quadraticCurveTo(p2.x2, p2.y2, x12, y12);\n        context.lineTo(x11, y11);\n    };\n\n    /**\n     * Render the last stroke segment\n     *\n     * @private\n     * @method strokeLastSegment\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {Object} context\n     */\n    var strokeLastSegment = function (p1, p2, context) {\n        // compute start points\n        var x11 = 0.5 * (p1.x1 + p2.x1),\n            y11 = 0.5 * (p1.y1 + p2.y1),\n            x12 = 0.5 * (p1.x2 + p2.x2),\n            y12 = 0.5 * (p1.y2 + p2.y2),\n        // compute end points\n            x21 = p2.x1,\n            y21 = p2.y1,\n            x22 = p2.x2,\n            y22 = p2.y2;\n        // stroke segment\n        context.moveTo(x11, y11);\n        context.lineTo(x21, y21);\n        context.lineTo(x22, y22);\n        context.lineTo(x12, y12);\n        context.lineTo(x11, y11);\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Compute all necessary point parameters to draw quadratics\n     *\n     * @private\n     * @method computePoint\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     * @param {RenderingParameters} parameters\n     * @param {Boolean} isFirst\n     * @param {Boolean} isLast\n     */\n    var computePoint = function (previous, point, parameters, isFirst, isLast) {\n\n        // compute distance from previous point\n        if (previous !== null) {\n            computeDistance(previous, point);\n            var strokeLength = previous.length + point.distance;\n            point.length = strokeLength;\n        }\n        // compute pressure\n        switch (parameters.pressureType) {\n            case 'SIMULATED':\n                computePressure(point, point.distance, point.length);\n                break;\n            case 'CONSTANT':\n                point.pressure = 1.0;\n                break;\n            case 'REAL':\n                // keep the current pressure\n                break;\n        }\n        computeLastControls(point, parameters);\n        // compute control points\n        if (previous !== null && !isLast) {\n            if (isFirst) {\n                computeFirstControls(previous, point, parameters);\n            }\n            if (isLast) {\n                computeLastControls(point, parameters);\n            } else {\n                computeControls(previous, point, parameters);\n            }\n        }\n    };\n\n    /**\n     * Compute distance and unit vector from the previous point.\n     *\n     * @private\n     * @method computeDistance\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     */\n    var computeDistance = function (previous, point) {\n        var dx = point.x - previous.x,\n            dy = point.y - previous.y,\n            d = Math.sqrt(dx * dx + dy * dy);\n\n        if (d !== 0) {\n            point.distance = d;\n            point.ux = dx / d;\n            point.uy = dy / d;\n        }\n    };\n\n    /**\n     * Compute simulated pressure of given point.\n     *\n     * @private\n     * @method computePressure\n     * @param {QuadraticPoint} point\n     * @param {Number} distance\n     * @param {Number} length\n     */\n    var computePressure = function (point, distance, length) {\n        var k, pressure;\n        if (distance < 10) {\n            k = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            k = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        } else {\n            k = 1.0;\n        }\n\n        pressure = k * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(point.distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        point.pressure = pressure;\n    };\n\n    /**\n     * Compute control points of the first point.\n     *\n     * @private\n     * @method computeFirstControls\n     * @param {QuadraticPoint} first First point of the list to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {RenderingParameters} parameters Pressure and pen width\n     */\n    var computeFirstControls = function (first, next, parameters) {\n        var r = 0.5 * parameters.getWidth() * first.pressure,\n            nx = -r * next.uy,\n            ny = r * next.ux;\n\n        first.x1 = first.x + nx;\n        first.y1 = first.y + ny;\n        first.x2 = first.x - nx;\n        first.y1 = first.y - ny;\n    };\n\n    /**\n     * Compute control points between two points.\n     *\n     * @private\n     * @method computeControls\n     * @param {QuadraticPoint} point Point to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {RenderingParameters} parameters Pressure and pen width\n     */\n    var computeControls = function (point, next, parameters) {\n        var ux = point.ux + next.ux,\n            uy = point.uy + next.uy,\n            u = Math.sqrt(ux * ux + uy * uy);\n\n        if (u !== 0) {\n            // compute control points\n            var r = 0.5 * parameters.getWidth() * point.pressure;\n            var nx = -r * uy / u;\n            var ny = r * ux / u;\n            point.x1 = point.x + nx;\n            point.y1 = point.y + ny;\n            point.x2 = point.x - nx;\n            point.y2 = point.y - ny;\n        } else {\n            // collapse control points\n            point.x1 = point.x;\n            point.y1 = point.y;\n            point.x2 = point.x;\n            point.y2 = point.y;\n        }\n    };\n\n    /**\n     * Compute control points of the last point.\n     *\n     * @private\n     * @method computeLastControls\n     * @param {QuadraticPoint} last Last point to be computed\n     * @param {RenderingParameters} parameters Pressure and pen width\n     */\n    var computeLastControls = function (last, parameters) {\n        var r = 0.5 * parameters.getWidth() * last.pressure,\n            nx = -r * last.uy,\n            ny = r * last.ux;\n\n        last.x1 = last.x + nx;\n        last.y1 = last.y + ny;\n        last.x2 = last.x - nx;\n        last.y2 = last.y - ny;\n    };\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @constructor\n     */\n    function TextRenderer () {\n        this.cloneStrokes = [];\n        this.strokesToRemove = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text strokes on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawStrokesByRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {TextDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    TextRenderer.prototype.drawStrokesByRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        this.drawStrokes(strokes, parameters, context);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits, parameters, context) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents(), parameters, context);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractTextInputComponent[]} components\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    TextRenderer.prototype.drawComponents = function (components, parameters, context) {\n        scope.AbstractRenderer.prototype.drawComponents.call(this, components, parameters, context); // super\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.CharInputComponent) {\n                drawChar(component, parameters, context);\n            } else if (component instanceof scope.CharacterInputComponent) {\n                drawCharacter(component, parameters, context);\n            } else if (component instanceof scope.StringInputComponent) {\n                drawString(component, parameters, context);\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method drawChar\n     * @param {CharInputComponent} char\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawChar = function (char, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw character\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawCharacter = function (character, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method drawString\n     * @param {StringInputComponent} string\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawString = function (string, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @constructor\n     */\n    function ShapeRenderer () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape strokes on HTML5 canvas\n     *\n     * @method drawStrokesByRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {ShapeDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawStrokesByRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        this.drawShapes(strokes, recognitionResult.getSegments(), parameters, context);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {Object[]} components\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawComponents = function (components, parameters, context) {\n        scope.AbstractRenderer.prototype.drawComponents.call(this, components, parameters, context); // super\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.ShapeEllipse) {\n                this.drawShapeEllipse(component, parameters, context);\n            } else if (component instanceof scope.ShapeLine) {\n                this.drawShapeLine(component, parameters, context);\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {Stroke[]} strokes\n     * @param {ShapeSegment[]} shapes\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapes = function (strokes, shapes, parameters, context) {\n\n        for (var i in shapes) {\n            var segment = shapes[i];\n            var candidate = segment.getSelectedCandidate();\n\n            if (candidate) {\n                if (candidate instanceof scope.ShapeRecognized) {\n                    this.drawShapeRecognized(candidate, parameters, context);\n                } else if (candidate instanceof scope.ShapeNotRecognized) {\n                    this.drawShapeNotRecognized(strokes, segment.getInkRanges(), candidate, parameters, context);\n                } else {\n                    throw new Error('not implemented');\n                }\n            }\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapeRecognized = function (shapeRecognized, parameters, context) {\n\n        var primitives = shapeRecognized.getPrimitives();\n\n        for (var i in primitives) {\n            this.drawShapePrimitive(primitives[i], parameters, context);\n        }\n        if (parameters.getShowBoundingBoxes()) {\n            var rectangleList = [];\n\n            for (var j in primitives) {\n                // Primitive bounding rect\n                rectangleList.push(this.getPrimitiveBoundingBox(primitives[j]));\n            }\n            // Bounding rect of the entire shape\n            var boundingRect = scope.MathUtils.getBoundingRect(rectangleList);\n            this.drawRectangle(boundingRect, parameters, context);\n        }\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {ShapeInkRange[]} inkRanges\n     * @param {ShapeNotRecognized} shapeNotRecognized\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (strokes, inkRanges, shapeNotRecognized, parameters, context) {\n        for (var i in inkRanges) {\n            var extractedStrokes = this.extractStroke(strokes, inkRanges[i]);\n            this.drawStrokes(extractedStrokes, parameters, context);\n        }\n\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive, parameters, context) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            this.drawShapeEllipse(primitive, parameters, context);\n        } else if (primitive instanceof scope.ShapeLine) {\n            this.drawShapeLine(primitive, parameters, context);\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapeLine = function (shapeLine, parameters, context) {\n\n        this.drawLineByPoints(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), parameters, context);\n\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, parameters, context);\n        }\n\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, parameters, context);\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @method drawEllipseArc\n     * @param {ShapePoint} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     * @returns {Point[]}\n     */\n    ShapeRenderer.prototype.drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, parameters, context) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push({x: x, y: y});\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapeEllipse = function (shapeEllipse, parameters, context) {\n\n        var points = this.drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            parameters, context);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, parameters, context);\n        }\n\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, parameters, context);\n        }\n    };\n\n    /**\n     * Get the bounding box of primitive\n     *\n     * @method getPrimitiveBoundingBox\n     * @param {AbstractShapePrimitive} primitive\n     * @returns {Object} the bounding box\n     */\n    ShapeRenderer.prototype.getPrimitiveBoundingBox = function (primitive) {\n        var rectangle = null;\n        if (primitive instanceof scope.ShapeEllipse) {\n            rectangle = scope.MathUtils.getEllipseArcRect(primitive.getCenter(), primitive.getMaxRadius(), primitive.getMinRadius(), primitive.getOrientation(), primitive.getStartAngle(), primitive.getSweepAngle());\n        } else if (primitive instanceof scope.ShapeLine) {\n            rectangle = scope.MathUtils.getLineRect(primitive.getFirstPoint(), primitive.getLastPoint());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @constructor\n     */\n    function MathRenderer() {\n        this.cloneStrokes = [];\n        this.strokesToRemove = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math strokes on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawStrokesByRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {MathDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    MathRenderer.prototype.drawStrokesByRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        var notScratchOutStrokes = this.removeScratchOutStrokes(strokes, recognitionResult.getScratchOutResults());\n\n        for (var i in notScratchOutStrokes) {\n            var stroke = notScratchOutStrokes[i];\n            this.drawStroke(stroke, parameters, context);\n        }\n    };\n\n    /**\n     * Remove scratch out from input strokes\n     *\n     * @param {Stroke[]} strokes\n     * @param {MathScratchOut[]} mathScratchOutResults\n     * @returns {Stroke[]} notScratchOutStrokes\n     */\n    MathRenderer.prototype.removeScratchOutStrokes = function (strokes, mathScratchOutResults) {\n        if (!mathScratchOutResults || mathScratchOutResults.length === 0) {\n            return strokes;\n        }\n\n        var cloneStrokes = strokes.slice(0);\n        var strokesToRemove = [];\n\n        for (var k in mathScratchOutResults) {\n            if (mathScratchOutResults[k].getErasedInkRanges()) {\n                for (var n in mathScratchOutResults[k].getErasedInkRanges()) {\n                    strokesToRemove.push(mathScratchOutResults[k].getErasedInkRanges()[n].getComponent());\n                }\n                for (var p in mathScratchOutResults[k].getInkRanges()) {\n                    strokesToRemove.push(mathScratchOutResults[k].getInkRanges()[p].getComponent());\n                }\n            }\n        }\n\n        strokesToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in strokesToRemove) {\n            cloneStrokes.splice(strokesToRemove[z], 1);\n        }\n        return cloneStrokes;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @constructor\n     */\n    function MusicRenderer () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music strokes on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawStrokesByRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {MusicDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    MusicRenderer.prototype.drawStrokesByRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        var notScratchOutStrokes = this.removeScratchOutStrokes(strokes, recognitionResult.getScratchOutResults());\n        this.drawStrokes(notScratchOutStrokes, parameters, context);\n    };\n\n    /**\n     * Remove scratch out from input strokes\n     *\n     * @param {Stroke[]} strokes\n     * @param {MusicScratchOut[]} scratchOutResults\n     * @returns {Stroke[]} notScratchOutStrokes\n     */\n    MusicRenderer.prototype.removeScratchOutStrokes = function (strokes, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return strokes;\n        }\n\n        var cloneStrokes = strokes.slice(0);\n        var strokesToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var l in scratchOutResults[k].getErasedInputRanges()) {\n                    strokesToRemove.push(scratchOutResults[k].getErasedInputRanges()[l].getComponent());\n                }\n                for (var m in scratchOutResults[k].getInputRanges()) {\n                    strokesToRemove.push(scratchOutResults[k].getInputRanges()[m].getComponent());\n                }\n            }\n        }\n\n        strokesToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in strokesToRemove) {\n            cloneStrokes.splice(strokesToRemove[z], 1);\n        }\n        return cloneStrokes;\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method staffDrawing\n     * @param {MusicStaff} staff\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    MusicRenderer.prototype.drawStaff = function (staff, parameters, context) {\n\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    MusicRenderer.prototype.drawComponents = function (components, parameters, context) {\n        scope.AbstractRenderer.prototype.drawComponents.call(this, components, parameters, context); // super\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.MusicAccidentalInputComponent) {\n                drawAccidental(component, parameters, context);\n            } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n                drawArpeggiate(component, parameters, context);\n            } else if (component instanceof scope.MusicBarInputComponent) {\n                drawBar(component, parameters, context);\n            } else if (component instanceof scope.MusicBeamInputComponent) {\n                drawBeam(component, parameters, context);\n            } else if (component instanceof scope.MusicClefInputComponent) {\n                drawClef(component, parameters, context);\n            } else if (component instanceof scope.MusicDecorationInputComponent) {\n                drawDecoration(component, parameters, context);\n            } else if (component instanceof scope.MusicDotsInputComponent) {\n                drawDots(component, parameters, context);\n            } else if (component instanceof scope.MusicHeadInputComponent) {\n                drawHead(component, parameters, context);\n            } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n                drawLedgerLine(component, parameters, context);\n            } else if (component instanceof scope.MusicRestInputComponent) {\n                drawRest(component, parameters, context);\n            } else if (component instanceof scope.MusicStemInputComponent) {\n                drawStem(component, parameters, context);\n            } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n                drawTieOrSlur(component, parameters, context);\n            } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n                drawTimeSignature(component, parameters, context);\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawAccidental = function (accidental, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawArpeggiate = function (arpeggiate, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawBar = function (bar, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawBeam = function (beam, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawClef = function (clef, parameters, context) {\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = 'data:image/svg+xml,' + getClefSvg(clef.getValue());\n    };\n\n    /**\n     * Get a svg representation of a music clef.\n     *\n     * @static\n     * @method getClefSvg\n     * @param {MusicClefInput|MusicClef} clef\n     * @returns {String}\n     */\n    var getClefSvg = function (clef) {\n        switch (clef.getSymbol()) {\n            case 'F':\n                return '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n            case 'C':\n                return '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n            case 'G':\n                return '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n            default:\n                return '';\n        }\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawDecoration = function (decoration, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawDots = function (dots, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawHead = function (head, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawLedgerLine = function (ledgerLine, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawRest = function (rest, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawStem = function (stem, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawTieOrSlur = function (tieOrSlur, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawTimeSignature = function (timeSignature, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @constructor\n     */\n    function AnalyzerRenderer () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Draw shape strokes on HTML5 canvas\n     *\n     * @method drawStrokesByRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawStrokesByRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        this.drawShapes(strokes, recognitionResult.getShapes(), parameters, context);\n        this.drawTables(strokes, recognitionResult.getTables(), parameters, context);\n        this.drawTextLines(strokes, recognitionResult.getTextLines(), parameters, context);\n//        this.drawGroups(strokes, recognitionResult.getGroups(), parameters, context); // TODO: not implemented\n    };\n\n    /**\n     * Draw table\n     *\n     * @method drawTables\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerTable[]} tables\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawTables = function (strokes, tables, parameters, context) {\n        for (var i in tables) {\n            if (parameters.getShowBoundingBoxes()) {\n                for (var j in tables[i].getCells()) {\n                    this.drawCell(tables[i].getCells()[j], parameters, context);\n                }\n            }\n            for (var k in tables[i].getLines()) {\n                this.drawLine(tables[i].getLines()[k], parameters, context);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @method drawTextLines\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawTextLines = function (strokes, textLines, parameters, context) {\n\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n\n                if (parameters.getShowBoundingBoxes()) {\n                    this.drawRectangle(data.getBoundingBox(), parameters, context);\n                }\n\n                var text = textLine.getTextDocument().getTextSegmentResult().getSelectedCandidate().getLabel();\n                this.drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), parameters, context);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    this.drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, parameters, context);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @method drawText\n     * @param {MyScript.Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawText = function (boundingBox, text, justificationType, textHeight, baseline, parameters, context) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.textAlign = (justificationType === 'CENTER')? 'center': 'left';\n            context.font = parameters.getDecoration() + textHeight + 'px ' + parameters.getFont();\n\n            context.fillText(text, boundingBox.getX(), baseline, boundingBox.getWidth());\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Underline\n     *\n     * @method drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawUnderline = function (boundingBox, underline, text, textHeight, baseline, parameters, context) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + textHeight + 'px ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        this.drawLine(new scope.AnalyzerLine({data: new scope.AnalyzerLineData({p1 :{x: x1,y: baseline},p2:{x: x2,y: baseline}})}), parameters, context);\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @method drawGroups\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerGroup[]} groups\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawGroups = function (strokes, groups, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw a line\n     *\n     * @method drawLine\n     * @param {AnalyzerLine} line\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawLine = function (line, parameters, context) {\n        if (line.getData()) {\n            this.drawLineByPoints(line.getData().getP1(), line.getData().getP2(), parameters, context);\n        }\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @method drawCell\n     * @param {AnalyzerCell} cell\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawCell = function (cell, parameters, context) {\n        if (cell.getData()) {\n            this.drawRectangle(cell.getData().getBoundingBox(), parameters, context);\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {Stroke[]} strokes\n     * @param {ShapeSegment[]} shapes\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapes = function (strokes, shapes, parameters, context) {\n\n        for (var i in shapes) {\n            var segment = shapes[i];\n            var candidate = segment.getSelectedCandidate();\n\n            if (candidate) {\n                if (candidate instanceof scope.ShapeRecognized) {\n                    this.drawShapeRecognized(candidate, parameters, context);\n                } else if (candidate instanceof scope.ShapeNotRecognized) {\n                    this.drawShapeNotRecognized(strokes, segment.getInkRanges(), candidate, parameters, context);\n                } else {\n                    throw new Error('not implemented');\n                }\n            }\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapeRecognized = function (shapeRecognized, parameters, context) {\n\n        var primitives = shapeRecognized.getPrimitives();\n\n        for (var i in primitives) {\n            this.drawShapePrimitive(primitives[i], parameters, context);\n        }\n        if (parameters.getShowBoundingBoxes()) {\n            var rectangleList = [];\n\n            for (var j in primitives) {\n                // Primitive bounding rect\n                rectangleList.push(this.getPrimitiveBoundingBox(primitives[j]));\n            }\n            // Bounding rect of the entire shape\n            var boundingRect = scope.MathUtils.getBoundingRect(rectangleList);\n            this.drawRectangle(boundingRect, parameters, context);\n        }\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerInkRange[]} inkRanges\n     * @param {ShapeNotRecognized} shapeNotRecognized\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapeNotRecognized = function (strokes, inkRanges, shapeNotRecognized, parameters, context) {\n        for (var i in inkRanges) {\n            var extractedStrokes = this.extractStroke(strokes, inkRanges[i]);\n            this.drawStrokes(extractedStrokes, parameters, context);\n        }\n\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapePrimitive = function (primitive, parameters, context) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            this.drawShapeEllipse(primitive, parameters, context);\n        } else if (primitive instanceof scope.ShapeLine) {\n            this.drawShapeLine(primitive, parameters, context);\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapeLine = function (shapeLine, parameters, context) {\n\n        this.drawLineByPoints(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), parameters, context);\n\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, parameters, context);\n        }\n\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, parameters, context);\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @method drawEllipseArc\n     * @param {ShapePoint} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     * @returns {Point[]}\n     */\n    AnalyzerRenderer.prototype.drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, parameters, context) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push({x: x, y: y});\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapeEllipse = function (shapeEllipse, parameters, context) {\n\n        var points = this.drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            parameters, context);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, parameters, context);\n        }\n\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, parameters, context);\n        }\n    };\n\n    /**\n     * Get the bounding box of primitive\n     *\n     * @method getPrimitiveBoundingBox\n     * @param {AbstractShapePrimitive} primitive\n     * @returns {MyScript.Rectangle} rectangle\n     */\n    AnalyzerRenderer.prototype.getPrimitiveBoundingBox = function (primitive) {\n        var rectangle = null;\n        if (primitive instanceof scope.ShapeEllipse) {\n            rectangle = scope.MathUtils.getEllipseArcRect(primitive.getCenter(), primitive.getMaxRadius(), primitive.getMinRadius(), primitive.getOrientation(), primitive.getStartAngle(), primitive.getSweepAngle());\n        } else if (primitive instanceof scope.ShapeLine) {\n            rectangle = scope.MathUtils.getLineRect(primitive.getFirstPoint(), primitive.getLastPoint());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nvar CryptoJS = CryptoJS || (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var X32WordArray = C_lib.WordArray;\n\n    /**\n     * x64 namespace.\n     */\n    var C_x64 = C.x64 = {};\n\n    /**\n     * A 64-bit word.\n     */\n    var X64Word = C_x64.Word = Base.extend({\n        /**\n         * Initializes a newly created 64-bit word.\n         *\n         * @param {number} high The high 32 bits.\n         * @param {number} low The low 32 bits.\n         *\n         * @example\n         *\n         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n         */\n        init: function (high, low) {\n            this.high = high;\n            this.low = low;\n        }\n\n        /**\n         * Bitwise NOTs this word.\n         *\n         * @return {X64Word} A new x64-Word object after negating.\n         *\n         * @example\n         *\n         *     var negated = x64Word.not();\n         */\n        // not: function () {\n            // var high = ~this.high;\n            // var low = ~this.low;\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise ANDs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to AND with this word.\n         *\n         * @return {X64Word} A new x64-Word object after ANDing.\n         *\n         * @example\n         *\n         *     var anded = x64Word.and(anotherX64Word);\n         */\n        // and: function (word) {\n            // var high = this.high & word.high;\n            // var low = this.low & word.low;\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise ORs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to OR with this word.\n         *\n         * @return {X64Word} A new x64-Word object after ORing.\n         *\n         * @example\n         *\n         *     var ored = x64Word.or(anotherX64Word);\n         */\n        // or: function (word) {\n            // var high = this.high | word.high;\n            // var low = this.low | word.low;\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise XORs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to XOR with this word.\n         *\n         * @return {X64Word} A new x64-Word object after XORing.\n         *\n         * @example\n         *\n         *     var xored = x64Word.xor(anotherX64Word);\n         */\n        // xor: function (word) {\n            // var high = this.high ^ word.high;\n            // var low = this.low ^ word.low;\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Shifts this word n bits to the left.\n         *\n         * @param {number} n The number of bits to shift.\n         *\n         * @return {X64Word} A new x64-Word object after shifting.\n         *\n         * @example\n         *\n         *     var shifted = x64Word.shiftL(25);\n         */\n        // shiftL: function (n) {\n            // if (n < 32) {\n                // var high = (this.high << n) | (this.low >>> (32 - n));\n                // var low = this.low << n;\n            // } else {\n                // var high = this.low << (n - 32);\n                // var low = 0;\n            // }\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Shifts this word n bits to the right.\n         *\n         * @param {number} n The number of bits to shift.\n         *\n         * @return {X64Word} A new x64-Word object after shifting.\n         *\n         * @example\n         *\n         *     var shifted = x64Word.shiftR(7);\n         */\n        // shiftR: function (n) {\n            // if (n < 32) {\n                // var low = (this.low >>> n) | (this.high << (32 - n));\n                // var high = this.high >>> n;\n            // } else {\n                // var low = this.high >>> (n - 32);\n                // var high = 0;\n            // }\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Rotates this word n bits to the left.\n         *\n         * @param {number} n The number of bits to rotate.\n         *\n         * @return {X64Word} A new x64-Word object after rotating.\n         *\n         * @example\n         *\n         *     var rotated = x64Word.rotL(25);\n         */\n        // rotL: function (n) {\n            // return this.shiftL(n).or(this.shiftR(64 - n));\n        // },\n\n        /**\n         * Rotates this word n bits to the right.\n         *\n         * @param {number} n The number of bits to rotate.\n         *\n         * @return {X64Word} A new x64-Word object after rotating.\n         *\n         * @example\n         *\n         *     var rotated = x64Word.rotR(7);\n         */\n        // rotR: function (n) {\n            // return this.shiftR(n).or(this.shiftL(64 - n));\n        // },\n\n        /**\n         * Adds this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to add with this word.\n         *\n         * @return {X64Word} A new x64-Word object after adding.\n         *\n         * @example\n         *\n         *     var added = x64Word.add(anotherX64Word);\n         */\n        // add: function (word) {\n            // var low = (this.low + word.low) | 0;\n            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n            // var high = (this.high + word.high + carry) | 0;\n\n            // return X64Word.create(high, low);\n        // }\n    });\n\n    /**\n     * An array of 64-bit words.\n     *\n     * @property {Array} words The array of CryptoJS.x64.Word objects.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var X64WordArray = C_x64.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create();\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create([\n         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n         *     ]);\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create([\n         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n         *     ], 10);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 8;\n            }\n        },\n\n        /**\n         * Converts this 64-bit word array to a 32-bit word array.\n         *\n         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n         *\n         * @example\n         *\n         *     var x32WordArray = x64WordArray.toX32();\n         */\n        toX32: function () {\n            // Shortcuts\n            var x64Words = this.words;\n            var x64WordsLength = x64Words.length;\n\n            // Convert\n            var x32Words = [];\n            for (var i = 0; i < x64WordsLength; i++) {\n                var x64Word = x64Words[i];\n                x32Words.push(x64Word.high);\n                x32Words.push(x64Word.low);\n            }\n\n            return X32WordArray.create(x32Words, this.sigBytes);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {X64WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = x64WordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n\n            // Clone \"words\" array\n            var words = clone.words = this.words.slice(0);\n\n            // Clone each X64Word object\n            var wordsLength = words.length;\n            for (var i = 0; i < wordsLength; i++) {\n                words[i] = words[i].clone();\n            }\n\n            return clone;\n        }\n    });\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n\n    function X64Word_create() {\n        return X64Word.create.apply(X64Word, arguments);\n    }\n\n    // Constants\n    var K = [\n        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n    ];\n\n    // Reusable objects\n    var W = [];\n    (function () {\n        for (var i = 0; i < 80; i++) {\n            W[i] = X64Word_create();\n        }\n    }());\n\n    /**\n     * SHA-512 hash algorithm.\n     */\n    var SHA512 = C_algo.SHA512 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new X64WordArray.init([\n                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n            ]);\n        },\n\n        _doProcessBlock: function (M, offset) {\n            // Shortcuts\n            var H = this._hash.words;\n\n            var H0 = H[0];\n            var H1 = H[1];\n            var H2 = H[2];\n            var H3 = H[3];\n            var H4 = H[4];\n            var H5 = H[5];\n            var H6 = H[6];\n            var H7 = H[7];\n\n            var H0h = H0.high;\n            var H0l = H0.low;\n            var H1h = H1.high;\n            var H1l = H1.low;\n            var H2h = H2.high;\n            var H2l = H2.low;\n            var H3h = H3.high;\n            var H3l = H3.low;\n            var H4h = H4.high;\n            var H4l = H4.low;\n            var H5h = H5.high;\n            var H5l = H5.low;\n            var H6h = H6.high;\n            var H6l = H6.low;\n            var H7h = H7.high;\n            var H7l = H7.low;\n\n            // Working variables\n            var ah = H0h;\n            var al = H0l;\n            var bh = H1h;\n            var bl = H1l;\n            var ch = H2h;\n            var cl = H2l;\n            var dh = H3h;\n            var dl = H3l;\n            var eh = H4h;\n            var el = H4l;\n            var fh = H5h;\n            var fl = H5l;\n            var gh = H6h;\n            var gl = H6l;\n            var hh = H7h;\n            var hl = H7l;\n\n            // Rounds\n            for (var i = 0; i < 80; i++) {\n                // Shortcut\n                var Wi = W[i];\n\n                // Extend message\n                if (i < 16) {\n                    var Wih = Wi.high = M[offset + i * 2]     | 0;\n                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n                } else {\n                    // Gamma0\n                    var gamma0x  = W[i - 15];\n                    var gamma0xh = gamma0x.high;\n                    var gamma0xl = gamma0x.low;\n                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n                    // Gamma1\n                    var gamma1x  = W[i - 2];\n                    var gamma1xh = gamma1x.high;\n                    var gamma1xl = gamma1x.low;\n                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n                    var Wi7  = W[i - 7];\n                    var Wi7h = Wi7.high;\n                    var Wi7l = Wi7.low;\n\n                    var Wi16  = W[i - 16];\n                    var Wi16h = Wi16.high;\n                    var Wi16l = Wi16.low;\n\n                    var Wil = gamma0l + Wi7l;\n                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n                    var Wil = Wil + gamma1l;\n                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n                    var Wil = Wil + Wi16l;\n                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n                    Wi.high = Wih;\n                    Wi.low  = Wil;\n                }\n\n                var chh  = (eh & fh) ^ (~eh & gh);\n                var chl  = (el & fl) ^ (~el & gl);\n                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n                // t1 = h + sigma1 + ch + K[i] + W[i]\n                var Ki  = K[i];\n                var Kih = Ki.high;\n                var Kil = Ki.low;\n\n                var t1l = hl + sigma1l;\n                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n                var t1l = t1l + chl;\n                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n                var t1l = t1l + Kil;\n                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n                var t1l = t1l + Wil;\n                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n                // t2 = sigma0 + maj\n                var t2l = sigma0l + majl;\n                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n                // Update working variables\n                hh = gh;\n                hl = gl;\n                gh = fh;\n                gl = fl;\n                fh = eh;\n                fl = el;\n                el = (dl + t1l) | 0;\n                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n                dh = ch;\n                dl = cl;\n                ch = bh;\n                cl = bl;\n                bh = ah;\n                bl = al;\n                al = (t1l + t2l) | 0;\n                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n            }\n\n            // Intermediate hash value\n            H0l = H0.low  = (H0l + al);\n            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n            H1l = H1.low  = (H1l + bl);\n            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n            H2l = H2.low  = (H2l + cl);\n            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n            H3l = H3.low  = (H3l + dl);\n            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n            H4l = H4.low  = (H4l + el);\n            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n            H5l = H5.low  = (H5l + fl);\n            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n            H6l = H6.low  = (H6l + gl);\n            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n            H7l = H7.low  = (H7l + hl);\n            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n        },\n\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n\n            // Hash final blocks\n            this._process();\n\n            // Convert hash to 32-bit word array before returning\n            var hash = this._hash.toX32();\n\n            // Return final computed hash\n            return hash;\n        },\n\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n\n            return clone;\n        },\n\n        blockSize: 1024/32\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA512('message');\n     *     var hash = CryptoJS.SHA512(wordArray);\n     */\n    C.SHA512 = Hasher._createHelper(SHA512);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA512(message, key);\n     */\n    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n            // Init hasher\n            hasher = this._hasher = new hasher.init();\n\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof key == 'string') {\n                key = Utf8.parse(key);\n            }\n\n            // Shortcuts\n            var hasherBlockSize = hasher.blockSize;\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n            // Allow arbitrary length keys\n            if (key.sigBytes > hasherBlockSizeBytes) {\n                key = hasher.finalize(key);\n            }\n\n            // Clamp excess bits\n            key.clamp();\n\n            // Clone key for inner and outer pads\n            var oKey = this._oKey = key.clone();\n            var iKey = this._iKey = key.clone();\n\n            // Shortcuts\n            var oKeyWords = oKey.words;\n            var iKeyWords = iKey.words;\n\n            // XOR keys with pad constants\n            for (var i = 0; i < hasherBlockSize; i++) {\n                oKeyWords[i] ^= 0x5c5c5c5c;\n                iKeyWords[i] ^= 0x36363636;\n            }\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Reset\n            hasher.reset();\n            hasher.update(this._iKey);\n        },\n\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            this._hasher.update(messageUpdate);\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Compute HMAC\n            var innerHash = hasher.finalize(messageUpdate);\n            hasher.reset();\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n            return hmac;\n        }\n    });\n}());\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    // Turn off strict mode for this function so we can assign to global.Q\n    /* jshint strict: false */\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else {\n        Q = definition();\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n\n    function flush() {\n        /* jshint loopfunc: true */\n\n        while (head.next) {\n            head = head.next;\n            var task = head.task;\n            head.task = void 0;\n            var domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n\n            try {\n                task();\n\n            } catch (e) {\n                if (isNodeJS) {\n                    // In node, uncaught exceptions are considered fatal errors.\n                    // Re-throw them synchronously to interrupt flushing!\n\n                    // Ensure continuation if the uncaught exception is suppressed\n                    // listening \"uncaughtException\" events (as domains does).\n                    // Continue in next event to avoid tick recursion.\n                    if (domain) {\n                        domain.exit();\n                    }\n                    setTimeout(flush, 0);\n                    if (domain) {\n                        domain.enter();\n                    }\n\n                    throw e;\n\n                } else {\n                    // In browsers, uncaught exceptions are not fatal.\n                    // Re-throw them asynchronously to avoid slow-downs.\n                    setTimeout(function() {\n                       throw e;\n                    }, 0);\n                }\n            }\n\n            if (domain) {\n                domain.exit();\n            }\n        }\n\n        flushing = false;\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process !== \"undefined\" && process.nextTick) {\n        // Node.js before 0.9. Note that some fake-Node environments, like the\n        // Mocha test runner, introduce a `process` global without a `nextTick`.\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (isPromise(value)) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become fulfilled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be fulfilled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function(resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function(answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return isObject(object) &&\n        typeof object.promiseDispatch === \"function\" &&\n        typeof object.inspect === \"function\";\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return result.value;\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return exception.value;\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var countDown = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++countDown;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--countDown === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (countDown === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {String} custom error message (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, message) {\n    return Q(object).timeout(ms, message);\n};\n\nPromise.prototype.timeout = function (ms, message) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"]}