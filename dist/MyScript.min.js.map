{"version":3,"file":"MyScript.min.js","sources":["src/MyScript.js","src/common/generic/point.js","src/common/generic/quadraticPoint.js","src/common/generic/rectangle.js","src/common/stroker.js","src/common/mathUtils.js","src/input/generic/components/abstractComponent.js","src/input/generic/components/boundingBox.js","src/input/generic/components/stroke.js","src/input/generic/abstractParameter.js","src/input/generic/abstractRecognitionInput.js","src/input/generic/abstractRecognitionData.js","src/input/generic/recognitionLanguagesData.js","src/input/text/components/abstractTextInputComponent.js","src/input/text/components/characterInputComponent.js","src/input/text/components/characterInputComponentAlternate.js","src/input/text/components/charInputComponent.js","src/input/text/components/stringInputComponent.js","src/input/text/textInputUnit.js","src/input/text/textParameter.js","src/input/text/textProperties.js","src/input/text/textRecognitionInput.js","src/input/text/textRecognitionData.js","src/input/shape/shapeParameter.js","src/input/shape/shapeRecognitionInput.js","src/input/shape/shapeRecognitionData.js","src/input/math/mathParameter.js","src/input/math/mathRecognitionInput.js","src/input/math/mathRecognitionData.js","src/input/music/components/abstractMusicInputComponent.js","src/input/music/components/musicAccidentalInputComponent.js","src/input/music/components/musicArpeggiateInputComponent.js","src/input/music/components/musicBarInput.js","src/input/music/components/musicBarInputComponent.js","src/input/music/components/musicBeamInput.js","src/input/music/components/musicBeamInputComponent.js","src/input/music/components/musicClefInput.js","src/input/music/components/musicClefInputComponent.js","src/input/music/components/musicDecorationInput.js","src/input/music/components/musicDecorationInputComponent.js","src/input/music/components/musicDotsInputComponent.js","src/input/music/components/musicHeadInputComponent.js","src/input/music/components/musicLedgerLineInputComponent.js","src/input/music/components/musicRestInputComponent.js","src/input/music/components/musicStemInputComponent.js","src/input/music/components/musicTieOrSlurInputComponent.js","src/input/music/components/musicTimeSignatureInputComponent.js","src/input/music/musicStaff.js","src/input/music/musicParameter.js","src/input/music/musicRecognitionInput.js","src/input/music/musicRecognitionData.js","src/input/analyzer/analyzerParameter.js","src/input/analyzer/analyzerRecognitionInput.js","src/input/analyzer/analyzerRecognitionData.js","src/output/generic/abstractResult.js","src/output/text/textCandidate.js","src/output/text/textDocument.js","src/output/text/textResult.js","src/output/text/textSegment.js","src/output/text/textSegmentResult.js","src/output/text/textTagItem.js","src/output/shape/abstractShapePrimitive.js","src/output/shape/abstractDecoratedShape.js","src/output/shape/shapeCandidate.js","src/output/shape/shapeDocument.js","src/output/shape/shapeEllipse.js","src/output/shape/shapeErased.js","src/output/shape/shapeInkRange.js","src/output/shape/shapeLine.js","src/output/shape/shapeNotRecognized.js","src/output/shape/shapePoint.js","src/output/shape/shapeRecognized.js","src/output/shape/shapeResult.js","src/output/shape/shapeScratchOut.js","src/output/shape/shapeSegment.js","src/output/math/mathNode.js","src/output/math/mathNonTerminalNode.js","src/output/math/mathResultElement.js","src/output/math/mathRuleNode.js","src/output/math/mathDocument.js","src/output/math/mathInkRange.js","src/output/math/mathLaTexResultElement.js","src/output/math/mathMathMLResultElement.js","src/output/math/mathResult.js","src/output/math/mathScratchOut.js","src/output/math/mathSymbolTreeResultElement.js","src/output/math/mathTerminalNode.js","src/output/math/mathTerminalNodeCandidate.js","src/output/math/mathFenceRuleNode.js","src/output/math/mathFractionRuleNode.js","src/output/math/mathHorizontalPairRuleNode.js","src/output/math/mathIdentityRuleNode.js","src/output/math/mathLeftFenceRuleNode.js","src/output/math/mathOverscriptRuleNode.js","src/output/math/mathPreSuperscriptRuleNode.js","src/output/math/mathSqrtRuleNode.js","src/output/math/mathSubscriptRuleNode.js","src/output/math/mathSubSuperscriptRuleNode.js","src/output/math/mathSuperscriptRuleNode.js","src/output/math/mathUnderOverscriptRuleNode.js","src/output/math/mathUnderscriptRuleNode.js","src/output/math/mathVerticalPairRuleNode.js","src/output/math/mathExponentiableNonTerminalNode.js","src/output/math/mathExpressionNonTerminalNode.js","src/output/math/mathSqrtNonTerminalNode.js","src/output/math/mathVectorNonTerminalNode.js","src/output/math/mathSystemNonTerminalNode.js","src/output/math/mathTermNonTerminalNode.js","src/output/music/musicElement.js","src/output/music/musicResultElement.js","src/output/music/musicAccidental.js","src/output/music/musicAnnotation.js","src/output/music/musicArpeggiate.js","src/output/music/musicBar.js","src/output/music/musicBeam.js","src/output/music/musicChord.js","src/output/music/musicClef.js","src/output/music/musicDecoration.js","src/output/music/musicDocument.js","src/output/music/musicDots.js","src/output/music/musicHead.js","src/output/music/musicInputRange.js","src/output/music/musicKeySignature.js","src/output/music/musicKeySignatureData.js","src/output/music/musicLedgerLine.js","src/output/music/musicNote.js","src/output/music/musicPart.js","src/output/music/musicPitchData.js","src/output/music/musicRest.js","src/output/music/musicResult.js","src/output/music/musicScore.js","src/output/music/musicScoreTreeResultElement.js","src/output/music/musicScratchOut.js","src/output/music/musicSlur.js","src/output/music/musicStem.js","src/output/music/musicTie.js","src/output/music/musicTimeSignature.js","src/output/music/musicXMLResultElement.js","src/output/analyzer/analyzerElement.js","src/output/analyzer/analyzerCell.js","src/output/analyzer/analyzerCellData.js","src/output/analyzer/analyzerDocument.js","src/output/analyzer/analyzerElementReference.js","src/output/analyzer/analyzerGroup.js","src/output/analyzer/analyzerInkRange.js","src/output/analyzer/analyzerLine.js","src/output/analyzer/analyzerLineData.js","src/output/analyzer/analyzerPointData.js","src/output/analyzer/analyzerRecognizedStroke.js","src/output/analyzer/analyzerResult.js","src/output/analyzer/analyzerStrokeType.js","src/output/analyzer/analyzerTable.js","src/output/analyzer/analyzerTableData.js","src/output/analyzer/analyzerTextLine.js","src/output/analyzer/analyzerTextLineData.js","src/output/analyzer/analyzerUnderline.js","src/output/analyzer/analyzerUnderlineData.js","src/networking/networkInterface.js","src/recognition/abstractRecognizer.js","src/recognition/textRecognizer.js","src/recognition/textWSRecognizer.js","src/recognition/shapeRecognizer.js","src/recognition/mathRecognizer.js","src/recognition/mathWSRecognizer.js","src/recognition/musicRecognizer.js","src/recognition/analyzerRecognizer.js","src/rendering/renderingParameters.js","src/rendering/abstractRenderer.js","src/rendering/textRenderer.js","src/rendering/shapeRenderer.js","src/rendering/mathRenderer.js","src/rendering/musicRenderer.js","src/rendering/analyzerRenderer.js","bower_components/cryptojslib/components/core.js","bower_components/cryptojslib/components/x64-core.js","bower_components/cryptojslib/components/sha512.js","bower_components/cryptojslib/components/hmac.js","bower_components/q/q.js"],"names":["MyScript","scope","Point","obj","this","x","y","prototype","getX","setX","getY","setY","QuadraticPoint","call","pressure","distance","length","ux","uy","x1","x2","y1","y2","constructor","getPressure","setPressure","getDistance","setDistance","getLength","setLength","getUx","setUx","getUy","setUy","getX1","setX1","getX2","setX2","getY1","setY1","getY2","setY2","Rectangle","width","height","getTopLeftPoint","point","setTopLeftPoint","topLeftPoint","getWidth","setWidth","getHeight","setHeight","Stroker","writing","strokes","currentStroke","undoRedoStack","isWriting","getCurrentStroke","startStrokeWriting","Stroke","addX","addY","continueStrokeWriting","endStrokeWriting","push","clear","isEmpty","isRedoEmpty","undo","pop","redo","getStrokes","getUndoRedoStack","clearUndoRedoStack","copy","index","MathUtils","getEllipseArcRect","center","maxRadius","minRadius","orientation","startAngle","sweepAngle","angle","alpha","z1","z2","z3","z4","cosAlpha","sinAlpha","n","xList","yList","i","xMin","xMax","yMin","yMax","angleStep","sortFloat","a","b","Math","cos","sin","abs","atan2","sort","getLineRect","firstPoint","lastPoint","xFirst","xLast","min","max","yFirst","yLast","getBoundingRect","boundingBoxes","rectangle","apply","AbstractComponent","getType","type","setType","BoundingBox","getXMin","setXMin","getXMax","setXMax","getYMin","setYMin","getYMax","setYMax","getBoundingBox","AbstractParameter","AbstractRecognitionInput","AbstractRecognitionData","getApplicationKey","applicationKey","setApplicationKey","getInstanceId","instanceId","setInstanceId","getHmac","hmac","setHmac","RecognitionLanguagesData","getInputMode","inputMode","setInputMode","AbstractTextInputComponent","boundingBox","setBoundingBox","CharacterInputComponent","alternates","getAlternates","setAlternates","addAlternate","alternate","CharacterInputComponentAlternate","probability","getAlternate","setAlternate","getProbability","setProbability","CharInputComponent","getCharacter","character","setCharacter","StringInputComponent","getString","string","setString","TextInputUnit","textInputType","components","getInputType","setInputType","inputType","getComponents","setComponents","TextParameter","getLanguage","language","setLanguage","textInputMode","getContentTypes","contentTypes","setContentTypes","getSubsetKnowledges","subsetKnowledges","setSubsetKnowledges","getUserResources","userResources","setUserResources","getUserLkWords","userLkWords","setUserLkWords","getResultDetail","resultDetail","setResultDetail","getTextProperties","textProperties","setTextProperties","TextProperties","getTextCandidateListSize","textCandidateListSize","setTextCandidateListSize","getWordCandidateListSize","wordCandidateListSize","setWordCandidateListSize","getWordPredictionListSize","wordPredictionListSize","setWordPredictionListSize","getWordCompletionListSize","wordCompletionListSize","setWordCompletionListSize","getCharacterCandidateListSize","characterCandidateListSize","setCharacterCandidateListSize","getDiscardCaseVariations","discardCaseVariations","setDiscardCaseVariations","getDiscardAccentuationVariations","discardAccentuationVariations","setDiscardAccentuationVariations","getDisableSpatialOrdering","disableSpatialOrdering","setDisableSpatialOrdering","getGlyphDistortion","glyphDistortion","setGlyphDistortion","getEnableOutOfLexicon","enableOutOfLexicon","setEnableOutOfLexicon","getSpellingDistortion","spellingDistortion","setSpellingDistortion","TextRecognitionInput","getParameters","textParameter","setParameters","parameters","getInputUnits","inputUnits","setInputUnits","TextRecognitionData","getTextRecognitionInput","textInput","setTextRecognitionInput","input","JSON","stringify","ShapeParameter","getRejectDetectionSensitivity","rejectDetectionSensitivity","setRejectDetectionSensitivity","hasBeautification","doBeautification","setBeautification","ShapeRecognitionInput","getDoBeautification","setDoBeautification","ShapeRecognitionData","getShapeRecognitionInput","shapeInput","setShapeRecognitionInput","MathParameter","resultTypes","isColumnar","getResultTypes","setResultTypes","getIsColumnar","setIsColumnar","getScratchOutDetectionSensitivity","scratchOutDetectionSensitivity","setScratchOutDetectionSensitivity","MathRecognitionInput","MathRecognitionData","getMathRecognitionInput","mathInput","setMathRecognitionInput","AbstractMusicInputComponent","MusicAccidentalInputComponent","getValue","value","setValue","MusicArpeggiateInputComponent","MusicBarInput","getRepeatDirection","repeatDirection","setRepeatDirection","getStyle","style","setStyle","MusicBarInputComponent","MusicBeamInput","getPlacement","placement","setPlacement","getSlope","slope","setSlope","getLeftCount","leftCount","setLeftCount","getRightCount","rightCount","setRightCount","getGap","gap","setGap","MusicBeamInputComponent","MusicClefInput","getYAnchor","yAnchor","setYAnchor","getOctave","octave","setOctave","getSymbol","symbol","setSymbol","MusicClefInputComponent","MusicDecorationInput","MusicDecorationInputComponent","MusicDotsInputComponent","MusicHeadInputComponent","MusicLedgerLineInputComponent","MusicRestInputComponent","MusicStemInputComponent","MusicTieOrSlurInputComponent","MusicTimeSignatureInputComponent","MusicStaff","getCount","count","setCount","getTop","top","setTop","MusicParameter","getStaff","staff","setStaff","getDivisions","divisions","setDivisions","MusicRecognitionInput","MusicRecognitionData","getMusicRecognitionInput","musicInput","setMusicRecognitionInput","AnalyzerParameter","getTextParameters","setTextParameters","getCoordinateResolution","coordinateResolution","setCoordinateResolution","AnalyzerRecognitionInput","parameter","AnalyzerRecognitionData","getAnalyzerRecognitionInput","analyzerInput","setAnalyzerRecognitionInput","AbstractResult","TextCandidate","children","flags","label","normalizedScore","spellingDistortionRatio","TextSegment","j","getLabel","getNormalizedScore","getResemblanceScore","resemblanceScore","getSpellingDistortionRatio","getChildren","getFlags","TextDocument","tagItems","wordCandidates","charCandidates","textSegmentResult","TextSegmentResult","TextTagItem","k","getTagItems","getWordCandidates","getCharCandidates","getTextSegmentResult","TextResult","result","getTextDocument","candidates","inkRanges","getCandidates","getInkRanges","selectedCandidateIdx","getSelectedCandidateIdx","getSelectedCandidate","tagType","getTagType","AbstractShapePrimitive","isLine","isEllipse","AbstractDecoratedShape","beginDecoration","beginTangentAngle","endDecoration","endTangentAngle","hasBeginDecoration","hasEndDecoration","getBeginDecoration","getEndDecoration","getBeginTangentAngle","getEndTangentAngle","ShapeCandidate","isErased","isScratchOut","isNotRecognized","isRecognized","ShapeDocument","segments","ShapeSegment","getSegments","ShapeEllipse","ShapePoint","getCenter","getMinRadius","getMaxRadius","getOrientation","getStartAngle","getSweepAngle","ShapeErased","ShapeInkRange","firstStroke","lastStroke","getFirstStroke","getLastStroke","getFirstPoint","getLastPoint","ShapeLine","ShapeNotRecognized","ShapeRecognized","primitives","normalizedRecognitionScore","primitive","getPrimitives","getNormalizedRecognitionScore","ShapeResult","getShapeDocument","ShapeScratchOut","elementType","uniqueID","selectedCandidateIndex","candidate","getElementType","getUniqueId","getSelectedCandidateIndex","MathNode","name","getName","MathNonTerminalNode","selectedCandidate","MathTermNonTerminalNode","MathSqrtNonTerminalNode","MathVectorNonTerminalNode","MathSystemNonTerminalNode","MathExponentiableNonTerminalNode","MathExpressionNonTerminalNode","MathTerminalNode","MathIdentityRuleNode","MathHorizontalPairRuleNode","MathFenceRuleNode","MathFractionRuleNode","MathSqrtRuleNode","MathSubscriptRuleNode","MathSuperscriptRuleNode","MathSubSuperscriptRuleNode","MathUnderscriptRuleNode","MathOverscriptRuleNode","MathUnderOverscriptRuleNode","MathPreSuperscriptRuleNode","MathVerticalPairRuleNode","MathLeftFenceRuleNode","undefined","MathResultElement","isLaTex","isMathMl","isSymbolTree","MathRuleNode","MathDocument","results","scratchOutResults","MathMathMLResultElement","MathLaTexResultElement","MathSymbolTreeResultElement","MathScratchOut","getResultElements","getScratchOutResults","MathInkRange","component","firstItem","lastItem","getComponent","getFirstItem","getLastItem","MathResult","getMathDocument","erasedInkRanges","getErasedInkRanges","root","getRoot","MathTerminalNodeCandidate","MusicElement","inputRanges","getInputRanges","MusicResultElement","isMusicXML","isScoreTree","MusicAccidental","MusicAnnotation","MusicArpeggiate","MusicBar","decorations","MusicDecoration","getDecorations","MusicBeam","MusicChord","notes","beamTypes","ledgerLines","startSlurs","stopSlurs","duration","arpeggiate","startBeam","stopBeam","stem","MusicStem","MusicNote","l","MusicLedgerLine","m","MusicSlur","getDuration","getArpeggiate","getStartBeam","getStopBeam","getStem","getNotes","getBeamTypes","getLedgerLines","getStartSlurs","getStopSlurs","MusicClef","line","getLine","MusicDocument","MusicXMLResultElement","MusicScoreTreeResultElement","MusicScratchOut","MusicDots","MusicHead","MusicInputRange","MusicKeySignature","accidentals","signature","MusicKeySignatureData","getSignature","getAccidentals","fifths","cancel","getFifths","getCancel","accidental","dots","head","pitch","MusicPitchData","startTie","MusicTie","stopTie","getAccidental","getDots","getHead","getPitch","getStartTie","getStopTie","MusicPart","elements","MusicRest","MusicTimeSignature","getElements","alteration","step","getAlteration","getStep","MusicResult","getMusicDocument","MusicScore","parts","getParts","score","getScore","erasedInputRanges","getErasedInputRanges","bottom","getBottom","AnalyzerElement","AnalyzerCell","data","AnalyzerCellData","getData","firstColumn","lastColumn","firstRow","lastRow","AnalyzerPointData","topBorder","bottomBorder","leftBorder","rightBorder","getFirstColumn","getLastColumn","getFirstRow","getLastRow","hasTopBorder","hasBottomBorder","hasLeftBorder","hasRightBorder","AnalyzerDocument","textLines","shapes","tables","groups","AnalyzerTextLine","AnalyzerTable","AnalyzerGroup","getTextLines","getShapes","getTables","getGroups","AnalyzerElementReference","elementReferences","getElementReferences","AnalyzerInkRange","stroke","AnalyzerRecognizedStroke","getStroke","AnalyzerLine","AnalyzerLineData","p1","p2","getP1","getP2","AnalyzerResult","getAnalyzerDocument","AnalyzerStrokeType","inkRange","getInkRange","lines","cells","AnalyzerTableData","getLines","getCells","columnCount","rowCount","getColumnCount","getRowCount","underlineList","AnalyzerTextLineData","AnalyzerUnderline","getUnderlineList","baselinePos","toMidline","textHeight","justificationType","getBaselinePos","getToMidline","getTextHeight","getJustificationType","AnalyzerUnderlineData","firstCharacter","lastCharacter","getFirstCharacter","getLastCharacter","NetworkInterface","parse","req","responseText","e","transformRequest","str","p","encodeURIComponent","join","xhr","url","onStateChange","request","readyState","status","deferred","resolve","reject","onLoad","Error","onError","onProgress","event","notify","loaded","total","Q","defer","XMLHttpRequest","open","setRequestHeader","onload","onerror","onprogress","onreadystatechange","send","promise","get","src","params","post","AbstractRecognizer","http","getAvailableLanguageList","then","response","computeHmac","hmacKey","jsonInput","CryptoJS","HmacSHA512","toString","enc","Hex","takeUpHmacChallenge","challenge","socket","hmacMessage","TextRecognizer","doSimpleRecognition","TextWSRecognizer","WebSocket","setOpenCallback","callback","onopen","setCloseCallback","onclose","setErrorCallback","setDataCallback","onmessage","initWSRecognition","initMessage","startWSRecognition","continueWSRecognition","continueMessage","resetWSRecognition","resetMessage","stopWSRecognition","isClosed","restartWSRecognition","ShapeRecognizer","clearShapeRecognitionSession","instanceSessionId","MathRecognizer","MathWSRecognizer","MusicRecognizer","AnalyzerRecognizer","RenderingParameters","color","rectColor","font","decoration","pressureType","doFadeOutLoop","showBoundingBoxes","getColor","setColor","getRectColor","setRectColor","getFont","setFont","getDecoration","setDecoration","getPressureType","setPressureType","getAlpha","setAlpha","getDoFadeOutLoop","setDoFadeOutLoop","getShowBoundingBoxes","setShowBoundingBoxes","AbstractRenderer","points","drawing","drawRecognitionResult","drawComponents","context","drawStroke","drawStart","preventDefault","drawContinue","previous","drawQuadratricStart","third","drawQuadratricContinue","drawEnd","drawPoint","drawQuadratricEnd","clearRect","canvas","drawGuidelines","horizontalSpacing","verticalSpacing","save","fillStyle","strokeStyle","lineWidth","clientWidth","clientHeight","beginPath","moveTo","lineTo","restore","drawLineByCoordinates","lX","lY","cX","cY","globalAlpha","drawLineByPoints","drawRectangle","fillRect","drawStrokes","strokePoints","p3","p4","p5","p6","p7","arc","PI","fill","drawArrowHead","headPoint","phi","beta","extractStroke","firstPointIndex","floor","lastPointIndex","ceil","strokeIndex","currentStrokePointCount","newStroke","pointIndex","computePoint","strokeFirstSegment","strokeSegment","strokeLastSegment","x11","y11","x12","y12","x21","y21","x22","y22","quadraticCurveTo","isFirst","isLast","computeDistance","strokeLength","computePressure","computeLastControls","computeFirstControls","computeControls","dx","dy","d","sqrt","pow","isNaN","parseFloat","first","next","r","nx","ny","u","last","TextRenderer","cloneStrokes","strokesToRemove","recognitionResult","drawInputUnits","drawChar","drawCharacter","drawString","ShapeRenderer","drawShapes","drawShapeEllipse","drawShapeLine","segment","drawShapeRecognized","drawShapeNotRecognized","shapeRecognized","drawShapePrimitive","rectangleList","getPrimitiveBoundingBox","boundingRect","shapeNotRecognized","extractedStrokes","shapeLine","drawEllipseArc","centerPoint","boundariesPoints","shapeEllipse","MathRenderer","notScratchOutStrokes","removeScratchOutStrokes","mathScratchOutResults","slice","z","splice","MusicRenderer","drawStaff","staffHeight","staves","offset","drawAccidental","drawArpeggiate","drawBar","drawBeam","drawClef","drawDecoration","drawDots","drawHead","drawLedgerLine","drawRest","drawStem","drawTieOrSlur","drawTimeSignature","clef","imageObj","Image","ratio","drawImage","getClefSvg","AnalyzerRenderer","drawTables","drawTextLines","drawCell","drawLine","textLine","text","drawText","underlines","drawUnderline","baseline","textAlign","fillText","underline","topLeft","textMetrics","measureText","substring","drawGroups","cell","C","C_lib","lib","Base","F","extend","overrides","subtype","mixIn","hasOwnProperty","init","$super","arguments","create","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","random","nBytes","C_enc","hexChars","bite","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","_doProcessBlock","processedWords","C_algo","Hasher","cfg","_doReset","update","messageUpdate","finalize","hash","_doFinalize","_createHelper","hasher","message","_createHmacHelper","key","HMAC","algo","X32WordArray","C_x64","x64","Word","high","low","toX32","x64Words","x64WordsLength","x32Words","x64Word","wordsLength","X64Word_create","X64Word","X64WordArray","K","W","SHA512","_hash","M","H","H0","H1","H2","H3","H4","H5","H6","H7","H0h","H0l","H1h","H1l","H2h","H2l","H3h","H3l","H4h","H4l","H5h","H5l","H6h","H6l","H7h","H7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","Wi","Wih","Wil","gamma0x","gamma0xh","gamma0xl","gamma0h","gamma0l","gamma1x","gamma1xh","gamma1xl","gamma1h","gamma1l","Wi7","Wi7h","Wi7l","Wi16","Wi16h","Wi16l","chh","chl","majh","majl","sigma0h","sigma0l","sigma1h","sigma1l","Ki","Kih","Kil","t1l","t1h","t2l","t2h","nBitsTotal","nBitsLeft","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","definition","bootstrap","exports","module","define","amd","ses","ok","makeQ","uncurryThis","f","isObject","Object","isStopIteration","exception","object_toString","QReturnValue","makeStackTraceLong","error","hasStacks","stack","indexOf","STACK_JUMP_SEPARATOR","stacks","source","unshift","concatedStacks","filterStackString","stackString","split","desiredLines","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qFileName","qStartingLine","qEndingLine","captureLine","firstLine","deprecate","alternative","console","warn","isPromise","isPromiseAlike","coerce","fulfill","become","newPromise","resolvedPromise","array_reduce","messages","nextTick","promiseDispatch","progressListeners","object_create","Promise","op","operands","args","array_slice","valueOf","nearerValue","nearer","inspect","state","longStackSupport","reason","progress","progressListener","resolver","TypeError","race","answerPs","len","descriptor","fallback","inspected","when","fulfilled","rejected","progressed","object","isPending","isFulfilled","isRejected","resetUnhandledRejections","unhandledReasons","unhandledRejections","trackUnhandledRejections","trackRejection","untrackRejection","at","array_indexOf","rejection","set","rhs","delete","thisp","keys","object_keys","master","isDef","dispatch","spread","async","makeGenerator","continuer","verb","arg","StopIteration","generator","done","errback","bind","spawn","_return","promised","all","self","promises","countDown","snapshot","allResolved","array_map","noop","allSettled","nodeify","nodeback","flush","task","domain","enter","isNodeJS","exit","setTimeout","flushing","tail","requestTick","process","setImmediate","window","MessageChannel","channel","port1","requestPortTick","port2","postMessage","Function","Array","reduce","basis","map","collect","Type","object_hasOwnProperty","ReturnValue","makeNodeResolver","passByCopy","that","makePromise","_fulfilled","_rejected","newException","_progressed","newValue","threw","thenResolve","thenReject","getUnhandledReasons","stopUnhandledRejectionTracking","array","del","mapply","mcall","invoke","fapply","fcall","fbind","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke"],"mappings":"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","sourcesContent":["/**\n @module MyScript\n */\n/*global MyScript:true */\nMyScript = {};","(function (scope) {\n    'use strict';\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} obj\n     * @constructor\n     */\n    function Point (obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Complex Point object used for quadratic calculation\n     *\n     * @class QuadraticPoint\n     * @param {Object} obj\n     * @constructor\n     */\n    function QuadraticPoint (obj) {\n        scope.Point.call(this, obj);\n        this.pressure = 0.5;\n        this.distance = 0.0;\n        this.length = 0.0;\n        this.ux = 0.0;\n        this.uy = 0.0;\n        this.x1 = 0.0;\n        this.x2 = 0.0;\n        this.y1 = 0.0;\n        this.y2 = 0.0;\n    }\n\n    /**\n     * Inheritance property\n     */\n    QuadraticPoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    QuadraticPoint.prototype.constructor = QuadraticPoint;\n\n    /**\n     * Get pressure\n     *\n     * @method getPressure\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getPressure = function () {\n        return this.pressure;\n    };\n\n    /**\n     * Set pressure\n     *\n     * @method setPressure\n     * @param {Number} pressure\n     */\n    QuadraticPoint.prototype.setPressure = function (pressure) {\n        this.pressure = pressure;\n    };\n\n    /**\n     * Get distance\n     *\n     * @method getDistance\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getDistance = function () {\n        return this.distance;\n    };\n\n    /**\n     * Set distance\n     *\n     * @method setDistance\n     * @param {Number} distance\n     */\n    QuadraticPoint.prototype.setDistance = function (distance) {\n        this.distance = distance;\n    };\n\n    /**\n     * Get length\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getLength = function () {\n        return this.length;\n    };\n\n    /**\n     * Set length\n     *\n     * @method setLength\n     * @param {Number} length\n     */\n    QuadraticPoint.prototype.setLength = function (length) {\n        this.length = length;\n    };\n\n    /**\n     * Get ux\n     *\n     * @method getUx\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getUx = function () {\n        return this.ux;\n    };\n\n    /**\n     * Set ux\n     *\n     * @method setUx\n     * @param {Number} ux\n     */\n    QuadraticPoint.prototype.setUx = function (ux) {\n        this.ux = ux;\n    };\n\n    /**\n     * Get uy\n     *\n     * @method getUy\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getUy = function () {\n        return this.uy;\n    };\n\n    /**\n     * Set uy\n     *\n     * @method setUy\n     * @param {Number} uy\n     */\n    QuadraticPoint.prototype.setUy = function (uy) {\n        this.uy = uy;\n    };\n\n    /**\n     * Get x1\n     *\n     * @method getX1\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getX1 = function () {\n        return this.x1;\n    };\n\n    /**\n     * Set x1\n     *\n     * @method setX1\n     * @param {Number} x1\n     */\n    QuadraticPoint.prototype.setX1 = function (x1) {\n        this.x1 = x1;\n    };\n\n    /**\n     * Get x2\n     *\n     * @method getX2\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getX2 = function () {\n        return this.x2;\n    };\n\n    /**\n     * Set x2\n     *\n     * @method setX2\n     * @param {Number} x2\n     */\n    QuadraticPoint.prototype.setX2 = function (x2) {\n        this.x2 = x2;\n    };\n\n    /**\n     * Get y1\n     *\n     * @method getY1\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getY1 = function () {\n        return this.y1;\n    };\n\n    /**\n     * Set y2\n     *\n     * @method setY1\n     * @param {Number} y1\n     */\n    QuadraticPoint.prototype.setY1 = function (y1) {\n        this.y1 = y1;\n    };\n\n    /**\n     * Get y2\n     *\n     * @method getY2\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getY2 = function () {\n        return this.y2;\n    };\n\n    /**\n     * Set y2\n     *\n     * @method setY2\n     * @param {Number} y2\n     */\n    QuadraticPoint.prototype.setY2 = function (y2) {\n        this.y2 = y2;\n    };\n\n    // Export\n    scope.QuadraticPoint = QuadraticPoint;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} obj\n     * @constructor\n     */\n    function Rectangle (obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number}\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number}\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {MyScript.Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @returns {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * The Stroker class that can use to store writing strokes and manage the undo/redo/clear system\n     *\n     * @class Stroker\n     * @constructor\n     */\n    function Stroker () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    }\n\n    /**\n     * Is Wrinting a stoke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    Stroker.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last current Stroke write\n     *\n     * @method getCurrentStroke\n     * @returns {Stroke}\n     */\n    Stroker.prototype.getCurrentStroke = function () {\n        return this.currentStroke;\n    };\n\n    /**\n     * Start to write a stroke\n     *\n     * @method startStrokeWriting\n     * @param {Number} x abcisse coordinate\n     * @param {Number} y ordinate coordinate\n     */\n    Stroker.prototype.startStrokeWriting = function (x, y) {\n        this.currentStroke = new scope.Stroke();\n        this.currentStroke.addX(x);\n        this.currentStroke.addY(y);\n        this.writing = true;\n    };\n\n    /**\n     * Continue to write a stroke\n     *\n     * @method continueStrokeWriting\n     * @param {Number} x abcisse coordinate\n     * @param {Number} y ordinate coordinate\n     */\n    Stroker.prototype.continueStrokeWriting = function (x, y) {\n        if (this.writing) {\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n        }\n    };\n\n    /**\n     * End of writing a stroke\n     *\n     * @method endStrokeWriting\n     */\n    Stroker.prototype.endStrokeWriting = function () {\n        this.strokes.push(this.currentStroke);\n        this.writing = false;\n    };\n\n    /**\n     * Clear the strokes list\n     *\n     * @method clear\n     */\n    Stroker.prototype.clear = function () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Is The Strokes list is empty\n     *\n     * @method isEmpty\n     * @returns {Boolean}\n     */\n    Stroker.prototype.isEmpty = function () {\n        return this.strokes.length === 0;\n    };\n\n    /**\n     * Is the Undo/Redo Stack empty\n     *\n     * @method isRedoEmpty\n     * @returns {Boolean}\n     */\n    Stroker.prototype.isRedoEmpty = function () {\n        return this.undoRedoStack.length === 0;\n    };\n\n    /**\n     * Make an undo\n     *\n     * @method undo\n     */\n    Stroker.prototype.undo = function () {\n        this.undoRedoStack.push(this.strokes[this.strokes.length - 1]);\n        this.strokes.pop();\n    };\n\n    /**\n     * Make a redo\n     *\n     * @method redo\n     */\n    Stroker.prototype.redo = function () {\n        this.strokes.push(this.undoRedoStack[this.undoRedoStack.length - 1]);\n        this.undoRedoStack.pop();\n    };\n\n    /**\n     * Get the strokes list\n     *\n     * @method getStokes\n     * @returns {Stroke[]}\n     */\n    Stroker.prototype.getStrokes = function () {\n        return this.strokes;\n    };\n\n    /**\n     * Get the Undo/Redo Stack\n     *\n     * @method getUndoRedoStack\n     * @returns {Stroke[]}\n     */\n    Stroker.prototype.getUndoRedoStack = function () {\n        return this.undoRedoStack;\n    };\n\n    /**\n     * Clear the Undo/Redo Stack\n     *\n     * @method clearUndoRedoStack\n     */\n    Stroker.prototype.clearUndoRedoStack = function () {\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Copy the strokes values from index on an other list of strokes\n     *\n     * @method copy\n     * @param {Stroke[]} strokes List of strokes\n     * @param {Number} index Position to start the copy\n     */\n    Stroker.prototype.copy = function (strokes, index) {\n        for (index; index < this.strokes.length; index++) {\n            strokes.push(this.strokes[index]);\n        }\n    };\n\n    // Export\n    scope.Stroker = Stroker;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils () {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {MyScript.Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x:xMin, y:yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {MyScript.Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst,xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x:xMin, y:yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {MyScript.Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x:xMin, y:yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent () {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent a bounding box\n     *\n     * @class BoundingBox\n     * @extends Rectangle\n     * @param {Object} obj\n     * @constructor\n     */\n    function BoundingBox (obj) {\n        scope.Rectangle.call(this, obj);\n        if (obj) {\n            this.xMin = obj.xMin;\n            this.xMax = obj.xMax;\n            this.yMin = obj.yMin;\n            this.yMax = obj.yMax;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    BoundingBox.prototype = new scope.Rectangle();\n\n    /**\n     * Constructor property\n     */\n    BoundingBox.prototype.constructor = BoundingBox;\n\n    BoundingBox.prototype.getX = function () {\n        return this.xMin;\n    };\n\n    BoundingBox.prototype.getY = function () {\n        return this.yMin;\n    };\n\n    BoundingBox.prototype.getXMin = function () {\n        return this.xMin;\n    };\n\n    BoundingBox.prototype.setXMin = function (xMin) {\n        this.xMin = xMin;\n    };\n\n    BoundingBox.prototype.getXMax = function () {\n        return this.xMax;\n    };\n\n    BoundingBox.prototype.setXMax = function (xMax) {\n        this.xMax = xMax;\n    };\n\n    BoundingBox.prototype.getYMin = function () {\n        return this.yMin;\n    };\n\n    BoundingBox.prototype.setYMin = function (yMin) {\n        this.yMin = yMin;\n    };\n\n    BoundingBox.prototype.getYMax = function () {\n        return this.yMax;\n    };\n\n    BoundingBox.prototype.setYMax = function (yMax) {\n        this.yMax = yMax;\n    };\n\n    BoundingBox.prototype.getWidth = function () {\n        return this.xMax - this.xMin;\n    };\n\n    BoundingBox.prototype.getHeight = function () {\n        return this.yMax - this.yMin;\n    };\n\n    // Export\n    scope.BoundingBox = BoundingBox;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent a simple stroke input component\n     *\n     * @class Stroke\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function Stroke () {\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    Stroke.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    Stroke.prototype.constructor = Stroke;\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    Stroke.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    Stroke.prototype.addX = function (x) {\n        this.x.push(x);\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    Stroke.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    Stroke.prototype.addY = function (y) {\n        this.y.push(y);\n    };\n\n    /**\n     * Get the number of points for this stroke\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    Stroke.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {MyScript.BoundingBox}\n     */\n    Stroke.prototype.getBoundingBox = function () {\n        return new scope.BoundingBox({\n            xMin: Math.min.apply(Math, this.getX()),\n            xMax: Math.max.apply(Math, this.getX()),\n            yMin: Math.min.apply(Math, this.getY()),\n            yMax: Math.max.apply(Math, this.getY())\n        });\n    };\n\n    // Export\n    scope.Stroke = Stroke;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter () {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput () {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData () {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharacterInputComponent () {\n        this.type = 'inputCharacter';\n        this.alternates = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {MyScript.CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {MyScript.CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {MyScript.CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate (alternate, probability) {\n        this.alternate = alternate;\n        this.probability = probability;\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent () {\n        this.type = 'char';\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get character\n     *\n     * @method getCharacter\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getCharacter = function () {\n        return this.character;\n    };\n\n    /**\n     * Set character\n     *\n     * @method setCharacter\n     * @param {String} character\n     */\n    CharInputComponent.prototype.setCharacter = function (character) {\n        this.character = character;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent () {\n        this.type = 'string';\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get string\n     *\n     * @method getString\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getString = function () {\n        return this.string;\n    };\n\n    /**\n     * Set string\n     *\n     * @method setString\n     * @param {String} string\n     */\n    StringInputComponent.prototype.setString = function (string) {\n        this.string = string;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit () {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @returns {MyScript.AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {MyScript.AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter (obj) {\n        scope.AbstractParameter.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {String}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {String}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {String} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {MyScript.TextProperties[]}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {MyScript.TextProperties[]} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties () {\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MyScript.TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MyScript.TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {MyScript.TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {MyScript.TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @method getTextRecognitionInput\n     * @returns {MyScript.TextRecognitionInput} inputMode\n     */\n    TextRecognitionData.prototype.getTextRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setTextRecognitionInput\n     * @param {MyScript.TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setTextRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array}\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {MyScript.AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {MyScript.AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method getDoBeautification\n     * @returns {Boolean}\n     */\n    ShapeRecognitionInput.prototype.getDoBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setDoBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeRecognitionInput.prototype.setDoBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Number}\n     */\n    ShapeRecognitionInput.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Number} rejectDetectionSensitivity\n     */\n    ShapeRecognitionInput.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @method getShapeRecognitionInput\n     * @returns {MyScript.ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getShapeRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setShapeRecognitionInput\n     * @param {MyScript.ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setShapeRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter () {\n        this.resultTypes = [];\n        this.isColumnar = false;\n        this.userResources = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array}\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method getIsColumnar\n     * @returns boolean\n     */\n    MathParameter.prototype.getIsColumnar = function () {\n        return this.isColumnar;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setIsColumnar\n     * @param  boolean\n     */\n    MathParameter.prototype.setIsColumnar = function (isColumnar) {\n        this.resultTypes = isColumnar;\n    };\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array}\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number}\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method getIsColumnar\n     * @returns boolean\n     */\n    MathRecognitionInput.prototype.getIsColumnar = function () {\n        return this.isColumnar;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setIsColumnar\n     * @param  boolean\n     */\n    MathRecognitionInput.prototype.setIsColumnar = function (isColumnar) {\n        this.isColumnar = isColumnar;\n    };\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n    /**\n     * Get math input\n     *\n     * @method getMathRecognitionInput\n     * @returns {MyScript.MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getMathRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setMathRecognitionInput\n     * @param {MyScript.MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setMathRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent () {\n        this.type = 'accidental';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent () {\n        this.type = 'arpeggiate';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music bar input\n     *\n     * @class MusicBarInput\n     * @constructor\n     */\n    function MusicBarInput () {\n    }\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBarInput.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBarInput.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBarInput.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBarInput.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    // Export\n    scope.MusicBarInput = MusicBarInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent () {\n        this.type = 'bar';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar input component value\n     *\n     * @method getValue\n     * @returns {MyScript.MusicBarInput}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar input component value\n     *\n     * @method setValue\n     * @param {MyScript.MusicBarInput} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music beam input\n     *\n     * @class MusicBeamInput\n     * @constructor\n     */\n    function MusicBeamInput () {\n    }\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeamInput.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeamInput.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeamInput.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeamInput.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeamInput.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeamInput.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeamInput.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeamInput.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeamInput.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeamInput.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicBeamInput = MusicBeamInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent () {\n        this.type = 'beam';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeamInput}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeamInput} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music clef input\n     *\n     * @class MusicClefInput\n     * @constructor\n     */\n    function MusicClefInput () {\n    }\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClefInput.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClefInput.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClefInput.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClefInput.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClefInput.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClefInput.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClefInput = MusicClefInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Clef input component\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent () {\n        this.type = 'clef';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MyScript.MusicClefInput}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MyScript.MusicClefInput} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music decoration input\n     *\n     * @class MusicDecorationInput\n     * @constructor\n     */\n    function MusicDecorationInput () {\n    }\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecorationInput.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecorationInput.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecorationInput.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecorationInput.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecorationInput = MusicDecorationInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent () {\n        this.type = 'decoration';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecorationInput}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecorationInput} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent () {\n        this.type = 'dots';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent () {\n        this.type = 'head';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent () {\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent () {\n        this.type = 'rest';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent () {\n        this.type = 'stem';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent () {\n        this.type = 'tieOrSlur';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent () {\n        this.type = 'timeSignature';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represents a staff used for music recognition\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff () {\n    }\n\n    /**\n     * Get the count of lines\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the count of lines\n     *\n     * @method setCount\n     * @param {Number}\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number}\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number}\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter () {\n        this.resultTypes = [];\n        this.userResources = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array}\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array}\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number}\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MyScript.MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MyScript.MusicStaff}\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number}\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the result types\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the result types\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicRecognitionInput.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRecognitionInput.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicRecognitionInput.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @method getMusicRecognitionInput\n     * @returns {MyScript.MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getMusicRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setMusicRecognitionInput\n     * @param {MyScript.MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setMusicRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput () {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @method getAnalyzerRecognitionInput\n     * @returns {MyScript.AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getAnalyzerRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setAnalyzerRecognitionInput\n     * @param {MyScript.AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setAnalyzerRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function AbstractResult (obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextCandidate (obj) {\n        this.children = [];\n        this.flags = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[i]));\n            }\n            for (var j in obj.flags) {\n                this.flags.push(obj.flags[j]);\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextDocument (obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            this.textSegmentResult = new scope.TextSegmentResult(obj.textSegmentResult);\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {MyScript.TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word candidates\n     *\n     * @method getWordCandidates\n     * @returns {Array}\n     */\n    TextDocument.prototype.getWordCandidates = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get char candidates\n     *\n     * @method getCharCandidates\n     * @returns {Array}\n     */\n    TextDocument.prototype.getCharCandidates = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get text segment result\n     *\n     * @method getTextSegmentResult\n     * @returns {MyScript.TextSegmentResult}\n     */\n    TextDocument.prototype.getTextSegmentResult = function () {\n        return this.textSegmentResult;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {MyScript.TextDocument}\n     */\n    TextResult.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextSegment (obj) {\n        this.candidates = [];\n        if (obj) {\n            this.inkRanges = obj.inkRanges;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MyScript.TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {String}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text segment result\n     *\n     * @class TextSegmentResult\n     * @extends TextSegment\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextSegmentResult (obj) {\n        scope.TextSegment.call(this, obj);\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextSegmentResult.prototype = new scope.TextSegment();\n\n    /**\n     * Constructor property\n     */\n    TextSegmentResult.prototype.constructor = TextSegmentResult;\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegmentResult.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MyScript.TextCandidate}\n     */\n    TextSegmentResult.prototype.getSelectedCandidate = function () {\n        return this.candidates[this.selectedCandidateIdx];\n    };\n\n    // Export\n    scope.TextSegmentResult = TextSegmentResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} obj\n     * @constructor\n     */\n    function TextTagItem (obj) {\n        if (obj) {\n            this.tagType = obj.tagType;\n            this.inkRanges = obj.inkRanges;\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {String}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} obj\n     * @constructor\n     */\n    function AbstractShapePrimitive (obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract decorated shape\n     *\n     * @class AbstractDecoratedShape\n     * @extends AbstractShapePrimitive\n     * @param {Object} obj\n     * @constructor\n     */\n    function AbstractDecoratedShape (obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractDecoratedShape.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    AbstractDecoratedShape.prototype.constructor = AbstractDecoratedShape;\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractDecoratedShape.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractDecoratedShape.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractDecoratedShape.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractDecoratedShape.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractDecoratedShape.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractDecoratedShape.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractDecoratedShape = AbstractDecoratedShape;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeCandidate (obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeDocument (obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {MyScript.ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractDecoratedShape\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeEllipse (obj) {\n        scope.AbstractDecoratedShape.call(this, obj);\n        if (obj) {\n            this.center = new scope.ShapePoint(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractDecoratedShape();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {MyScript.ShapePoint}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeErased (obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeInkRange (obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {MyScript.ShapePoint}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {MyScript.ShapePoint}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractDecoratedShape\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeLine (obj) {\n        scope.AbstractDecoratedShape.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.ShapePoint(obj.firstPoint);\n            this.lastPoint = new scope.ShapePoint(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractDecoratedShape();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {ShapePoint}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {ShapePoint}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeNotRecognized (obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape point\n     *\n     * @class ShapePoint\n     * @extends Point\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapePoint (obj) {\n        scope.Point.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapePoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    ShapePoint.prototype.constructor = ShapePoint;\n\n    // Export\n    scope.ShapePoint = ShapePoint;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeRecognized (obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                var primitive;\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        primitive = new scope.ShapeLine(obj.primitives[i]);\n                        break;\n                    case 'ellipse':\n                        primitive = new scope.ShapeEllipse(obj.primitives[i]);\n                        break;\n                }\n                this.primitives.push(primitive);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {MyScript.AbstractDecoratedShape[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    /**\n     * Get shape document\n     *\n     * @method getShapeDocument\n     * @returns {MyScript.ShapeDocument}\n     */\n    ShapeResult.prototype.getShapeDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeScratchOut (obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} obj\n     * @constructor\n     */\n    function ShapeSegment (obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                var candidate;\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        candidate = new scope.ShapeErased(obj.candidates[i]);\n                        break;\n                    case 'scratchOut':\n                        candidate = new scope.ShapeScratchOut(obj.candidates[i]);\n                        break;\n                    case 'recognizedShape':\n                        candidate = new scope.ShapeRecognized(obj.candidates[i]);\n                        break;\n                    default:\n                        candidate = new scope.ShapeNotRecognized(obj.candidates[i]);\n                        break;\n                }\n                this.candidates.push(candidate);\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIndex\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIndex = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MyScript.ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MyScript.ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        return this.candidates[this.selectedCandidateIndex];\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathNode (obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathNonTerminalNode (obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        switch (obj.candidates[i].name) {\n                            case 'term':\n                                this.candidates.push(new scope.MathTermNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'sqrtTerm':\n                                this.candidates.push(new scope.MathSqrtNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'vectorTerm':\n                                this.candidates.push(new scope.MathVectorNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'system':\n                                this.candidates.push(new scope.MathSystemNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'exponentiable':\n                                this.candidates.push(new scope.MathExponentiableNonTerminalNode(obj.candidates[i]));\n                                break;\n                            case 'expression':\n                                this.candidates.push(new scope.MathExpressionNonTerminalNode(obj.candidates[i]));\n                                break;\n                        }\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        switch (obj.candidates[i].name) {\n                            case 'identity':\n                                this.candidates.push(new scope.MathIdentityRuleNode(obj.candidates[i]));\n                                break;\n                            case 'horizontal pair':\n                                this.candidates.push(new scope.MathHorizontalPairRuleNode(obj.candidates[i]));\n                                break;\n                            case 'fence':\n                                this.candidates.push(new scope.MathFenceRuleNode(obj.candidates[i]));\n                                break;\n                            case 'fraction':\n                                this.candidates.push(new scope.MathFractionRuleNode(obj.candidates[i]));\n                                break;\n                            case 'sqrt':\n                                this.candidates.push(new scope.MathSqrtRuleNode(obj.candidates[i]));\n                                break;\n                            case 'subscript':\n                                this.candidates.push(new scope.MathSubscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'superscript':\n                                this.candidates.push(new scope.MathSuperscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'subsuperscript':\n                                this.candidates.push(new scope.MathSubSuperscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'underscript':\n                                this.candidates.push(new scope.MathUnderscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'overscript':\n                                this.candidates.push(new scope.MathOverscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'underoverscript':\n                                this.candidates.push(new scope.MathUnderOverscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'presuperscript':\n                                this.candidates.push(new scope.MathPreSuperscriptRuleNode(obj.candidates[i]));\n                                break;\n                            case 'vertical pair':\n                                this.candidates.push(new scope.MathVerticalPairRuleNode(obj.candidates[i]));\n                                break;\n                            case 'left fence':\n                                this.candidates.push(new scope.MathLeftFenceRuleNode(obj.candidates[i]));\n                                break;\n                        }\n                        break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MyScript.MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MyScript.MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        return this.candidates[this.selectedCandidate];\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {MyScript.Rectangle}\n     */\n    MathNonTerminalNode.prototype.getBoundingBox = function () {\n        return this.getSelectedCandidate() ? this.getSelectedCandidate().getBoundingBox() : undefined;\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathResultElement (obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);","(function (scope) {\n\t'use strict';\n\t/**\n\t * Math rule node\n\t *\n\t * @class MathRuleNode\n\t * @extends MathNode\n\t * @param {Object} obj\n\t * @constructor\n\t */\n\tfunction MathRuleNode (obj) {\n\t\tscope.MathNode.call(this, obj);\n\t\tthis.children = [];\n\t\tif (obj) {\n\t\t\tthis.name = obj.name;\n\t\t\tfor (var i in obj.children) {\n\t\t\t\tswitch (obj.children[i].type) {\n\t\t\t\t\tcase 'nonTerminalNode':\n\t\t\t\t\t\tswitch (obj.children[i].name) {\n\t\t\t\t\t\t\tcase 'term':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathTermNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'sqrtTerm':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSqrtNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'vectorTerm':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathVectorNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'system':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSystemNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'exponentiable':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathExponentiableNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathExpressionNonTerminalNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'terminalNode':\n\t\t\t\t\t\tthis.children.push(new scope.MathTerminalNode(obj.children[i]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'rule':\n\t\t\t\t\t\tswitch (obj.children[i].name) {\n\t\t\t\t\t\t\tcase 'identity':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathIdentityRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'horizontal pair':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathHorizontalPairRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'fence':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathFenceRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'fraction':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathFractionRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'sqrt':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSqrtRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'subscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSubscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'superscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSuperscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'subsuperscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathSubSuperscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'underscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathUnderscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'overscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathOverscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'underoverscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathUnderOverscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'presuperscript':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathPreSuperscriptRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'vertical pair':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathVerticalPairRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'left fence':\n\t\t\t\t\t\t\t\tthis.children.push(new scope.MathLeftFenceRuleNode(obj.children[i]));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Inheritance property\n\t */\n\tMathRuleNode.prototype = new scope.MathNode();\n\n\t/**\n\t * Constructor property\n\t */\n\tMathRuleNode.prototype.constructor = MathRuleNode;\n\n\t/**\n\t * Get name\n\t *\n\t * @method getName\n\t * @returns {String}\n\t */\n\tMathRuleNode.prototype.getName = function () {\n\t\treturn this.name;\n\t};\n\n\t/**\n\t * Get children\n\t *\n\t * @method getChildren\n\t * @returns {MyScript.MathNode[]}\n\t */\n\tMathRuleNode.prototype.getChildren = function () {\n\t\treturn this.children;\n\t};\n\n\t// Export\n\tscope.MathRuleNode = MathRuleNode;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathDocument (obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(obj.results[i]));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MathSymbolTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MyScript.MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathInkRange (obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathLaTexResultElement (obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathMathMLResultElement (obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    /**\n     * Get math document\n     *\n     * @method getMathDocument\n     * @returns {MyScript.MathDocument}\n     */\n    MathResult.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathScratchOut (obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MyScript.MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSymbolTreeResultElement (obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            switch (obj.root.type) {\n                case 'nonTerminalNode':\n                    switch (obj.root.name) {\n                        case 'term':\n                            this.root = new scope.MathTermNonTerminalNode(obj.root);\n                            break;\n                        case 'sqrtTerm':\n                            this.root = new scope.MathSqrtNonTerminalNode(obj.root);\n                            break;\n                        case 'vectorTerm':\n                            this.root = new scope.MathVectorNonTerminalNode(obj.root);\n                            break;\n                        case 'system':\n                            this.root = new scope.MathSystemNonTerminalNode(obj.root);\n                            break;\n                        case 'exponentiable':\n                            this.root = new scope.MathExponentiableNonTerminalNode(obj.root);\n                            break;\n                        case 'expression':\n                            this.root = new scope.MathExpressionNonTerminalNode(obj.root);\n                            break;\n                    }\n                    break;\n                case 'terminalNode':\n                    this.root = new scope.MathTerminalNode(obj.root);\n                    break;\n                case 'rule':\n                    switch (obj.root.name) {\n                        case 'identity':\n                            this.root = new scope.MathIdentityRuleNode(obj.root);\n                            break;\n                        case 'horizontal pair':\n                            this.root = new scope.MathHorizontalPairRuleNode(obj.root);\n                            break;\n                        case 'fence':\n                            this.root = new scope.MathFenceRuleNode(obj.root);\n                            break;\n                        case 'fraction':\n                            this.root = new scope.MathFractionRuleNode(obj.root);\n                            break;\n                        case 'sqrt':\n                            this.root = new scope.MathSqrtRuleNode(obj.root);\n                            break;\n                        case 'subscript':\n                            this.root = new scope.MathSubscriptRuleNode(obj.root);\n                            break;\n                        case 'superscript':\n                            this.root = new scope.MathSuperscriptRuleNode(obj.root);\n                            break;\n                        case 'subsuperscript':\n                            this.root = new scope.MathSubSuperscriptRuleNode(obj.root);\n                            break;\n                        case 'underscript':\n                            this.root = new scope.MathUnderscriptRuleNode(obj.root);\n                            break;\n                        case 'overscript':\n                            this.root = new scope.MathOverscriptRuleNode(obj.root);\n                            break;\n                        case 'underoverscript':\n                            this.root = new scope.MathUnderOverscriptRuleNode(obj.root);\n                            break;\n                        case 'presuperscript':\n                            this.root = new scope.MathPreSuperscriptRuleNode(obj.root);\n                            break;\n                        case 'vertical pair':\n                            this.root = new scope.MathVerticalPairRuleNode(obj.root);\n                            break;\n                        case 'left fence':\n                            this.root = new scope.MathLeftFenceRuleNode(obj.root);\n                            break;\n                    }\n                    break;\n            }\n            this.value = JSON.stringify(obj.root, null, '  ');\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MyScript.MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathTerminalNode (obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MyScript.MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        return this.candidates[this.selectedCandidate];\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathTerminalNodeCandidate (obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math fence rule node\n     *\n     * @class MathFenceRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathFenceRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathFenceRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathFenceRuleNode.prototype.constructor = MathFenceRuleNode;\n\n    // Export\n    scope.MathFenceRuleNode = MathFenceRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math fraction rule node\n     *\n     * @class MathFractionRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathFractionRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathFractionRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathFractionRuleNode.prototype.constructor = MathFractionRuleNode;\n\n    // Export\n    scope.MathFractionRuleNode = MathFractionRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math horizontal pair rule node\n     *\n     * @class MathHorizontalPairRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathHorizontalPairRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathHorizontalPairRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathHorizontalPairRuleNode.prototype.constructor = MathHorizontalPairRuleNode;\n\n    // Export\n    scope.MathHorizontalPairRuleNode = MathHorizontalPairRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math identity rule node\n     *\n     * @class MathIdentityRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathIdentityRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathIdentityRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathIdentityRuleNode.prototype.constructor = MathIdentityRuleNode;\n\n    // Export\n    scope.MathIdentityRuleNode = MathIdentityRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math rule node\n     *\n     * @class MathLeftFenceRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathLeftFenceRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLeftFenceRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathLeftFenceRuleNode.prototype.constructor = MathLeftFenceRuleNode;\n\n    // Export\n    scope.MathLeftFenceRuleNode = MathLeftFenceRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math overscript rule node\n     *\n     * @class MathOverscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathOverscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathOverscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathOverscriptRuleNode.prototype.constructor = MathOverscriptRuleNode;\n\n    // Export\n    scope.MathOverscriptRuleNode = MathOverscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math pre-superscript rule node\n     *\n     * @class MathPreSuperscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathPreSuperscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathPreSuperscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathPreSuperscriptRuleNode.prototype.constructor = MathPreSuperscriptRuleNode;\n\n    // Export\n    scope.MathPreSuperscriptRuleNode = MathPreSuperscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math sqrt rule node\n     *\n     * @class MathSqrtRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSqrtRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSqrtRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathSqrtRuleNode.prototype.constructor = MathSqrtRuleNode;\n\n    // Export\n    scope.MathSqrtRuleNode = MathSqrtRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math subscript rule node\n     *\n     * @class MathSubscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSubscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSubscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathSubscriptRuleNode.prototype.constructor = MathSubscriptRuleNode;\n\n    // Export\n    scope.MathSubscriptRuleNode = MathSubscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math sub-superscript rule node\n     *\n     * @class MathSubSuperscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSubSuperscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSubSuperscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathSubSuperscriptRuleNode.prototype.constructor = MathSubSuperscriptRuleNode;\n\n    // Export\n    scope.MathSubSuperscriptRuleNode = MathSubSuperscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math superscript rule node\n     *\n     * @class MathSuperscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSuperscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSuperscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathSuperscriptRuleNode.prototype.constructor = MathSuperscriptRuleNode;\n\n    // Export\n    scope.MathSuperscriptRuleNode = MathSuperscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math under-overscript rule node\n     *\n     * @class MathUnderOverscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathUnderOverscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathUnderOverscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathUnderOverscriptRuleNode.prototype.constructor = MathUnderOverscriptRuleNode;\n\n    // Export\n    scope.MathUnderOverscriptRuleNode = MathUnderOverscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math underscript rule node\n     *\n     * @class MathUnderscriptRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathUnderscriptRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathUnderscriptRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathUnderscriptRuleNode.prototype.constructor = MathUnderscriptRuleNode;\n\n    // Export\n    scope.MathUnderscriptRuleNode = MathUnderscriptRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math vertical pair rule node\n     *\n     * @class MathVerticalPairRuleNode\n     * @extends MathRuleNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathVerticalPairRuleNode (obj) {\n        scope.MathRuleNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathVerticalPairRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathVerticalPairRuleNode.prototype.constructor = MathVerticalPairRuleNode;\n\n    // Export\n    scope.MathVerticalPairRuleNode = MathVerticalPairRuleNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math exponentiable non-terminal node\n     *\n     * @class MathExponentiableNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathExponentiableNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathExponentiableNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathExponentiableNonTerminalNode.prototype.constructor = MathExponentiableNonTerminalNode;\n\n    // Export\n    scope.MathExponentiableNonTerminalNode = MathExponentiableNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math expression non-terminal node\n     *\n     * @class MathExpressionNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathExpressionNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathExpressionNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathExpressionNonTerminalNode.prototype.constructor = MathExpressionNonTerminalNode;\n\n    // Export\n    scope.MathExpressionNonTerminalNode = MathExpressionNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math term non-terminal node\n     *\n     * @class MathSqrtNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSqrtNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSqrtNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathSqrtNonTerminalNode.prototype.constructor = MathSqrtNonTerminalNode;\n\n    // Export\n    scope.MathSqrtNonTerminalNode = MathSqrtNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math term non-terminal node\n     *\n     * @class MathVectorNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathVectorNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathVectorNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathVectorNonTerminalNode.prototype.constructor = MathVectorNonTerminalNode;\n\n    // Export\n    scope.MathVectorNonTerminalNode = MathVectorNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math term non-terminal node\n     *\n     * @class MathSystemNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathSystemNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSystemNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathSystemNonTerminalNode.prototype.constructor = MathSystemNonTerminalNode;\n\n    // Export\n    scope.MathSystemNonTerminalNode = MathSystemNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Math term non-terminal node\n     *\n     * @class MathTermNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} obj\n     * @constructor\n     */\n    function MathTermNonTerminalNode (obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTermNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathTermNonTerminalNode.prototype.constructor = MathTermNonTerminalNode;\n\n    // Export\n    scope.MathTermNonTerminalNode = MathTermNonTerminalNode;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicElement (obj) {\n        this.inputRanges = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MyScript.MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicResultElement (obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicAccidental (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicAnnotation (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicArpeggiate (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicBar (obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MyScript.MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicBeam (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicChord (obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MyScript.MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MyScript.MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MyScript.MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MyScript.MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MyScript.MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MyScript.MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MyScript.MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music clef\n     *\n     * @class MusicClef\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicClef (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.line = obj.line;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicDecoration (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicDocument (obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MyScript.MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MyScript.MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicDots (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicHead (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicInputRange (obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicKeySignature (obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MyScript.MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MyScript.MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicKeySignatureData (obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @mathod getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicLedgerLine (obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicNote (obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MyScript.MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MyScript.MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MyScript.MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MyScript.MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MyScript.MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MyScript.MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MyScript.MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MyScript.MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getTopTie\n     * @returns {MyScript.MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MyScript.MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MyScript.MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicPart (obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                }\n                this.elements.push(obj.elements[i]);\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MyScript.AbstractMusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicPitchData (obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicRest (obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MyScript.MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MyScript.MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MyScript.MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    /**\n     * Get music document\n     *\n     * @method getMusicDocument\n     * @returns {MyScript.MusicDocument}\n     */\n    MusicResult.prototype.getMusicDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicScore (obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MyScript.MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicScoreTreeResultElement (obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MyScript.MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicScratchOut (obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MyScript.MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MyScript.MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicSlur (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicStem (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicTie (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends AbstractMusicElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicTimeSignature (obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MyScript.MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MyScript.MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function MusicXMLResultElement (obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerElement (obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerCell (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerCellData (obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.AnalyzerPointData(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {AnalyzerPointData}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {MyScript.Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerDocument (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {MyScript.AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {MyScript.ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {MyScript.AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {MyScript.AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerElementReference (obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerGroup (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {MyScript.AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerInkRange (obj) {\n        if (obj) {\n            this.firstPoint = new scope.AnalyzerPointData(obj.firstPoint);\n            this.lastPoint = new scope.AnalyzerPointData(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerLine (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MyScript.AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerLineData (obj) {\n        if (obj) {\n            this.p1 = new scope.AnalyzerPointData(obj.p1);\n            this.p2 = new scope.AnalyzerPointData(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer point data\n     *\n     * @class AnalyzerPointData\n     * @extends MyScript.Point\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerPointData (obj) {\n        scope.Point.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerPointData.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerPointData.prototype.constructor = AnalyzerPointData;\n\n    // Export\n    scope.AnalyzerPointData = AnalyzerPointData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke (obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerResult (obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    /**\n     * Get analyzer document\n     *\n     * @method getAnalyzerDocument\n     * @returns {MyScript.AnalyzerDocument}\n     */\n    AnalyzerResult.prototype.getAnalyzerDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerStrokeType (obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {MyScript.AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerTable (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MyScript.AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {MyScript.AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {MyScript.AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerTableData (obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerTextLine (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MyScript.AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {MyScript.TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MyScript.AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {MyScript.AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerTextLineData (obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.AnalyzerPointData(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {MyScript.AnalyzerPointData}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {MyScript.Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if(this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerUnderline (obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} obj\n     * @constructor\n     */\n    function AnalyzerUnderlineData (obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface () {\n    }\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} obj\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {QReturnValue}\n     */\n    NetworkInterface.prototype.xhr = function (type, url, data) {\n\n        var deferred = Q.defer();\n\n        function onStateChange () {\n            if (request.readyState === 4) {\n                if (request.status >= 200 && request.status < 300) {\n                    deferred.resolve(NetworkInterface.parse(request));\n                } else {\n                    deferred.reject(NetworkInterface.parse(request));\n                }\n            }\n        }\n\n        function onLoad () {\n            if (request.status >= 200 && request.status < 300) {\n                deferred.resolve(NetworkInterface.parse(request));\n            } else {\n                deferred.reject(new Error('Status code was ' + request.status));\n            }\n        }\n\n        function onError () {\n            deferred.reject(new Error('Can\\'t XHR ' + JSON.stringify(url)));\n        }\n\n        function onProgress (event) {\n            deferred.notify(event.loaded / event.total);\n        }\n\n        var request = new XMLHttpRequest('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Accept', 'application/json');\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        request.onload = onLoad;\n        request.onerror = onError;\n        request.onprogress = onProgress;\n        request.onreadystatechange = onStateChange;\n        request.send(NetworkInterface.transformRequest(data));\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {QReturnValue}\n     */\n    NetworkInterface.prototype.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return this.xhr('GET', src);\n    };\n\n    ///**\n    // * Put request\n    // *\n    // * @method put\n    // * @param {String} src\n    // * @param {Object} data\n    // * @returns {QReturnValue}\n    // */\n    //NetworkInterface.prototype.put = function (url, data) {\n    //    return this.xhr('PUT', url, data);\n    //};\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} src\n     * @param {Object} data\n     * @returns {QReturnValue}\n     */\n    NetworkInterface.prototype.post = function (url, data) {\n        return this.xhr('POST', url, data);\n    };\n\n    ///**\n    // * Delete request\n    // *\n    // * @method delete\n    // * @param {String} src\n    // * @param {Object} data\n    // * @returns {QReturnValue}\n    // */\n    //NetworkInterface.prototype.delete = function (url, data) {\n    //    return this.xhr('DELETE', url, data);\n    //};\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function AbstractRecognizer (url) {\n        this.url = url;\n        this.http = new scope.NetworkInterface();\n    }\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {QReturnValue}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return this.http.get(this.url + '/text/languages.json', data).then(\n            function success (response) {\n                return response.result;\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @method computeHmac\n     * @param {String} applicationKey\n     * @param {String} data\n     * @param {String} hmacKey\n     */\n\n    AbstractRecognizer.prototype.computeHmac = function (applicationKey, data, hmacKey) {\n        var jsonInput = (typeof data === 'object') ? JSON.stringify(data) : data;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    /**\n     * Authenticate the websocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        if (!this.socket) {\n            return;\n        }\n\n        var hmacMessage = {\n            type: 'hmac',\n            applicationKey: applicationKey,\n            hmac: this.computeHmac(applicationKey, challenge, hmacKey),\n            challenge: challenge\n        };\n        this.socket.send(JSON.stringify(hmacMessage));\n    };\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function TextRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {TextParameter} parameters\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, inputUnits, hmacKey) {\n\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(parameters);\n        input.setInputUnits(inputUnits);\n\n        var data = new scope.TextRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setTextRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/text/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.TextResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Text websocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function TextWSRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n        this.socket = new WebSocket(url + '/text');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Set websocket open callback\n     *\n     * @method setOpenCallback\n     * @param callback\n     */\n    TextWSRecognizer.prototype.setOpenCallback = function (callback) {\n        this.socket.onopen = callback;\n    };\n\n    /**\n     * Set websocket close callback\n     *\n     * @method setCloseCallback\n     * @param callback\n     */\n    TextWSRecognizer.prototype.setCloseCallback = function (callback) {\n        this.socket.onclose = callback;\n    };\n\n    /**\n     * Set websocket error callback\n     *\n     * @method setErrorCallback\n     * @param callback\n     */\n    TextWSRecognizer.prototype.setErrorCallback = function (callback) {\n        this.socket.onerror = callback;\n    };\n\n    /**\n     * Set websocket data callback\n     *\n     * @method setDataCallback\n     * @param callback\n     */\n    TextWSRecognizer.prototype.setDataCallback = function (callback) {\n        this.socket.onmessage = callback;\n    };\n\n    /**\n     * Initialize the websocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    TextWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        if (!this.socket) {\n            return;\n        }\n\n        var initMessage = {\n            type: 'applicationKey',\n            applicationKey: applicationKey\n        };\n\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(initMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Start the websocket session\n     *\n     * @method startWSRecognition\n     * @param {TextParameter} parameters\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (parameters, inputUnits) {\n        if (!this.socket) {\n            return;\n        }\n\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(parameters);\n        input.setInputUnits(inputUnits);\n\n        input.type = 'start';\n\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(input)));\n        return deferred.promise;\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        if (!this.socket) {\n            return;\n        }\n\n        var continueMessage = {\n            type: 'continue',\n            inputUnits: inputUnits,\n            instanceId: instanceId\n        };\n\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(continueMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Reset the websocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    TextWSRecognizer.prototype.resetWSRecognition = function () {\n        if (!this.socket) {\n            return;\n        }\n\n        var resetMessage = {\n            type: 'reset'\n        };\n\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(resetMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Delete the websocket instance\n     *\n     * @method stopWSRecognition\n     */\n    TextWSRecognizer.prototype.stopWSRecognition = function () {\n        this.socket = undefined;\n    };\n\n    /**\n     * Check if the socket is closed\n     *\n     * @method isClosed\n     * @returns {Boolean}\n     */\n    TextWSRecognizer.prototype.isClosed = function () {\n        return (!this.socket)? true: false;\n    };\n\n    /**\n     * Create a new socket\n     *\n     * @method restartWSRecognition\n     */\n    TextWSRecognizer.prototype.restartWSRecognition = function () {\n        var deferred = Q.defer();\n        deferred.resolve(this.socket = new WebSocket(this.url + '/text'));\n        return deferred.promise;\n    };\n\n    /**\n     * @callback TextWSRecognizer~dataCallback\n     * @callback TextWSRecognizer~errorCallback\n     * @callback TextWSRecognizer~closeCallback\n     * @callback TextWSRecognizer~openCallback\n     */\n\n        // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function ShapeRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {ShapeParameter} parameters\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, components, hmacKey) {\n\n        var input = new scope.ShapeRecognitionInput();\n        input.setComponents(components);\n        input.setDoBeautification(parameters.hasBeautification());\n        input.setRejectDetectionSensitivity(parameters.getRejectDetectionSensitivity());\n\n        var data = new scope.ShapeRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setShapeRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/shape/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.ShapeResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {QReturnValue}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return this.http.post(this.url + '/shape/clearSessionId.json', data).then(\n            function success (response) {\n                return response;\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function MathRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {MathParameter} parameters\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, components, hmacKey) {\n        var input = new scope.MathRecognitionInput();\n        input.setComponents(components);\n        input.setResultTypes(parameters.getResultTypes());\n        input.setIsColumnar(parameters.getIsColumnar());\n        input.setScratchOutDetectionSensitivity(parameters.getScratchOutDetectionSensitivity());\n        input.setUserResources(parameters.getUserResources());\n\n        var data = new scope.MathRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setMathRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/math/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.MathResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math websocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function MathWSRecognizer(url) {\n        scope.AbstractRecognizer.call(this, url);\n        this.socket = new WebSocket(url + '/math');\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Set websocket open callback\n     *\n     * @method setOpenCallback\n     * @param callback\n     */\n    MathWSRecognizer.prototype.setOpenCallback = function (callback) {\n        this.socket.onopen = callback;\n    };\n\n    /**\n     * Set websocket close callback\n     *\n     * @method setCloseCallback\n     * @param callback\n     */\n    MathWSRecognizer.prototype.setCloseCallback = function (callback) {\n        this.socket.onclose = callback;\n    };\n\n    /**\n     * Set websocket error callback\n     *\n     * @method setErrorCallback\n     * @param callback\n     */\n    MathWSRecognizer.prototype.setErrorCallback = function (callback) {\n        this.socket.onerror = callback;\n    };\n\n    /**\n     * Set websocket data callback\n     *\n     * @method setDataCallback\n     * @param callback\n     */\n    MathWSRecognizer.prototype.setDataCallback = function (callback) {\n        this.socket.onmessage = callback;\n    };\n\n    /**\n     * Initialize the websocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    MathWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        if (!this.socket) {\n            return;\n        }\n\n        var initMessage = {\n            type: 'applicationKey',\n            applicationKey: applicationKey\n        };\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(initMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Start the websocket session\n     *\n     * @method startWSRecognition\n     * @param {MathParameter} parameters\n     * @param {MathInputUnit[]} components\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (parameters, components) {\n        if (!this.socket) {\n            return;\n        }\n        var data = {\n            type: 'start',\n            components: components,\n            parameters: parameters\n        };\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(data)));\n        return deferred.promise;\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {MathInputUnit[]} components\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (parameters, components, instanceId) {\n        if (!this.socket) {\n            return;\n        }\n\n        var continueMessage = {\n            type: 'continue',\n            components: components,\n            resultTypes: parameters.getResultTypes(),\n            instanceId: instanceId\n        };\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(continueMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Reset the websocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    MathWSRecognizer.prototype.resetWSRecognition = function () {\n        if (!this.socket) {\n            return;\n        }\n\n        var resetMessage = {\n            type: 'reset'\n        };\n        var deferred = Q.defer();\n        deferred.resolve(this.socket.send(JSON.stringify(resetMessage)));\n        return deferred.promise;\n    };\n\n    /**\n     * Delete the websocket instance\n     *\n     * @method stopWSRecognition\n     */\n    MathWSRecognizer.prototype.stopWSRecognition = function () {\n        this.socket = undefined;\n    };\n\n    /**\n     * Check if the socket is closed\n     *\n     * @method isClosed\n     * @returns {Boolean}\n     */\n    MathWSRecognizer.prototype.isClosed = function () {\n        return (!this.socket) ? true : false;\n    };\n\n    /**\n     * Create a new socket\n     *\n     * @method restartWSRecognition\n     */\n    MathWSRecognizer.prototype.restartWSRecognition = function () {\n        var deferred = Q.defer();\n        deferred.resolve(this.socket = new WebSocket(this.url + '/math'));\n        return deferred.promise;\n    };\n\n    /**\n     * @callback MathWSRecognizer~dataCallback\n     * @callback MathWSRecognizer~errorCallback\n     * @callback MathWSRecognizer~closeCallback\n     * @callback MathWSRecognizer~openCallback\n     */\n\n        // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function MusicRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {MusicParameter} parameters\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, components, hmacKey) {\n\n        var input = new scope.MusicRecognitionInput();\n        input.setComponents(components);\n        input.setStaff(parameters.getStaff());\n        input.setDivisions(parameters.getDivisions());\n        input.setResultTypes(parameters.getResultTypes());\n        input.setScratchOutDetectionSensitivity(parameters.getScratchOutDetectionSensitivity());\n        input.setUserResources(parameters.getUserResources());\n\n        var data = new scope.MusicRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setMusicRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/music/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.MusicResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} url\n     * @constructor\n     */\n    function AnalyzerRecognizer (url) {\n        scope.AbstractRecognizer.call(this, url);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {AnalyzerParameter} parameters\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @returns {QReturnValue}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, parameters, instanceId, components, hmacKey) {\n\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setComponents(components);\n        input.setParameters(parameters);\n\n        var data = new scope.AnalyzerRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setAnalyzerRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n\n        return this.http.post(this.url + '/analyzer/doSimpleRecognition.json', data).then(\n            function success (response) {\n                return new scope.AnalyzerResult(response);\n            },\n            function error (response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Parameters used for both input and output canvas draw\n     *\n     * @class RenderingParameters\n     * @param {String} color\n     * @param {String} rectColor\n     * @param {String} font\n     * @param {String} decoration\n     * @param {Number} width\n     * @param {String} pressureType\n     * @param {String} alpha\n     * @param {Boolean} doFadeOutLoop\n     * @param {Boolean} showBoundingBoxes\n     * @constructor\n     */\n    function RenderingParameters (color, rectColor, font, decoration, width, pressureType, alpha, doFadeOutLoop, showBoundingBoxes) {\n        this.color = color || 'black';\n        this.rectColor = rectColor || 'rgba(0, 0, 0, 0.2)';\n        this.font = font || 'Times New Roman';\n        this.decoration = decoration || '';\n        this.width = width || 4;\n        this.pressureType = pressureType || 'SIMULATED';\n        this.alpha = alpha || '1.0';\n        this.doFadeOutLoop = doFadeOutLoop || false;\n        this.showBoundingBoxes = showBoundingBoxes || false;\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    RenderingParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    RenderingParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    RenderingParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    RenderingParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    RenderingParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    RenderingParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    RenderingParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    RenderingParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    RenderingParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    RenderingParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get the pressure renderer parameter\n     *\n     * @method getPressureType\n     * @returns {String} The pressure type\n     */\n    RenderingParameters.prototype.getPressureType = function () {\n        return this.pressureType;\n    };\n\n    /**\n     * Set the pressure renderer parameter\n     *\n     * @method setPressureType\n     * @param {String} pressureType\n     */\n    RenderingParameters.prototype.setPressureType = function (pressureType) {\n        this.pressureType = pressureType;\n    };\n\n    /**\n     * Get the alpha renderer parameter\n     *\n     * @method getAlpha\n     * @returns {String} The alpha\n     */\n    RenderingParameters.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * Set the alpha renderer parameter\n     *\n     * @method setAlpha\n     * @param {String} alpha\n     */\n    RenderingParameters.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    /**\n     * Get fade out ink fore HTML5 canvas\n     *\n     * @method getDoFadeOutLoop\n     * @returns {Boolean}\n     */\n    RenderingParameters.prototype.getDoFadeOutLoop = function () {\n        return this.doFadeOutLoop;\n    };\n\n    /**\n     * Set fade out ink fore HTML5 canvas\n     *\n     * @method setDoFadeOutLoop\n     * @param {Boolean} doFadeOutLoop\n     */\n    RenderingParameters.prototype.setDoFadeOutLoop = function (doFadeOutLoop) {\n        this.doFadeOutLoop = doFadeOutLoop;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    RenderingParameters.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    RenderingParameters.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    // Export\n    scope.RenderingParameters = RenderingParameters;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @constructor\n     */\n    function AbstractRenderer () {\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Draw ink strokes on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {Object} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (strokes, recognitionResult, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawComponents = function (components, parameters, context) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.Stroke) {\n                this.drawStroke(component, parameters, context);\n            }\n        }\n    };\n\n    /**\n     * Record the beginning of drawing\n     *\n     * @method drawStart\n     * @param {Object} event\n     * @param {Number} x\n     * @param {Number} y\n     */\n    AbstractRenderer.prototype.drawStart = function (event, x, y) {\n        this.points.length = 0;\n        this.drawing = true;\n        this.points.push({\n            x: x,\n            y: y,\n            pressure: 0.5,\n            distance: 0.0,\n            length: 0.0,\n            ux: 0.0,\n            uy: 0.0,\n            x1: 0.0,\n            x2: 0.0,\n            y1: 0.0,\n            y2: 0.0\n        });\n        event.preventDefault();\n    };\n\n    /**\n     * Record the drawing\n     *\n     * @method drawContinue\n     * @param {Object} event\n     * @param {Number} x\n     * @param {Number} y\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawContinue = function (event, x, y, parameters, context) {\n        if (this.drawing) {\n            var point = {\n                x: x,\n                y: y,\n                pressure: 0.5,\n                distance: 0.0,\n                length: 0.0,\n                ux: 0.0,\n                uy: 0.0,\n                x1: 0.0,\n                x2: 0.0,\n                y1: 0.0,\n                y2: 0.0\n            };\n            this.points.push(point);\n\n            if (this.points.length > 1) {\n                var previous = this.points[this.points.length - 2];\n\n                if (this.points.length === 2) {\n                    this.drawQuadratricStart(previous, point, parameters, context);\n                } else {\n                    var third = this.points[this.points.length - 3];\n                    this.drawQuadratricContinue(third, previous, point, parameters, context);\n                }\n\n            }\n        }\n    };\n\n    /**\n     * Stop record of drawing\n     *\n     * @method drawEnd\n     * @param {Object} event\n     * @param {Number} x\n     * @param {Number} y\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawEnd = function (event, x, y, parameters, context) {\n        if (this.drawing) {\n            if (this.points.length === 1) {\n                this.drawPoint({\n                    x: x,\n                    y: y,\n                    pressure: 0.5,\n                    distance: 0.0,\n                    length: 0.0,\n                    ux: 0.0,\n                    uy: 0.0,\n                    x1: 0.0,\n                    x2: 0.0,\n                    y1: 0.0,\n                    y2: 0.0\n                }, parameters, context);\n            } else if (this.points.length > 1) {\n                var lastPoint = this.points[this.points.length - 1];\n                var point = this.points[this.points.length - 2];\n                this.drawQuadratricEnd(point, lastPoint, parameters, context);\n            }\n            this.drawing = false;\n            event.preventDefault();\n        }\n    };\n\n    /**\n     * Clear the context's canvas content to erase drawing strokes\n     *\n     * @method clear\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.clear = function (context) {\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n    };\n\n    /**\n     * Draw guidelines on the HTML5 canvas\n     *\n     * @method drawGuidelines\n     * @param {Number} horizontalSpacing\n     * @param {Number} verticalSpacing\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawGuidelines = function (horizontalSpacing, verticalSpacing, parameters, context) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.clearRect(0, 0, context.canvas.clientWidth, context.canvas.clientHeight);\n\n            if (verticalSpacing) {\n                for (var y = verticalSpacing; y < context.canvas.clientHeight - verticalSpacing; y += verticalSpacing) {\n                    context.beginPath();\n                    context.moveTo(horizontalSpacing, y);\n                    context.lineTo(context.canvas.clientWidth - horizontalSpacing, y);\n                    context.stroke();\n                }\n            }\n            if (horizontalSpacing) {\n                for (var x = horizontalSpacing; x < context.canvas.clientWidth - horizontalSpacing; x += horizontalSpacing) {\n                    context.beginPath();\n                    context.moveTo(x, verticalSpacing);\n                    context.lineTo(x, context.canvas.clientHeight - verticalSpacing);\n                    context.stroke();\n                }\n            }\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Trace line on context\n     *\n     * @method drawLineByCoordinates\n     * @param {Number} lX\n     * @param {Number} lY\n     * @param {Number} cX\n     * @param {Number} cY\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawLineByCoordinates = function (lX, lY, cX, cY, parameters, context) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            // line from\n            context.moveTo(lX, lY);\n            // to\n            context.lineTo(cX, cY);\n            // draw it\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @method drawLineByPoints\n     * @param {QuadraticPoint} firstPoint\n     * @param {QuadraticPoint} lastPoint\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawLineByPoints = function (firstPoint, lastPoint, parameters, context) {\n        this.drawLineByCoordinates(firstPoint.x, firstPoint.y, lastPoint.x, lastPoint.y, parameters, context);\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {MyScript.Rectangle} rectangle\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle, parameters, context) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getRectColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw strokes on context\n     *\n     * @method drawStrokes\n     * @param {Stroke[]} strokes\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes, parameters, context) {\n        for (var i in strokes) {\n            this.drawStroke(strokes[i], parameters, context);\n        }\n    };\n\n    /**\n     * Draw a stroke on context\n     *\n     * @method drawStroke\n     * @param {Object} stroke\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke, parameters, context) {\n        var strokePoints = [];\n        for (var j = 0; j < stroke.getLength(); j++) {\n            strokePoints.push(new scope.QuadraticPoint({\n                x: stroke.getX()[j],\n                y: stroke.getY()[j]\n            }));\n        }\n        if (stroke.getLength() === 1) {\n            this.drawPoint(strokePoints[0], parameters, context);\n            return;\n        }\n\n        for (var k = 0; k < stroke.getLength(); k++) {\n            if (k === 0) {\n                var p1 = strokePoints[0];\n                var p2 = strokePoints[1];\n                this.drawQuadratricStart(p1, p2, parameters, context);\n            } else if (k < stroke.getLength() - 1) {\n                var p3 = strokePoints[k - 1];\n                var p4 = strokePoints[k];\n                var p5 = strokePoints[k + 1];\n                this.drawQuadratricContinue(p3, p4, p5, parameters, context);\n            } else if (k > 1) {\n                var p6 = strokePoints[k - 1];\n                var p7 = strokePoints[k];\n                this.drawQuadratricEnd(p6, p7, parameters, context);\n            }\n        }\n    };\n    /**\n     * Draw point on context\n     *\n     * @method drawPoint\n     * @param {QuadraticPoint} point\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawPoint = function (point, parameters, context) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.arc(point.x, point.y, 0.5 * parameters.getWidth(), 0, 2 * Math.PI);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @method drawArrowHead\n     * @param {QuadraticPoint} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawArrowHead = function (headPoint, angle, length, parameters, context) {\n\n        var alpha = phi(angle + Math.PI - (Math.PI / 8)),\n            beta = phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.x, headPoint.y);\n            context.beginPath();\n            context.lineTo(headPoint.x + (length * Math.cos(alpha)), headPoint.y + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.x + (length * Math.cos(beta)), headPoint.y + (length * Math.sin(beta)));\n            context.lineTo(headPoint.x, headPoint.y);\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Get Strokes from inkRange\n     *\n     * @method extractStroke\n     * @param {Stroke[]} strokes\n     * @param {Object} inkRange\n     * @result {Stroke[]} List of strokes from inkRange\n     */\n    AbstractRenderer.prototype.extractStroke = function (strokes, inkRange) {\n        var result = [],\n            firstPointIndex = Math.floor(inkRange.getFirstPoint()),\n            lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n        for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n            var currentStroke = strokes[strokeIndex];\n            var currentStrokePointCount = currentStroke.x.length;\n\n            var newStroke = new scope.Stroke(), x = [], y = [];\n\n            for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                x.push(currentStroke.x[pointIndex]);\n                y.push(currentStroke.y[pointIndex]);\n            }\n\n            newStroke.setX(x);\n            newStroke.setY(y);\n            result.push(newStroke);\n        }\n        return result;\n    };\n\n    /**\n     * Draw a quadratic stroke on context\n     *\n     * @private\n     * @method drawQuadratricStart\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawQuadratricStart = function (p1, p2, parameters, context) {\n\n        computePoint(null, p1, parameters, true, false);\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            strokeFirstSegment(p1, p2, context);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Continue to draw a quadratic stroke on context\n     *\n     * @private\n     * @method drawQuadratricContinue\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {QuadraticPoint} p3\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawQuadratricContinue = function (p1, p2, p3, parameters, context) {\n\n        computePoint(p2, p3, parameters, false, false);\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            strokeSegment(p1, p2, p3, context);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Stop to draw a quadratic stroke\n     *\n     * @private\n     * @method drawQuadratricEnd\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AbstractRenderer.prototype.drawQuadratricEnd = function (p1, p2, parameters, context) {\n\n        computePoint(p1, p2, parameters, false, true);\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            strokeLastSegment(p1, p2, context);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Render the first stroke segment.\n     *\n     * @private\n     * @method strokeFirstSegment\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {Object} context\n     */\n    var strokeFirstSegment = function (p1, p2, context) {\n        // compute start points\n        var x11 = p1.x1,\n            y11 = p1.y1,\n            x12 = p1.x2,\n            y12 = p1.y2,\n        // compute end points\n            x21 = 0.5 * p1.x1 + p2.x1,\n            y21 = 0.5 * p1.y1 + p2.y1,\n            x22 = 0.5 * p1.x2 + p2.x2,\n            y22 = 0.5 * p1.y2 + p2.y2;\n\n        // stroke segment\n        context.moveTo(x11, y11);\n        context.lineTo(x21, y21);\n        context.lineTo(x22, y22);\n        context.lineTo(x12, y12);\n        context.lineTo(x11, y11);\n    };\n\n    /**\n     * Render a stroke segment\n     *\n     * @private\n     * @method strokeSegment\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {QuadraticPoint} p3\n     * @param {Object} context\n     */\n    var strokeSegment = function (p1, p2, p3, context) {\n        // compute start points\n        var x11 = 0.5 * (p1.x1 + p2.x1),\n            y11 = 0.5 * (p1.y1 + p2.y1),\n            x12 = 0.5 * (p1.x2 + p2.x2),\n            y12 = 0.5 * (p1.y2 + p2.y2),\n        // compute end points\n            x21 = 0.5 * (p2.x1 + p3.x1),\n            y21 = 0.5 * (p2.y1 + p3.y1),\n            x22 = 0.5 * (p2.x2 + p3.x2),\n            y22 = 0.5 * (p2.y2 + p3.y2);\n        // stroke segment\n        context.moveTo(x11, y11);\n        context.quadraticCurveTo(p2.x1, p2.y1, x21, y21);\n        context.lineTo(x22, y22);\n        context.quadraticCurveTo(p2.x2, p2.y2, x12, y12);\n        context.lineTo(x11, y11);\n    };\n\n    /**\n     * Render the last stroke segment\n     *\n     * @private\n     * @method strokeLastSegment\n     * @param {QuadraticPoint} p1\n     * @param {QuadraticPoint} p2\n     * @param {Object} context\n     */\n    var strokeLastSegment = function (p1, p2, context) {\n        // compute start points\n        var x11 = 0.5 * (p1.x1 + p2.x1),\n            y11 = 0.5 * (p1.y1 + p2.y1),\n            x12 = 0.5 * (p1.x2 + p2.x2),\n            y12 = 0.5 * (p1.y2 + p2.y2),\n        // compute end points\n            x21 = p2.x1,\n            y21 = p2.y1,\n            x22 = p2.x2,\n            y22 = p2.y2;\n        // stroke segment\n        context.moveTo(x11, y11);\n        context.lineTo(x21, y21);\n        context.lineTo(x22, y22);\n        context.lineTo(x12, y12);\n        context.lineTo(x11, y11);\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Compute all necessary point parameters to draw quadratics\n     *\n     * @private\n     * @method computePoint\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     * @param {RenderingParameters} parameters\n     * @param {Boolean} isFirst\n     * @param {Boolean} isLast\n     */\n    var computePoint = function (previous, point, parameters, isFirst, isLast) {\n\n        // compute distance from previous point\n        if (previous !== null) {\n            computeDistance(previous, point);\n            var strokeLength = previous.length + point.distance;\n            point.length = strokeLength;\n        }\n        // compute pressure\n        switch (parameters.pressureType) {\n            case 'SIMULATED':\n                computePressure(point, point.distance, point.length);\n                break;\n            case 'CONSTANT':\n                point.pressure = 1.0;\n                break;\n            case 'REAL':\n                // keep the current pressure\n                break;\n        }\n        computeLastControls(point, parameters);\n        // compute control points\n        if (previous !== null && !isLast) {\n            if (isFirst) {\n                computeFirstControls(previous, point, parameters);\n            }\n            if (isLast) {\n                computeLastControls(point, parameters);\n            } else {\n                computeControls(previous, point, parameters);\n            }\n        }\n    };\n\n    /**\n     * Compute distance and unit vector from the previous point.\n     *\n     * @private\n     * @method computeDistance\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     */\n    var computeDistance = function (previous, point) {\n        var dx = point.x - previous.x,\n            dy = point.y - previous.y,\n            d = Math.sqrt(dx * dx + dy * dy);\n\n        if (d !== 0) {\n            point.distance = d;\n            point.ux = dx / d;\n            point.uy = dy / d;\n        }\n    };\n\n    /**\n     * Compute simulated pressure of given point.\n     *\n     * @private\n     * @method computePressure\n     * @param {QuadraticPoint} point\n     * @param {Number} distance\n     * @param {Number} length\n     */\n    var computePressure = function (point, distance, length) {\n        var k, pressure;\n        if (distance < 10) {\n            k = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            k = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        } else {\n            k = 1.0;\n        }\n\n        pressure = k * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(point.distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        point.pressure = pressure;\n    };\n\n    /**\n     * Compute control points of the first point.\n     *\n     * @private\n     * @method computeFirstControls\n     * @param {QuadraticPoint} first First point of the list to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {RenderingParameters} parameters Pressure and pen width\n     */\n    var computeFirstControls = function (first, next, parameters) {\n        var r = 0.5 * parameters.getWidth() * first.pressure,\n            nx = -r * next.uy,\n            ny = r * next.ux;\n\n        first.x1 = first.x + nx;\n        first.y1 = first.y + ny;\n        first.x2 = first.x - nx;\n        first.y1 = first.y - ny;\n    };\n\n    /**\n     * Compute control points between two points.\n     *\n     * @private\n     * @method computeControls\n     * @param {QuadraticPoint} point Point to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {RenderingParameters} parameters Pressure and pen width\n     */\n    var computeControls = function (point, next, parameters) {\n        var ux = point.ux + next.ux,\n            uy = point.uy + next.uy,\n            u = Math.sqrt(ux * ux + uy * uy);\n\n        if (u !== 0) {\n            // compute control points\n            var r = 0.5 * parameters.getWidth() * point.pressure;\n            var nx = -r * uy / u;\n            var ny = r * ux / u;\n            point.x1 = point.x + nx;\n            point.y1 = point.y + ny;\n            point.x2 = point.x - nx;\n            point.y2 = point.y - ny;\n        } else {\n            // collapse control points\n            point.x1 = point.x;\n            point.y1 = point.y;\n            point.x2 = point.x;\n            point.y2 = point.y;\n        }\n    };\n\n    /**\n     * Compute control points of the last point.\n     *\n     * @private\n     * @method computeLastControls\n     * @param {QuadraticPoint} last Last point to be computed\n     * @param {RenderingParameters} parameters Pressure and pen width\n     */\n    var computeLastControls = function (last, parameters) {\n        var r = 0.5 * parameters.getWidth() * last.pressure,\n            nx = -r * last.uy,\n            ny = r * last.ux;\n\n        last.x1 = last.x + nx;\n        last.y1 = last.y + ny;\n        last.x2 = last.x - nx;\n        last.y2 = last.y - ny;\n    };\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @constructor\n     */\n    function TextRenderer () {\n        this.cloneStrokes = [];\n        this.strokesToRemove = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text strokes on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {TextDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        this.drawStrokes(strokes, parameters, context);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits, parameters, context) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents(), parameters, context);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractTextInputComponent[]} components\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    TextRenderer.prototype.drawComponents = function (components, parameters, context) {\n        scope.AbstractRenderer.prototype.drawComponents.call(this, components, parameters, context); // super\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.CharInputComponent) {\n                drawChar(component, parameters, context);\n            } else if (component instanceof scope.CharacterInputComponent) {\n                drawCharacter(component, parameters, context);\n            } else if (component instanceof scope.StringInputComponent) {\n                drawString(component, parameters, context);\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method drawChar\n     * @param {CharInputComponent} char\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawChar = function (char, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw character\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawCharacter = function (character, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method drawString\n     * @param {StringInputComponent} string\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawString = function (string, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @constructor\n     */\n    function ShapeRenderer () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape strokes on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {ShapeDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        this.drawShapes(strokes, recognitionResult.getSegments(), parameters, context);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {Object[]} components\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawComponents = function (components, parameters, context) {\n        scope.AbstractRenderer.prototype.drawComponents.call(this, components, parameters, context); // super\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.ShapeEllipse) {\n                this.drawShapeEllipse(component, parameters, context);\n            } else if (component instanceof scope.ShapeLine) {\n                this.drawShapeLine(component, parameters, context);\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {Stroke[]} strokes\n     * @param {ShapeSegment[]} shapes\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapes = function (strokes, shapes, parameters, context) {\n\n        for (var i in shapes) {\n            var segment = shapes[i];\n            var candidate = segment.getSelectedCandidate();\n\n            if (candidate) {\n                if (candidate instanceof scope.ShapeRecognized) {\n                    this.drawShapeRecognized(candidate, parameters, context);\n                } else if (candidate instanceof scope.ShapeNotRecognized) {\n                    this.drawShapeNotRecognized(strokes, segment.getInkRanges(), candidate, parameters, context);\n                } else {\n                    throw new Error('not implemented');\n                }\n            }\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapeRecognized = function (shapeRecognized, parameters, context) {\n\n        var primitives = shapeRecognized.getPrimitives();\n\n        for (var i in primitives) {\n            this.drawShapePrimitive(primitives[i], parameters, context);\n        }\n        if (parameters.getShowBoundingBoxes()) {\n            var rectangleList = [];\n\n            for (var j in primitives) {\n                // Primitive bounding rect\n                rectangleList.push(this.getPrimitiveBoundingBox(primitives[j]));\n            }\n            // Bounding rect of the entire shape\n            var boundingRect = scope.MathUtils.getBoundingRect(rectangleList);\n            this.drawRectangle(boundingRect, parameters, context);\n        }\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {ShapeInkRange[]} inkRanges\n     * @param {ShapeNotRecognized} shapeNotRecognized\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (strokes, inkRanges, shapeNotRecognized, parameters, context) {\n        for (var i in inkRanges) {\n            var extractedStrokes = this.extractStroke(strokes, inkRanges[i]);\n            this.drawStrokes(extractedStrokes, parameters, context);\n        }\n\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive, parameters, context) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            this.drawShapeEllipse(primitive, parameters, context);\n        } else if (primitive instanceof scope.ShapeLine) {\n            this.drawShapeLine(primitive, parameters, context);\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapeLine = function (shapeLine, parameters, context) {\n\n        this.drawLineByPoints(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), parameters, context);\n\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, parameters, context);\n        }\n\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, parameters, context);\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @method drawEllipseArc\n     * @param {ShapePoint} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     * @returns {Point[]}\n     */\n    ShapeRenderer.prototype.drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, parameters, context) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push({x: x, y: y});\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    ShapeRenderer.prototype.drawShapeEllipse = function (shapeEllipse, parameters, context) {\n\n        var points = this.drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            parameters, context);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, parameters, context);\n        }\n\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, parameters, context);\n        }\n    };\n\n    /**\n     * Get the bounding box of primitive\n     *\n     * @method getPrimitiveBoundingBox\n     * @param {AbstractShapePrimitive} primitive\n     * @returns {Object} the bounding box\n     */\n    ShapeRenderer.prototype.getPrimitiveBoundingBox = function (primitive) {\n        var rectangle = null;\n        if (primitive instanceof scope.ShapeEllipse) {\n            rectangle = scope.MathUtils.getEllipseArcRect(primitive.getCenter(), primitive.getMaxRadius(), primitive.getMinRadius(), primitive.getOrientation(), primitive.getStartAngle(), primitive.getSweepAngle());\n        } else if (primitive instanceof scope.ShapeLine) {\n            rectangle = scope.MathUtils.getLineRect(primitive.getFirstPoint(), primitive.getLastPoint());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @constructor\n     */\n    function MathRenderer() {\n        this.cloneStrokes = [];\n        this.strokesToRemove = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math strokes on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {MathDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        var notScratchOutStrokes = this.removeScratchOutStrokes(strokes, recognitionResult.getScratchOutResults());\n\n        for (var i in notScratchOutStrokes) {\n            var stroke = notScratchOutStrokes[i];\n            this.drawStroke(stroke, parameters, context);\n        }\n    };\n\n    /**\n     * Remove scratch out from input strokes\n     *\n     * @param {Stroke[]} strokes\n     * @param {MathScratchOut[]} mathScratchOutResults\n     * @returns {Stroke[]} notScratchOutStrokes\n     */\n    MathRenderer.prototype.removeScratchOutStrokes = function (strokes, mathScratchOutResults) {\n        if (!mathScratchOutResults || mathScratchOutResults.length === 0) {\n            return strokes;\n        }\n\n        var cloneStrokes = strokes.slice(0);\n        var strokesToRemove = [];\n\n        for (var k in mathScratchOutResults) {\n            if (mathScratchOutResults[k].getErasedInkRanges()) {\n                for (var n in mathScratchOutResults[k].getErasedInkRanges()) {\n                    strokesToRemove.push(mathScratchOutResults[k].getErasedInkRanges()[n].getComponent());\n                }\n                for (var p in mathScratchOutResults[k].getInkRanges()) {\n                    strokesToRemove.push(mathScratchOutResults[k].getInkRanges()[p].getComponent());\n                }\n            }\n        }\n\n        strokesToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in strokesToRemove) {\n            cloneStrokes.splice(strokesToRemove[z], 1);\n        }\n        return cloneStrokes;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @constructor\n     */\n    function MusicRenderer () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music strokes on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {MusicDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        var notScratchOutStrokes = this.removeScratchOutStrokes(strokes, recognitionResult.getScratchOutResults());\n        this.drawStrokes(notScratchOutStrokes, parameters, context);\n    };\n\n    /**\n     * Remove scratch out from input strokes\n     *\n     * @param {Stroke[]} strokes\n     * @param {MusicScratchOut[]} scratchOutResults\n     * @returns {Stroke[]} notScratchOutStrokes\n     */\n    MusicRenderer.prototype.removeScratchOutStrokes = function (strokes, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return strokes;\n        }\n\n        var cloneStrokes = strokes.slice(0);\n        var strokesToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var l in scratchOutResults[k].getErasedInputRanges()) {\n                    strokesToRemove.push(scratchOutResults[k].getErasedInputRanges()[l].getComponent());\n                }\n                for (var m in scratchOutResults[k].getInputRanges()) {\n                    strokesToRemove.push(scratchOutResults[k].getInputRanges()[m].getComponent());\n                }\n            }\n        }\n\n        strokesToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in strokesToRemove) {\n            cloneStrokes.splice(strokesToRemove[z], 1);\n        }\n        return cloneStrokes;\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method staffDrawing\n     * @param {MusicStaff} staff\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    MusicRenderer.prototype.drawStaff = function (staff, parameters, context) {\n\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    MusicRenderer.prototype.drawComponents = function (components, parameters, context) {\n        scope.AbstractRenderer.prototype.drawComponents.call(this, components, parameters, context); // super\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.MusicAccidentalInputComponent) {\n                drawAccidental(component, parameters, context);\n            } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n                drawArpeggiate(component, parameters, context);\n            } else if (component instanceof scope.MusicBarInputComponent) {\n                drawBar(component, parameters, context);\n            } else if (component instanceof scope.MusicBeamInputComponent) {\n                drawBeam(component, parameters, context);\n            } else if (component instanceof scope.MusicClefInputComponent) {\n                drawClef(component, parameters, context);\n            } else if (component instanceof scope.MusicDecorationInputComponent) {\n                drawDecoration(component, parameters, context);\n            } else if (component instanceof scope.MusicDotsInputComponent) {\n                drawDots(component, parameters, context);\n            } else if (component instanceof scope.MusicHeadInputComponent) {\n                drawHead(component, parameters, context);\n            } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n                drawLedgerLine(component, parameters, context);\n            } else if (component instanceof scope.MusicRestInputComponent) {\n                drawRest(component, parameters, context);\n            } else if (component instanceof scope.MusicStemInputComponent) {\n                drawStem(component, parameters, context);\n            } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n                drawTieOrSlur(component, parameters, context);\n            } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n                drawTimeSignature(component, parameters, context);\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawAccidental = function (accidental, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawArpeggiate = function (arpeggiate, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawBar = function (bar, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawBeam = function (beam, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawClef = function (clef, parameters, context) {\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = 'data:image/svg+xml,' + getClefSvg(clef.getValue());\n    };\n\n    /**\n     * Get a svg representation of a music clef.\n     *\n     * @static\n     * @method getClefSvg\n     * @param {MusicClefInput|MusicClef} clef\n     * @returns {String}\n     */\n    var getClefSvg = function (clef) {\n        switch (clef.getSymbol()) {\n            case 'F':\n                return '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n            case 'C':\n                return '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n            case 'G':\n                return '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n            default:\n                return '';\n        }\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawDecoration = function (decoration, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawDots = function (dots, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawHead = function (head, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawLedgerLine = function (ledgerLine, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawRest = function (rest, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawStem = function (stem, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawTieOrSlur = function (tieOrSlur, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    var drawTimeSignature = function (timeSignature, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @constructor\n     */\n    function AnalyzerRenderer () {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Draw shape strokes on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerDocument} recognitionResult\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (strokes, recognitionResult, parameters, context) {\n        this.drawShapes(strokes, recognitionResult.getShapes(), parameters, context);\n        this.drawTables(strokes, recognitionResult.getTables(), parameters, context);\n        this.drawTextLines(strokes, recognitionResult.getTextLines(), parameters, context);\n//        this.drawGroups(strokes, recognitionResult.getGroups(), parameters, context); // TODO: not implemented\n    };\n\n    /**\n     * Draw table\n     *\n     * @method drawTables\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerTable[]} tables\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawTables = function (strokes, tables, parameters, context) {\n        for (var i in tables) {\n            if (parameters.getShowBoundingBoxes()) {\n                for (var j in tables[i].getCells()) {\n                    this.drawCell(tables[i].getCells()[j], parameters, context);\n                }\n            }\n            for (var k in tables[i].getLines()) {\n                this.drawLine(tables[i].getLines()[k], parameters, context);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @method drawTextLines\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawTextLines = function (strokes, textLines, parameters, context) {\n\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n\n                if (parameters.getShowBoundingBoxes()) {\n                    this.drawRectangle(data.getBoundingBox(), parameters, context);\n                }\n\n                var text = textLine.getTextDocument().getTextSegmentResult().getSelectedCandidate().getLabel();\n                this.drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), parameters, context);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    this.drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, parameters, context);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @method drawText\n     * @param {MyScript.Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawText = function (boundingBox, text, justificationType, textHeight, baseline, parameters, context) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.textAlign = (justificationType === 'CENTER')? 'center': 'left';\n            context.font = parameters.getDecoration() + textHeight + 'px ' + parameters.getFont();\n\n            context.fillText(text, boundingBox.getX(), baseline, boundingBox.getWidth());\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Underline\n     *\n     * @method drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawUnderline = function (boundingBox, underline, text, textHeight, baseline, parameters, context) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + textHeight + 'px ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        this.drawLine(new scope.AnalyzerLine({data: new scope.AnalyzerLineData({p1 :{x: x1,y: baseline},p2:{x: x2,y: baseline}})}), parameters, context);\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @method drawGroups\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerGroup[]} groups\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawGroups = function (strokes, groups, parameters, context) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw a line\n     *\n     * @method drawLine\n     * @param {AnalyzerLine} line\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawLine = function (line, parameters, context) {\n        if (line.getData()) {\n            this.drawLineByPoints(line.getData().getP1(), line.getData().getP2(), parameters, context);\n        }\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @method drawCell\n     * @param {AnalyzerCell} cell\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawCell = function (cell, parameters, context) {\n        if (cell.getData()) {\n            this.drawRectangle(cell.getData().getBoundingBox(), parameters, context);\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {Stroke[]} strokes\n     * @param {ShapeSegment[]} shapes\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapes = function (strokes, shapes, parameters, context) {\n\n        for (var i in shapes) {\n            var segment = shapes[i];\n            var candidate = segment.getSelectedCandidate();\n\n            if (candidate) {\n                if (candidate instanceof scope.ShapeRecognized) {\n                    this.drawShapeRecognized(candidate, parameters, context);\n                } else if (candidate instanceof scope.ShapeNotRecognized) {\n                    this.drawShapeNotRecognized(strokes, segment.getInkRanges(), candidate, parameters, context);\n                } else {\n                    throw new Error('not implemented');\n                }\n            }\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapeRecognized = function (shapeRecognized, parameters, context) {\n\n        var primitives = shapeRecognized.getPrimitives();\n\n        for (var i in primitives) {\n            this.drawShapePrimitive(primitives[i], parameters, context);\n        }\n        if (parameters.getShowBoundingBoxes()) {\n            var rectangleList = [];\n\n            for (var j in primitives) {\n                // Primitive bounding rect\n                rectangleList.push(this.getPrimitiveBoundingBox(primitives[j]));\n            }\n            // Bounding rect of the entire shape\n            var boundingRect = scope.MathUtils.getBoundingRect(rectangleList);\n            this.drawRectangle(boundingRect, parameters, context);\n        }\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {Stroke[]} strokes\n     * @param {AnalyzerInkRange[]} inkRanges\n     * @param {ShapeNotRecognized} shapeNotRecognized\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapeNotRecognized = function (strokes, inkRanges, shapeNotRecognized, parameters, context) {\n        for (var i in inkRanges) {\n            var extractedStrokes = this.extractStroke(strokes, inkRanges[i]);\n            this.drawStrokes(extractedStrokes, parameters, context);\n        }\n\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapePrimitive = function (primitive, parameters, context) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            this.drawShapeEllipse(primitive, parameters, context);\n        } else if (primitive instanceof scope.ShapeLine) {\n            this.drawShapeLine(primitive, parameters, context);\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapeLine = function (shapeLine, parameters, context) {\n\n        this.drawLineByPoints(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), parameters, context);\n\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, parameters, context);\n        }\n\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, parameters, context);\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @method drawEllipseArc\n     * @param {ShapePoint} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     * @returns {Point[]}\n     */\n    AnalyzerRenderer.prototype.drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, parameters, context) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push({x: x, y: y});\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {RenderingParameters} parameters\n     * @param {Object} context\n     */\n    AnalyzerRenderer.prototype.drawShapeEllipse = function (shapeEllipse, parameters, context) {\n\n        var points = this.drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            parameters, context);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, parameters, context);\n        }\n\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            this.drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, parameters, context);\n        }\n    };\n\n    /**\n     * Get the bounding box of primitive\n     *\n     * @method getPrimitiveBoundingBox\n     * @param {AbstractShapePrimitive} primitive\n     * @returns {MyScript.Rectangle} rectangle\n     */\n    AnalyzerRenderer.prototype.getPrimitiveBoundingBox = function (primitive) {\n        var rectangle = null;\n        if (primitive instanceof scope.ShapeEllipse) {\n            rectangle = scope.MathUtils.getEllipseArcRect(primitive.getCenter(), primitive.getMaxRadius(), primitive.getMinRadius(), primitive.getOrientation(), primitive.getStartAngle(), primitive.getSweepAngle());\n        } else if (primitive instanceof scope.ShapeLine) {\n            rectangle = scope.MathUtils.getLineRect(primitive.getFirstPoint(), primitive.getLastPoint());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nvar CryptoJS = CryptoJS || (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var X32WordArray = C_lib.WordArray;\n\n    /**\n     * x64 namespace.\n     */\n    var C_x64 = C.x64 = {};\n\n    /**\n     * A 64-bit word.\n     */\n    var X64Word = C_x64.Word = Base.extend({\n        /**\n         * Initializes a newly created 64-bit word.\n         *\n         * @param {number} high The high 32 bits.\n         * @param {number} low The low 32 bits.\n         *\n         * @example\n         *\n         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n         */\n        init: function (high, low) {\n            this.high = high;\n            this.low = low;\n        }\n\n        /**\n         * Bitwise NOTs this word.\n         *\n         * @return {X64Word} A new x64-Word object after negating.\n         *\n         * @example\n         *\n         *     var negated = x64Word.not();\n         */\n        // not: function () {\n            // var high = ~this.high;\n            // var low = ~this.low;\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise ANDs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to AND with this word.\n         *\n         * @return {X64Word} A new x64-Word object after ANDing.\n         *\n         * @example\n         *\n         *     var anded = x64Word.and(anotherX64Word);\n         */\n        // and: function (word) {\n            // var high = this.high & word.high;\n            // var low = this.low & word.low;\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise ORs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to OR with this word.\n         *\n         * @return {X64Word} A new x64-Word object after ORing.\n         *\n         * @example\n         *\n         *     var ored = x64Word.or(anotherX64Word);\n         */\n        // or: function (word) {\n            // var high = this.high | word.high;\n            // var low = this.low | word.low;\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise XORs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to XOR with this word.\n         *\n         * @return {X64Word} A new x64-Word object after XORing.\n         *\n         * @example\n         *\n         *     var xored = x64Word.xor(anotherX64Word);\n         */\n        // xor: function (word) {\n            // var high = this.high ^ word.high;\n            // var low = this.low ^ word.low;\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Shifts this word n bits to the left.\n         *\n         * @param {number} n The number of bits to shift.\n         *\n         * @return {X64Word} A new x64-Word object after shifting.\n         *\n         * @example\n         *\n         *     var shifted = x64Word.shiftL(25);\n         */\n        // shiftL: function (n) {\n            // if (n < 32) {\n                // var high = (this.high << n) | (this.low >>> (32 - n));\n                // var low = this.low << n;\n            // } else {\n                // var high = this.low << (n - 32);\n                // var low = 0;\n            // }\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Shifts this word n bits to the right.\n         *\n         * @param {number} n The number of bits to shift.\n         *\n         * @return {X64Word} A new x64-Word object after shifting.\n         *\n         * @example\n         *\n         *     var shifted = x64Word.shiftR(7);\n         */\n        // shiftR: function (n) {\n            // if (n < 32) {\n                // var low = (this.low >>> n) | (this.high << (32 - n));\n                // var high = this.high >>> n;\n            // } else {\n                // var low = this.high >>> (n - 32);\n                // var high = 0;\n            // }\n\n            // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Rotates this word n bits to the left.\n         *\n         * @param {number} n The number of bits to rotate.\n         *\n         * @return {X64Word} A new x64-Word object after rotating.\n         *\n         * @example\n         *\n         *     var rotated = x64Word.rotL(25);\n         */\n        // rotL: function (n) {\n            // return this.shiftL(n).or(this.shiftR(64 - n));\n        // },\n\n        /**\n         * Rotates this word n bits to the right.\n         *\n         * @param {number} n The number of bits to rotate.\n         *\n         * @return {X64Word} A new x64-Word object after rotating.\n         *\n         * @example\n         *\n         *     var rotated = x64Word.rotR(7);\n         */\n        // rotR: function (n) {\n            // return this.shiftR(n).or(this.shiftL(64 - n));\n        // },\n\n        /**\n         * Adds this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to add with this word.\n         *\n         * @return {X64Word} A new x64-Word object after adding.\n         *\n         * @example\n         *\n         *     var added = x64Word.add(anotherX64Word);\n         */\n        // add: function (word) {\n            // var low = (this.low + word.low) | 0;\n            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n            // var high = (this.high + word.high + carry) | 0;\n\n            // return X64Word.create(high, low);\n        // }\n    });\n\n    /**\n     * An array of 64-bit words.\n     *\n     * @property {Array} words The array of CryptoJS.x64.Word objects.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var X64WordArray = C_x64.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create();\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create([\n         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n         *     ]);\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create([\n         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n         *     ], 10);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 8;\n            }\n        },\n\n        /**\n         * Converts this 64-bit word array to a 32-bit word array.\n         *\n         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n         *\n         * @example\n         *\n         *     var x32WordArray = x64WordArray.toX32();\n         */\n        toX32: function () {\n            // Shortcuts\n            var x64Words = this.words;\n            var x64WordsLength = x64Words.length;\n\n            // Convert\n            var x32Words = [];\n            for (var i = 0; i < x64WordsLength; i++) {\n                var x64Word = x64Words[i];\n                x32Words.push(x64Word.high);\n                x32Words.push(x64Word.low);\n            }\n\n            return X32WordArray.create(x32Words, this.sigBytes);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {X64WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = x64WordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n\n            // Clone \"words\" array\n            var words = clone.words = this.words.slice(0);\n\n            // Clone each X64Word object\n            var wordsLength = words.length;\n            for (var i = 0; i < wordsLength; i++) {\n                words[i] = words[i].clone();\n            }\n\n            return clone;\n        }\n    });\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n\n    function X64Word_create() {\n        return X64Word.create.apply(X64Word, arguments);\n    }\n\n    // Constants\n    var K = [\n        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n    ];\n\n    // Reusable objects\n    var W = [];\n    (function () {\n        for (var i = 0; i < 80; i++) {\n            W[i] = X64Word_create();\n        }\n    }());\n\n    /**\n     * SHA-512 hash algorithm.\n     */\n    var SHA512 = C_algo.SHA512 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new X64WordArray.init([\n                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n            ]);\n        },\n\n        _doProcessBlock: function (M, offset) {\n            // Shortcuts\n            var H = this._hash.words;\n\n            var H0 = H[0];\n            var H1 = H[1];\n            var H2 = H[2];\n            var H3 = H[3];\n            var H4 = H[4];\n            var H5 = H[5];\n            var H6 = H[6];\n            var H7 = H[7];\n\n            var H0h = H0.high;\n            var H0l = H0.low;\n            var H1h = H1.high;\n            var H1l = H1.low;\n            var H2h = H2.high;\n            var H2l = H2.low;\n            var H3h = H3.high;\n            var H3l = H3.low;\n            var H4h = H4.high;\n            var H4l = H4.low;\n            var H5h = H5.high;\n            var H5l = H5.low;\n            var H6h = H6.high;\n            var H6l = H6.low;\n            var H7h = H7.high;\n            var H7l = H7.low;\n\n            // Working variables\n            var ah = H0h;\n            var al = H0l;\n            var bh = H1h;\n            var bl = H1l;\n            var ch = H2h;\n            var cl = H2l;\n            var dh = H3h;\n            var dl = H3l;\n            var eh = H4h;\n            var el = H4l;\n            var fh = H5h;\n            var fl = H5l;\n            var gh = H6h;\n            var gl = H6l;\n            var hh = H7h;\n            var hl = H7l;\n\n            // Rounds\n            for (var i = 0; i < 80; i++) {\n                // Shortcut\n                var Wi = W[i];\n\n                // Extend message\n                if (i < 16) {\n                    var Wih = Wi.high = M[offset + i * 2]     | 0;\n                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n                } else {\n                    // Gamma0\n                    var gamma0x  = W[i - 15];\n                    var gamma0xh = gamma0x.high;\n                    var gamma0xl = gamma0x.low;\n                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n                    // Gamma1\n                    var gamma1x  = W[i - 2];\n                    var gamma1xh = gamma1x.high;\n                    var gamma1xl = gamma1x.low;\n                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n                    var Wi7  = W[i - 7];\n                    var Wi7h = Wi7.high;\n                    var Wi7l = Wi7.low;\n\n                    var Wi16  = W[i - 16];\n                    var Wi16h = Wi16.high;\n                    var Wi16l = Wi16.low;\n\n                    var Wil = gamma0l + Wi7l;\n                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n                    var Wil = Wil + gamma1l;\n                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n                    var Wil = Wil + Wi16l;\n                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n                    Wi.high = Wih;\n                    Wi.low  = Wil;\n                }\n\n                var chh  = (eh & fh) ^ (~eh & gh);\n                var chl  = (el & fl) ^ (~el & gl);\n                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n                // t1 = h + sigma1 + ch + K[i] + W[i]\n                var Ki  = K[i];\n                var Kih = Ki.high;\n                var Kil = Ki.low;\n\n                var t1l = hl + sigma1l;\n                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n                var t1l = t1l + chl;\n                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n                var t1l = t1l + Kil;\n                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n                var t1l = t1l + Wil;\n                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n                // t2 = sigma0 + maj\n                var t2l = sigma0l + majl;\n                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n                // Update working variables\n                hh = gh;\n                hl = gl;\n                gh = fh;\n                gl = fl;\n                fh = eh;\n                fl = el;\n                el = (dl + t1l) | 0;\n                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n                dh = ch;\n                dl = cl;\n                ch = bh;\n                cl = bl;\n                bh = ah;\n                bl = al;\n                al = (t1l + t2l) | 0;\n                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n            }\n\n            // Intermediate hash value\n            H0l = H0.low  = (H0l + al);\n            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n            H1l = H1.low  = (H1l + bl);\n            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n            H2l = H2.low  = (H2l + cl);\n            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n            H3l = H3.low  = (H3l + dl);\n            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n            H4l = H4.low  = (H4l + el);\n            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n            H5l = H5.low  = (H5l + fl);\n            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n            H6l = H6.low  = (H6l + gl);\n            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n            H7l = H7.low  = (H7l + hl);\n            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n        },\n\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n\n            // Hash final blocks\n            this._process();\n\n            // Convert hash to 32-bit word array before returning\n            var hash = this._hash.toX32();\n\n            // Return final computed hash\n            return hash;\n        },\n\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n\n            return clone;\n        },\n\n        blockSize: 1024/32\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA512('message');\n     *     var hash = CryptoJS.SHA512(wordArray);\n     */\n    C.SHA512 = Hasher._createHelper(SHA512);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA512(message, key);\n     */\n    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n            // Init hasher\n            hasher = this._hasher = new hasher.init();\n\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof key == 'string') {\n                key = Utf8.parse(key);\n            }\n\n            // Shortcuts\n            var hasherBlockSize = hasher.blockSize;\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n            // Allow arbitrary length keys\n            if (key.sigBytes > hasherBlockSizeBytes) {\n                key = hasher.finalize(key);\n            }\n\n            // Clamp excess bits\n            key.clamp();\n\n            // Clone key for inner and outer pads\n            var oKey = this._oKey = key.clone();\n            var iKey = this._iKey = key.clone();\n\n            // Shortcuts\n            var oKeyWords = oKey.words;\n            var iKeyWords = iKey.words;\n\n            // XOR keys with pad constants\n            for (var i = 0; i < hasherBlockSize; i++) {\n                oKeyWords[i] ^= 0x5c5c5c5c;\n                iKeyWords[i] ^= 0x36363636;\n            }\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Reset\n            hasher.reset();\n            hasher.update(this._iKey);\n        },\n\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            this._hasher.update(messageUpdate);\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Compute HMAC\n            var innerHash = hasher.finalize(messageUpdate);\n            hasher.reset();\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n            return hmac;\n        }\n    });\n}());\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    // Turn off strict mode for this function so we can assign to global.Q\n    /* jshint strict: false */\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else {\n        Q = definition();\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n\n    function flush() {\n        /* jshint loopfunc: true */\n\n        while (head.next) {\n            head = head.next;\n            var task = head.task;\n            head.task = void 0;\n            var domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n\n            try {\n                task();\n\n            } catch (e) {\n                if (isNodeJS) {\n                    // In node, uncaught exceptions are considered fatal errors.\n                    // Re-throw them synchronously to interrupt flushing!\n\n                    // Ensure continuation if the uncaught exception is suppressed\n                    // listening \"uncaughtException\" events (as domains does).\n                    // Continue in next event to avoid tick recursion.\n                    if (domain) {\n                        domain.exit();\n                    }\n                    setTimeout(flush, 0);\n                    if (domain) {\n                        domain.enter();\n                    }\n\n                    throw e;\n\n                } else {\n                    // In browsers, uncaught exceptions are not fatal.\n                    // Re-throw them asynchronously to avoid slow-downs.\n                    setTimeout(function() {\n                       throw e;\n                    }, 0);\n                }\n            }\n\n            if (domain) {\n                domain.exit();\n            }\n        }\n\n        flushing = false;\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process !== \"undefined\" && process.nextTick) {\n        // Node.js before 0.9. Note that some fake-Node environments, like the\n        // Mocha test runner, introduce a `process` global without a `nextTick`.\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (isPromise(value)) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become fulfilled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be fulfilled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function(resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function(answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return isObject(object) &&\n        typeof object.promiseDispatch === \"function\" &&\n        typeof object.inspect === \"function\";\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return result.value;\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return exception.value;\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var countDown = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++countDown;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--countDown === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (countDown === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {String} custom error message (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, message) {\n    return Q(object).timeout(ms, message);\n};\n\nPromise.prototype.timeout = function (ms, message) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"]}