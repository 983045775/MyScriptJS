{"version":3,"sources":["myscript.js","MyScript.js","point.js","rectangle.js","penParameters.js","mathUtils.js","abstractWSMessage.js","abstractComponent.js","strokeComponent.js","characterInputComponent.js","characterInputComponentAlternate.js","abstractParameter.js","abstractRecognitionInput.js","abstractRecognitionData.js","recognitionLanguagesData.js","abstractStartRequestWSMessage.js","abstractContinueRequestWSMessage.js","challengeRequestWSMessage.js","initRequestWSMessage.js","resetRequestWSMessage.js","abstractTextInputComponent.js","charInputComponent.js","stringInputComponent.js","textInputUnit.js","textParameter.js","textProperties.js","textRecognitionInput.js","textRecognitionData.js","textStartRequestWSMessage.js","textContinueRequestWSMessage.js","shapeParameter.js","shapeRecognitionInput.js","shapeRecognitionData.js","mathParameter.js","mathRecognitionInput.js","mathRecognitionData.js","mathStartRequestWSMessage.js","mathContinueRequestWSMessage.js","abstractMusicInputComponent.js","musicAccidentalInputComponent.js","musicArpeggiateInputComponent.js","musicBarInputComponent.js","musicBeamInputComponent.js","musicClefInputComponent.js","musicDecorationInputComponent.js","musicDotsInputComponent.js","musicHeadInputComponent.js","musicLedgerLineInputComponent.js","musicRestInputComponent.js","musicStemInputComponent.js","musicTieOrSlurInputComponent.js","musicTimeSignatureInputComponent.js","musicStaff.js","musicParameter.js","musicRecognitionInput.js","musicRecognitionData.js","analyzerParameter.js","analyzerRecognitionInput.js","analyzerRecognitionData.js","abstractResult.js","abstractRecoResponseWSMessage.js","challengeResponseWSMessage.js","errorResponseWSMessage.js","initResponseWSMessage.js","resetResponseWSMessage.js","textInkRange.js","textCandidate.js","textDocument.js","textResult.js","textSegment.js","textTagItem.js","textResponseWSMessage.js","abstractShapePrimitive.js","shapeCandidate.js","shapeDocument.js","shapeEllipse.js","shapeErased.js","shapeInkRange.js","shapeLine.js","shapeNotRecognized.js","shapeRecognized.js","shapeResult.js","shapeScratchOut.js","shapeSegment.js","mathNode.js","mathNonTerminalNode.js","mathResultElement.js","mathRuleNode.js","mathDocument.js","mathInkRange.js","mathOfficeOpenXmlMathResultElement.js","mathLaTexResultElement.js","mathMathMLResultElement.js","mathResult.js","mathScratchOut.js","mathSymbolTreeResultElement.js","mathTerminalNode.js","mathTerminalNodeCandidate.js","mathBorderData.js","mathBorderNonTerminalNode.js","mathCellData.js","mathCellNonTerminalNode.js","mathTableData.js","mathTableRuleNode.js","mathResponseWSMessage.js","musicElement.js","musicResultElement.js","musicAccidental.js","musicAnnotation.js","musicArpeggiate.js","musicBar.js","musicBeam.js","musicChord.js","musicClef.js","musicDecoration.js","musicDocument.js","musicDots.js","musicHead.js","musicInputRange.js","musicKeySignature.js","musicKeySignatureData.js","musicLedgerLine.js","musicNote.js","musicPart.js","musicPitchData.js","musicRest.js","musicResult.js","musicScore.js","musicScoreTreeResultElement.js","musicScratchOut.js","musicSlur.js","musicStem.js","musicTie.js","musicTimeModificationData.js","musicTimeSignature.js","musicTupletBracket.js","musicTuplet.js","musicXMLResultElement.js","analyzerElement.js","analyzerCell.js","analyzerCellData.js","analyzerDocument.js","analyzerElementReference.js","analyzerGroup.js","analyzerInkRange.js","analyzerLine.js","analyzerLineData.js","analyzerRecognizedStroke.js","analyzerResult.js","analyzerStrokeType.js","analyzerTable.js","analyzerTableData.js","analyzerTextLine.js","analyzerTextLineData.js","analyzerUnderline.js","analyzerUnderlineData.js","networkInterface.js","networkWSInterface.js","abstractRecognizer.js","abstractWSRecognizer.js","textRecognizer.js","textWSRecognizer.js","shapeRecognizer.js","mathRecognizer.js","mathWSRecognizer.js","musicRecognizer.js","analyzerRecognizer.js","abstractRenderer.js","textRenderer.js","shapeRenderer.js","mathRenderer.js","musicRenderer.js","analyzerRenderer.js","imageRenderer.js","inkGrabber.js","inkPaper.js"],"names":["CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","window","Event","Function","bind","oThis","this","TypeError","aArgs","Array","slice","call","arguments","fToBind","fNOP","fBound","apply","concat","MyScript","RecognitionType","TEXT","MATH","SHAPE","MUSIC","ANALYZER","InputMode","CURSIVE","ISOLATED","SUPERIMPOSED","VERTICAL","InputType","CHAR","WORD","SINGLE_LINE_TEXT","MULTI_LINE_TEXT","ResultDetail","CHARACTER","ResultType","Math","LATEX","MATHML","SYMBOLTREE","OFFICEOPENXMLMATH","Music","MUSICXML","SCORETREE","Protocol","WS","REST","scope","Point","obj","x","y","getX","setX","getY","setY","Rectangle","width","height","getTopLeftPoint","point","setTopLeftPoint","topLeftPoint","getWidth","setWidth","getHeight","setHeight","PenParameters","color","rectColor","font","decoration","pressureType","alpha","getColor","setColor","getRectColor","setRectColor","getFont","setFont","getDecoration","setDecoration","MathUtils","getEllipseArcRect","center","maxRadius","minRadius","orientation","startAngle","sweepAngle","angle","z1","z2","z3","z4","cosAlpha","sinAlpha","n","xList","yList","i","xMin","xMax","yMin","yMax","angleStep","sortFloat","a","b","cos","sin","abs","atan2","push","sort","length","getLineRect","firstPoint","lastPoint","xFirst","xLast","min","max","yFirst","yLast","getBoundingRect","boundingBoxes","rectangle","AbstractWSMessage","type","getType","AbstractComponent","setType","getBoundingBox","Error","setBoundingBox","boundingBox","StrokeComponent","t","p","d","l","constructor","toJSON","addX","addY","getT","setT","addT","getLength","toFixed","precision","getP","setP","addP","getD","setD","addD","getL","setL","addL","addPoint","filterPointByAcquisitionDelta","computeP","computeD","computeL","getLastIndexPoint","getPointByIndex","index","distance","sqrt","pow","isNaN","ratio","pressure","parseFloat","delta","ret","CharacterInputComponent","alternates","CharacterInputComponentAlternate","getAlternates","setAlternates","addAlternate","alternate","probability","getAlternate","setAlternate","getProbability","setProbability","AbstractParameter","AbstractRecognitionInput","AbstractRecognitionData","getApplicationKey","applicationKey","setApplicationKey","getInstanceId","instanceId","setInstanceId","getHmac","hmac","setHmac","getRecognitionInput","setRecognitionInput","input","RecognitionLanguagesData","getInputMode","inputMode","setInputMode","AbstractStartRequestWSMessage","AbstractContinueRequestWSMessage","ChallengeRequestWSMessage","getChallenge","challenge","setChallenge","getHmacSignature","setHmacSignature","InitRequestWSMessage","ResetRequestWSMessage","AbstractTextInputComponent","CharInputComponent","character","getLabel","setLabel","label","StringInputComponent","string","TextInputUnit","textInputType","components","getInputType","setInputType","inputType","getComponents","inkRange","TextInkRange","getStartComponent","getEndComponent","setComponents","TextParameter","textProperties","TextProperties","language","textInputMode","contentTypes","subsetKnowledges","userResources","userLkWords","resultDetail","getLanguage","setLanguage","getContentTypes","setContentTypes","getSubsetKnowledges","setSubsetKnowledges","getUserResources","setUserResources","getUserLkWords","setUserLkWords","getResultDetail","setResultDetail","getTextProperties","setTextProperties","textCandidateListSize","wordCandidateListSize","wordPredictionListSize","wordCompletionListSize","characterCandidateListSize","discardCaseVariations","discardAccentuationVariations","disableSpatialOrdering","glyphDistortion","enableOutOfLexicon","spellingDistortion","getTextCandidateListSize","setTextCandidateListSize","getWordCandidateListSize","setWordCandidateListSize","getWordPredictionListSize","setWordPredictionListSize","getWordCompletionListSize","setWordCompletionListSize","getCharacterCandidateListSize","setCharacterCandidateListSize","getDiscardCaseVariations","setDiscardCaseVariations","getDiscardAccentuationVariations","setDiscardAccentuationVariations","getDisableSpatialOrdering","setDisableSpatialOrdering","getGlyphDistortion","setGlyphDistortion","getEnableOutOfLexicon","setEnableOutOfLexicon","getSpellingDistortion","setSpellingDistortion","TextRecognitionInput","getParameters","textParameter","setParameters","parameters","getInputUnits","inputUnits","getStartUnit","getEndUnit","setInputUnits","TextRecognitionData","textInput","JSON","stringify","TextStartRequestWSMessage","TextContinueRequestWSMessage","ShapeParameter","rejectDetectionSensitivity","doBeautification","getRejectDetectionSensitivity","setRejectDetectionSensitivity","hasBeautification","setBeautification","ShapeRecognitionInput","ShapeRecognitionData","shapeInput","MathParameter","resultTypes","columnarOperation","scratchOutDetectionSensitivity","getResultTypes","setResultTypes","isColumnar","setColumnar","columnar","getScratchOutDetectionSensitivity","setScratchOutDetectionSensitivity","MathRecognitionInput","MathRecognitionData","mathInput","MathStartRequestWSMessage","MathContinueRequestWSMessage","AbstractMusicInputComponent","MusicAccidentalInputComponent","value","getValue","setValue","MusicArpeggiateInputComponent","MusicBarInputComponent","MusicBar","MusicBeamInputComponent","MusicBeam","MusicClefInputComponent","MusicClef","MusicDecorationInputComponent","MusicDecoration","MusicDotsInputComponent","MusicHeadInputComponent","MusicLedgerLineInputComponent","MusicRestInputComponent","MusicStemInputComponent","MusicTieOrSlurInputComponent","MusicTimeSignatureInputComponent","MusicStaff","count","gap","top","getCount","setCount","getTop","setTop","getGap","setGap","MusicParameter","divisions","staff","getStaff","setStaff","getDivisions","setDivisions","MusicRecognitionInput","MusicRecognitionData","musicInput","AnalyzerParameter","coordinateResolution","getTextParameters","setTextParameters","getCoordinateResolution","setCoordinateResolution","AnalyzerRecognitionInput","parameter","AnalyzerRecognitionData","analyzerInput","AbstractResult","getDocument","result","AbstractRecoResponseWSMessage","ChallengeResponseWSMessage","ErrorResponseWSMessage","error","getError","InitResponseWSMessage","ResetResponseWSMessage","cpt","split","startUnit","Number","startComponent","startPoint","endUnit","endComponent","endPoint","getStartPoint","getEndPoint","TextCandidate","flags","children","normalizedScore","spellingDistortionRatio","j","TextSegment","getNormalizedScore","getResemblanceScore","resemblanceScore","getSpellingDistortionRatio","getFlags","getChildren","TextDocument","tagItems","wordCandidates","charCandidates","textSegmentResult","TextTagItem","k","getTagItems","getWordSegments","getWordSegment","inkRanges","getInkRanges","getCharSegments","getCharSegment","getTextSegment","hasScratchOutResults","TextResult","candidates","selectedCandidateIdx","ranges","isArray","getCandidates","getSelectedCandidateIdx","getSelectedCandidate","tagType","getTagType","TextResponseWSMessage","AbstractShapePrimitive","beginDecoration","beginTangentAngle","endDecoration","endTangentAngle","isLine","isEllipse","hasBeginDecoration","hasEndDecoration","getBeginDecoration","getEndDecoration","getBeginTangentAngle","getEndTangentAngle","ShapeCandidate","isErased","isScratchOut","isNotRecognized","isRecognized","ShapeDocument","segments","ShapeSegment","getSegments","currentSeg","currentCandidate","ShapeScratchOut","ShapeEllipse","getCenter","getMinRadius","getMaxRadius","getOrientation","getStartAngle","getSweepAngle","ShapeErased","ShapeInkRange","firstStroke","lastStroke","getFirstStroke","getLastStroke","getFirstPoint","getLastPoint","ShapeLine","ShapeNotRecognized","ShapeRecognized","primitives","normalizedRecognitionScore","getPrimitives","getNormalizedRecognitionScore","ShapeResult","elementType","uniqueID","selectedCandidateIndex","getElementType","getUniqueId","MathNode","name","getName","MathNonTerminalNode","selectedCandidate","MathTerminalNode","MathRuleNode","MathCellNonTerminalNode","MathBorderNonTerminalNode","MathTableRuleNode","MathResultElement","isLaTex","isMathMl","isSymbolTree","childInkRanges","MathDocument","results","scratchOutResults","MathMathMLResultElement","MathLaTexResultElement","MathSymbolTreeResultElement","MathOfficeOpenXmlMathResultElement","MathScratchOut","getResultElements","getScratchOutResults","MathInkRange","component","firstItem","lastItem","getComponent","getFirstItem","getLastItem","MathResult","erasedInkRanges","getErasedInkRanges","root","getRoot","MathTerminalNodeCandidate","MathBorderData","position","start","stop","getPosition","getStart","getStop","data","getData","MathCellData","columnStart","columnStop","rowStart","rowStop","getColumnStart","getColumnStop","getRowStart","getRowStop","MathTableData","columnCount","rowCount","getColumnCount","getRowCount","MathResponseWSMessage","MusicElement","inputRanges","getInputRanges","MusicResultElement","isMusicXML","isScoreTree","MusicAccidental","MusicAnnotation","MusicArpeggiate","decorations","repeatDirection","style","getRepeatDirection","setRepeatDirection","getStyle","setStyle","getDecorations","setDecorations","slope","placement","leftCount","rightCount","getSlope","setSlope","getPlacement","setPlacement","getLeftCount","setLeftCount","getRightCount","setRightCount","MusicChord","notes","beamTypes","ledgerLines","startSlurs","stopSlurs","duration","arpeggiate","startBeam","stopBeam","stem","MusicStem","MusicNote","MusicLedgerLine","m","MusicSlur","getDuration","getArpeggiate","getStartBeam","getStopBeam","getStem","getNotes","getBeamTypes","getLedgerLines","getStartSlurs","getStopSlurs","symbol","octave","line","yAnchor","getYAnchor","setYAnchor","getLine","setLine","getOctave","setOctave","getSymbol","setSymbol","MusicDocument","MusicXMLResultElement","MusicScoreTreeResultElement","MusicScratchOut","MusicDots","MusicHead","MusicInputRange","MusicKeySignature","accidentals","signature","MusicKeySignatureData","getSignature","getAccidentals","fifths","cancel","getFifths","getCancel","accidental","dots","head","pitch","MusicPitchData","startTie","MusicTie","stopTie","startTuplet","MusicTuplet","stopTuplet","timeModification","MusicTimeModificationData","getAccidental","getDots","getHead","getPitch","getStartTie","getStopTie","getStartTuplet","getStopTuplet","getTimeModification","MusicPart","elements","MusicRest","MusicTimeSignature","MusicTupletBracket","getElements","alteration","step","getAlteration","getStep","MusicResult","MusicScore","parts","getParts","score","getScore","erasedInputRanges","getErasedInputRanges","actual","normal","getActual","getNormal","bottom","getBottom","brackets","number","getNumber","getBrackets","AnalyzerElement","AnalyzerCell","AnalyzerCellData","firstColumn","lastColumn","firstRow","lastRow","topBorder","bottomBorder","leftBorder","rightBorder","getFirstColumn","getLastColumn","getFirstRow","getLastRow","hasTopBorder","hasBottomBorder","hasLeftBorder","hasRightBorder","AnalyzerDocument","textLines","shapes","tables","groups","AnalyzerTextLine","AnalyzerTable","AnalyzerGroup","getTextLines","getShapes","getTables","getGroups","AnalyzerElementReference","elementReferences","getElementReferences","AnalyzerInkRange","stroke","AnalyzerRecognizedStroke","getStroke","AnalyzerLine","AnalyzerLineData","p1","p2","getP1","getP2","AnalyzerResult","AnalyzerStrokeType","getInkRange","lines","cells","AnalyzerTableData","getLines","getCells","underlineList","AnalyzerTextLineData","AnalyzerUnderline","getTextDocument","getUnderlineList","baselinePos","toMidline","textHeight","justificationType","getBaselinePos","getToMidline","getTextHeight","getJustificationType","AnalyzerUnderlineData","firstCharacter","lastCharacter","getFirstCharacter","getLastCharacter","Q","NetworkInterface","parseURL","url","queries","parser","createElement","searchObject","href","search","replace","protocol","host","hostname","port","pathname","hash","parse","req","responseText","e","transformRequest","str","encodeURIComponent","join","xhr","Promise","resolve","reject","notify","onStateChange","request","readyState","status","onLoad","onError","onProgress","loaded","total","XMLHttpRequest","open","withCredentials","setRequestHeader","onerror","onprogress","onload","onreadystatechange","send","get","src","put","post","NetworkWSInterface","setUrl","close","_url","getUrl","setCallback","callback","_callback","getCallback","getState","_getWebSocketState","_socket","isClosed","isClosing","isOpen","isConnecting","_openWebSocket","code","reason","_closeWebSocket","state","_sendMessage","onOpen","onClose","onMessage","socket","WebSocket","onopen","onclose","onmessage","message","CryptoJS","AbstractRecognizer","getProtocol","setSSL","_ssl","getSSL","ssl","getHost","setHost","getPrecision","setPrecision","getAvailableLanguageList","then","response","doRestRecognition","hmacKey","_filterStrokes","_doTextRecognition","_doShapeRecognition","_doMathRecognition","_doMusicRecognition","_doAnalyzerRecognition","clearRestRecognition","instanceSessionId","_clearShapeRecognition","_fillData","_computeHmac","jsonInput","HmacSHA512","toString","enc","Hex","forEach","currentValue","AbstractWSRecognizer","_wsInterface","sendMessage","initWSRecognition","takeUpHmacChallenge","resetWSRecognition","TextRecognizer","doSimpleRecognition","TextWSRecognizer","startWSRecognition","continueWSRecognition","ShapeRecognizer","clearShapeRecognitionSession","MathRecognizer","MathWSRecognizer","MusicRecognizer","AnalyzerRecognizer","AbstractRenderer","context","penParameters","showBoundingBoxes","typeset","points","drawing","_computeLinksPoints","radius","_computeMiddlePoint","point1","point2","_computeAxeAngle","begin","end","_fill","fillStyle","fill","_renderStroke","beginPath","arc","PI","_renderLine","nbquadratics","_renderQuadratic","_renderFinal","closePath","ARCSPLIT","linkPoints","moveTo","newAngle","lineTo","linkPoints1","linkPoints2","ctrl","linkPoints3","quadraticCurveTo","getContext","_setContext","getShowBoundingBoxes","setShowBoundingBoxes","isTypesetting","setTypeset","clear","clearRect","canvas","drawRecognitionResult","recognitionResult","drawComponents","drawComponent","drawStroke","drawCharacter","drawRectangle","save","strokeStyle","lineWidth","fillRect","restore","drawStrokes","strokes","TextRenderer","drawInputUnits","_drawTextComponent","_drawChar","_drawString","char","ShapeRenderer","drawShapes","_drawShapePrimitive","drawShapeSegment","segment","candidate","_drawShapeRecognized","notRecognized","_extractShapeNotRecognized","drawShapeNotRecognized","drawShapePrimitive","primitive","shapeRecognized","_drawShapeEllipse","_drawShapeLine","shapeLine","_drawLine","_drawArrowHead","shapeEllipse","_drawEllipseArc","centerPoint","floor","boundariesPoints","_phi","headPoint","beta","firstPointIndex","lastPointIndex","ceil","strokeIndex","currentStroke","currentStrokePointCount","newStroke","pointIndex","MathRenderer","notScratchOutComponents","_removeMathScratchOut","cloneComponents","componentsToRemove","z","splice","MusicRenderer","_removeMusicScratchOut","drawStaff","_drawStaff","_drawMusicNode","drawMusicNode","staffHeight","staves","offset","clientWidth","_drawAccidental","_drawArpeggiate","_drawBar","_drawBeam","_drawClef","_drawDecoration","_drawDots","_drawHead","_drawLedgerLine","_drawRest","_drawStem","_drawTieOrSlur","_drawTimeSignature","bar","beam","clef","imageObj","Image","drawImage","ledgerLine","rest","tieOrSlur","timeSignature","AnalyzerRenderer","shapeRenderer","getShapeRenderer","setShapeRenderer","_drawTables","_drawTextLines","textLine","text","_drawText","underlines","_drawUnderline","baseline","textAlign","fillText","underline","topLeft","textMetrics","measureText","substring","x1","x2","ImageRenderer","console","log","InkGrabber","writing","isWriting","startCapture","continueCapture","endCapture","InkPaper","element","options","_element","_instanceId","_timerId","_initialized","redoComponents","lastNonRecoComponentIdx","resultCallback","changeCallback","canvasRatio","_captureCanvas","_createCanvas","_inkGrabber","_renderingCanvas","_getCanvasRatio","_textRenderer","_mathRenderer","_shapeRenderer","_musicRenderer","_analyzerRenderer","_textRecognizer","_mathRecognizer","_shapeRecognizer","_musicRecognizer","_analyzerRecognizer","_textWSRecognizer","_handleMessage","_mathWSRecognizer","_attachListeners","timeout","textParameters","mathParameters","shapeParameters","musicParameters","analyzerParameters","idx","setMathParameters","setShapeParameters","setMusicParameters","setAnalyzerParameters","setProtocol","setTimeout","setHmacKey","setPenParameters","parent","id","querySelectorAll","appendChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","_getCoordinates","container","changedTouches","rect","getBoundingClientRect","clientX","left","clientLeft","clientY","clientTop","timeStamp","scale","_initRenderingCanvas","_selectedRecognizer","_selectedRESTRecognizer","_selectedWSRecognizer","_selectedRenderer","getTimeout","getHmacKey","isStarted","getMathParameters","getShapeParameters","getMusicParameters","getAnalyzerParameters","getPenParameters","getAvailableLanguages","_onResult","getRenderer","getInkGrabber","getRecognizer","setChangeCallback","setResultCallback","recognize","_doRecognition","canUndo","undo","pop","_onChange","clearTimeout","canRedo","redo","addDomListener","useCapture","myfunction","addEventListener","_down","sizeChanged","clientHeight","_move","_up","inputWS","inputUnitWS","inputUnit","_parseResult","err","dispatchEvent","undoLength","redoLength","pointerId","self","preventDefault","stopPropagation","coord","_drawInput","replayNeeded","getStats","stats","strokesCount","pointsCount","byteSize","humanSize","humanUnit","strokeNb","getInkAsImageData","marginX","marginY","minX","maxX","minY","maxY","pointCount","pointNb","currentX","currentY","nonDisplayCanvas","ctx","imageRendered","imageData","getImageData","getInkAsPng","imageRenderingCanvas","display","imageDataToRender","putImageData","toDataURL"],"mappings":"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","file":"myscript.min.js","sourcesContent":["/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE',\n            OFFICEOPENXMLMATH : 'OFFICEOPENXMLMATH'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n\n\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters(obj) {\n        this.color = 'rgba(0, 0, 0, 0.9)';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = 'normal';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n        if (obj) {\n            this.color = obj.color;\n            this.rectColor = obj.rectColor;\n            this.font = obj.font;\n            this.decoration = obj.decoration;\n            this.width = obj.width;\n            this.pressureType = obj.pressureType;\n            this.alpha = obj.alpha;\n        }\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent a simple StrokeComponent input component\n     *\n     * @class StrokeComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            if (obj.x) {\n                this.x = obj.x;\n            }\n            if (obj.y) {\n                this.y = obj.y;\n            }\n            if (obj.t) {\n                this.t = obj.t;\n            }\n            if (obj.p) {\n                this.p = obj.p;\n            }\n            if (obj.d) {\n                this.d = obj.d;\n            }\n            if (obj.l) {\n                this.l = obj.l;\n            }\n            if (obj.color) {\n                this.color = obj.color;\n            }\n            if (obj.alpha) {\n                this.alpha = obj.alpha;\n            }\n            if (obj.width) {\n                this.width = obj.width;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**     *\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    StrokeComponent.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    StrokeComponent.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    StrokeComponent.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    StrokeComponent.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    StrokeComponent.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    StrokeComponent.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    StrokeComponent.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    StrokeComponent.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    StrokeComponent.prototype.toFixed = function (precision) {\n        if (precision !== undefined) {\n            for (var i in this.x) {\n                this.x[i] = this.x[i].toFixed(precision);\n                this.y[i] = this.y[i].toFixed(precision);\n            }\n        }\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (this.filterPointByAcquisitionDelta(x, y)) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(this.computeP(x, y));\n            this.addD(this.computeD(x, y));\n            this.addL(this.computeL(x, y));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    StrokeComponent.prototype.computeD = function (x, y) {\n        var distance = Math.sqrt(Math.pow((y - this.getY()[this.getLastIndexPoint() - 1]), 2) + Math.pow((x - this.getX()[this.getLastIndexPoint() - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    };\n\n    StrokeComponent.prototype.computeL = function (x, y) {\n        var length = this.getL()[this.getLastIndexPoint() - 1] + this.computeD(x, y);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    };\n\n    StrokeComponent.prototype.computeP = function (x, y) {\n        var ratio = 1.0;\n        var distance = this.computeD(x, y);\n        var length = this.computeL(x, y);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    };\n\n    StrokeComponent.prototype.filterPointByAcquisitionDelta = function (x, y) {\n        var delta = (2 + (this.getWidth() / 4));\n        var ret = false;\n        if (this.getLength() === 0 || Math.abs(this.getX()[this.getLastIndexPoint()] - x) >= delta || Math.abs(this.getY()[this.getLastIndexPoint()] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    };\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n        if (obj) {\n            if (obj.alternates) {\n                for (var i in obj.alternates) {\n                    this.alternates.push(new scope.CharacterInputComponentAlternate(obj.alternates[i]));\n                }\n            }\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(obj) {\n        if (obj) {\n            if (obj.alternate) {\n                this.alternate = obj.alternate;\n            }\n            if (obj.probability) {\n                this.probability = obj.probability;\n            }\n        }\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    /**\n     * Get recognition input\n     *\n     * @method getRecognitionInput\n     * @returns {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.getRecognitionInput = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.setRecognitionInput = function (input) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'char';\n        if (obj) {\n            if (obj.character) {\n                this.character = obj.character;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'string';\n        if (obj) {\n            if (obj.string) {\n                this.string = obj.string;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n        if (obj) {\n            if (obj.language) {\n                this.language = obj.language;\n            }\n            if (obj.textInputMode) {\n                this.textInputMode = obj.textInputMode;\n            }\n            if (obj.contentTypes) {\n                this.contentTypes = obj.contentTypes;\n            }\n            if (obj.subsetKnowledges) {\n                this.subsetKnowledges = obj.subsetKnowledges;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.userLkWords) {\n                this.userLkWords = obj.userLkWords;\n            }\n            if (obj.resultDetail) {\n                this.resultDetail = obj.resultDetail;\n            }\n            if (obj.textProperties) {\n                this.textProperties = new scope.TextProperties(obj.textProperties);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties(obj) {\n        if (obj) {\n            if (obj.textCandidateListSize) {\n                this.textCandidateListSize = obj.textCandidateListSize;\n            }\n            if (obj.wordCandidateListSize) {\n                this.wordCandidateListSize = obj.wordCandidateListSize;\n            }\n            if (obj.wordPredictionListSize) {\n                this.wordPredictionListSize = obj.wordPredictionListSize;\n            }\n            if (obj.wordCompletionListSize) {\n                this.wordCompletionListSize = obj.wordCompletionListSize;\n            }\n            if (obj.characterCandidateListSize) {\n                this.characterCandidateListSize = obj.characterCandidateListSize;\n            }\n            if (obj.discardCaseVariations) {\n                this.discardCaseVariations = obj.discardCaseVariations;\n            }\n            if (obj.discardAccentuationVariations) {\n                this.discardAccentuationVariations = obj.discardAccentuationVariations;\n            }\n            if (obj.disableSpatialOrdering) {\n                this.disableSpatialOrdering = obj.disableSpatialOrdering;\n            }\n            if (obj.glyphDistortion) {\n                this.glyphDistortion = obj.glyphDistortion;\n            }\n            if (obj.enableOutOfLexicon) {\n                this.enableOutOfLexicon = obj.enableOutOfLexicon;\n            }\n            if (obj.spellingDistortion) {\n                this.spellingDistortion = obj.spellingDistortion;\n            }\n        }\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @method getRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        if (obj) {\n            if (obj.rejectDetectionSensitivity) {\n                this.rejectDetectionSensitivity = obj.rejectDetectionSensitivity;\n            }\n            if (obj.doBeautification) {\n                this.doBeautification = obj.doBeautification;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {ShapeParameter}\n     */\n    ShapeRecognitionInput.prototype.getParameters = function () {\n        return new ShapeParameter({\n            rejectDetectionSensitivity: this.rejectDetectionSensitivity,\n            doBeautification: this.doBeautification,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {ShapeParameter} parameters\n     */\n    ShapeRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.rejectDetectionSensitivity = parameters.getRejectDetectionSensitivity();\n            this.doBeautification = parameters.hasBeautification();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @method getRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n            if (obj.columnarOperation) {\n                this.columnarOperation = obj.columnarOperation;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathRecognitionInput.prototype.getParameters = function () {\n        return new MathParameter({\n            resultTypes: this.resultTypes,\n            columnarOperation: this.columnarOperation,\n            userResources: this.userResources,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.resultTypes = parameters.getResultTypes();\n            this.columnarOperation = parameters.isColumnar();\n            this.userResources = parameters.getUserResources();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n\n    /**\n     * Get math input\n     *\n     * @method getRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'accidental';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'arpeggiate';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBar(obj.value);\n            }\n        }\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBeam(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicClef(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicDecoration(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'dots';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'head';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'rest';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'stem';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'tieOrSlur';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'timeSignature';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff(obj) {\n        this.count = 5;\n        this.gap = 20;\n        if (obj) {\n            if (obj.count) {\n                this.count = obj.count;\n            }\n            if (obj.gap) {\n                this.gap = obj.gap;\n            }\n            if (obj.top) {\n                this.top = obj.top;\n            }\n        }\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.divisions) {\n                this.divisions = obj.divisions;\n            }\n            if (obj.staff) {\n                this.staff = new scope.MusicStaff(obj.staff);\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MusicParameter}\n     */\n    MusicRecognitionInput.prototype.getParameters = function () {\n        return new MusicParameter({\n            divisions: this.divisions,\n            staff: this.staff,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity,\n            resultTypes: this.resultTypes,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MusicParameter} parameters\n     */\n    MusicRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.divisions = parameters.getDivisions();\n            this.staff = parameters.getStaff();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n            this.resultTypes = parameters.getResultTypes();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @method getRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n        if (obj) {\n            if (obj.coordinateResolution) {\n                this.coordinateResolution = obj.coordinateResolution;\n            }\n            if (obj.textParameter) {\n                this.textParameter = new scope.TextParameter(obj.textParameter);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @method getRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            if (typeof obj === 'string') {\n                var cpt = obj.split(/[:-]+/);\n                this.startUnit = Number(cpt[0]);\n                this.startComponent = Number(cpt[1]);\n                this.startPoint = Number(cpt[2]);\n                this.endUnit = Number(cpt[3]);\n                this.endComponent = Number(cpt[4]);\n                this.endPoint = Number(cpt[5]);\n            } else {\n                this.startUnit = obj.startUnit;\n                this.startComponent = obj.startComponent;\n                this.startPoint = obj.startPoint;\n                this.endUnit = obj.endUnit;\n                this.endComponent = obj.endComponent;\n                this.endPoint = obj.endPoint;\n            }\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);\n(function (scope) {\n    \n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    case 'OFFICEOPENXMLMATH':\n                        this.results.push(new scope.MathOfficeOpenXmlMathResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MathOfficeOpenXmlMathResultElement result element\n     *\n     * @class MathOfficeOpenXmlMathResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathOfficeOpenXmlMathResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n\n    /**\n     * Inheritance property\n     */\n    MathOfficeOpenXmlMathResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathOfficeOpenXmlMathResultElement.prototype.constructor = MathOfficeOpenXmlMathResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathOfficeOpenXmlMathResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathOfficeOpenXmlMathResultElement = MathOfficeOpenXmlMathResultElement;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);\n\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    NetworkInterface.parseURL = function (url) {\n\n        var parser = document.createElement('a'),\n            searchObject = {},\n            queries, split, i;\n        // Let the browser do the work\n        parser.href = url;\n        // Convert query string to object\n        queries = parser.search.replace(/^\\?/, '').split('&');\n        for (i = 0; i < queries.length; i++) {\n            split = queries[i].split('=');\n            searchObject[split[0]] = split[1];\n        }\n        return {\n            protocol: parser.protocol,\n            host: parser.host,\n            hostname: parser.hostname,\n            port: parser.port,\n            pathname: parser.pathname,\n            search: parser.search,\n            searchObject: searchObject,\n            hash: parser.hash\n        };\n    };\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.xhr = function (type, url, data) {\n\n        return Q.Promise(function (resolve, reject, notify) {\n\n            function onStateChange() {\n                if (request.readyState === 4) {\n                    if (request.status >= 200 && request.status < 300) {\n                        resolve(NetworkInterface.parse(request));\n                    }\n                }\n            }\n\n            function onLoad() {\n                if (request.status >= 200 && request.status < 300) {\n                    resolve(NetworkInterface.parse(request));\n                } else {\n                    reject(new Error(request.responseText));\n                }\n            }\n\n            function onError() {\n                reject(new Error('Can\\'t XHR ' + url));\n            }\n\n            function onProgress(e) {\n                notify(e.loaded / e.total);\n            }\n\n            var request = new XMLHttpRequest();\n            request.open(type, url, true);\n            request.withCredentials = true;\n            request.setRequestHeader('Accept', 'application/json');\n            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            request.onerror = onError;\n            request.onprogress = onProgress;\n            request.onload = onLoad;\n            request.onreadystatechange = onStateChange;\n            request.send(NetworkInterface.transformRequest(data));\n        });\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return scope.NetworkInterface.xhr('GET', src, undefined);\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.put = function (url, data) {\n        return scope.NetworkInterface.xhr('PUT', url, data);\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.post = function (url, data) {\n        return scope.NetworkInterface.xhr('POST', url, data);\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.delete = function (url, data) {\n        return scope.NetworkInterface.xhr('DELETE', url, data);\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n\n\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface() {\n    }\n\n    NetworkWSInterface.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.close();\n            this._url = url;\n        }\n    };\n\n    NetworkWSInterface.prototype.getUrl = function () {\n        return this._url;\n    };\n\n    NetworkWSInterface.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this.close();\n            this._callback = callback;\n        }\n    };\n\n    NetworkWSInterface.prototype.getCallback = function () {\n        return this._callback;\n    };\n\n    NetworkWSInterface.prototype.getState = function () {\n        return _getWebSocketState(this._socket);\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        return this.getState() === 3;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        return this.getState() === 2;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        return this.getState() === 1;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        return this.getState() === 0;\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        if (this.getUrl() && this.getCallback() && ((this.getState() < 0) || this.isClosed())) {\n            this._socket = _openWebSocket(this.getUrl(), this.getCallback());\n        }\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this.getState() < 2) {\n            _closeWebSocket(this._socket, code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.send = function (request) {\n        var state = _getWebSocketState(this._socket);\n        if (state  === 1) {\n            _sendMessage(this._socket, request);\n        }\n    };\n\n    /**\n     *\n     * @param url\n     * @param callback\n     * @returns {WebSocket}\n     * @private\n     */\n    var _openWebSocket = function (url, callback) {\n        function onOpen(e) {\n            callback(e);\n        }\n        function onClose(e) {\n            callback(e);\n        }\n        function onError(e) {\n            callback(e);\n        }\n        function onMessage(e) {\n            callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        }\n\n        var socket = new WebSocket(url);\n        socket.onopen = onOpen;\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n        return socket;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param code\n     * @param reason\n     * @private\n     */\n    var _closeWebSocket = function (socket, code, reason) {\n        if (socket) {\n            socket.close(code, reason);\n        }\n    };\n\n    /**\n     *\n     * @param socket\n     * @returns {*}\n     * @private\n     */\n    var _getWebSocketState = function (socket) {\n        if (socket) {\n            return socket.readyState;\n        }\n        return -1;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param message\n     * @private\n     */\n    var _sendMessage = function (socket, message) {\n        if (socket) {\n            socket.send(JSON.stringify(message));\n        }\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n    }\n\n    AbstractRecognizer.prototype.getProtocol = function() {\n        return this._ssl? 'https://': 'http://';\n    };\n\n    AbstractRecognizer.prototype.getSSL = function() {\n        return this._ssl;\n    };\n\n    AbstractRecognizer.prototype.setSSL = function (ssl) {\n        if (ssl !== undefined) {\n            this._ssl = ssl;\n            this.setUrl(this.getProtocol() + this.getHost());\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl(this.getProtocol() + host);\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getUrl\n     * @returns {String}\n     */\n    AbstractRecognizer.prototype.getUrl = function() {\n        return this.url;\n    };\n\n    /**\n     * Set the recognition service url\n     *\n     * @method setUrl\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.url = url;\n        }\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return scope.NetworkInterface.get(this.getUrl() + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            }\n        );\n    };\n\n    /**\n     * Do REST recognition\n     *\n     * @private\n     * @method doRestRecognition\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.doRestRecognition = function (input, applicationKey, hmacKey, instanceId) {\n        if (input.getComponents) {\n            _filterStrokes(input.getComponents(), this.getPrecision());\n        } else if (input.getInputUnits) {\n            for (var i in input.getInputUnits()) {\n                _filterStrokes(input.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n\n        if (input instanceof scope.TextRecognitionInput) {\n            return _doTextRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.ShapeRecognitionInput) {\n            return _doShapeRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MathRecognitionInput) {\n            return _doMathRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MusicRecognitionInput) {\n            return _doMusicRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.AnalyzerRecognitionInput) {\n            return _doAnalyzerRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * Clear REST recognition\n     *\n     * @method clearRestRecognition\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.clearRestRecognition = function (instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n        return _clearShapeRecognition(this.getUrl(), data);\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @private\n     * @method _doTextRecognition\n     * @param {String} url\n     * @param {TextRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doTextRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.TextRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doShapeRecognition\n     * @param {String} url\n     * @param {ShapeRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doShapeRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.ShapeRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition\n     *\n     * @private\n     * @method _clearShapeRecognition\n     * @param {String} url\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _clearShapeRecognition = function (url, instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doMathRecognition\n     * @param {String} url\n     * @param {MathRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMathRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MathRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @private\n     * @method _doMusicRecognition\n     * @param {String} url\n     * @param {MusicRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMusicRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MusicRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method _doAnalyzerRecognition\n     * @param {String} url\n     * @param {AnalyzerRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doAnalyzerRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.AnalyzerRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.StrokeComponent) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    var _fillData = function (data, input, instanceId, applicationKey, hmacKey) {\n        data.setRecognitionInput(input);\n        data.setApplicationKey(applicationKey);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(_computeHmac(data.getRecognitionInput(), applicationKey, hmacKey));\n        }\n    };\n\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @constructor\n     */\n    function AbstractWSRecognizer() {\n        this._wsInterface = new scope.NetworkWSInterface();\n    }\n\n    AbstractWSRecognizer.prototype.getProtocol = function() {\n        return this._ssl? 'wss://': 'ws://';\n    };\n\n    AbstractWSRecognizer.prototype.getSSL = function() {\n        return this._ssl;\n    };\n\n    AbstractWSRecognizer.prototype.setSSL = function (ssl) {\n        if (ssl !== undefined) {\n            this._ssl = ssl;\n            this.setUrl(this.getProtocol() + this.getHost());\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractWSRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractWSRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl(this.getProtocol() + host);\n        }\n    };\n\n    AbstractWSRecognizer.prototype.setUrl = function (url) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    AbstractWSRecognizer.prototype.getUrl = function () {\n        return this._wsInterface.getUrl();\n    };\n\n    AbstractWSRecognizer.prototype.setCallback = function (callback) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractWSRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractWSRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        if (message.getComponents) {\n            _filterStrokes(message.getComponents(), this.getPrecision());\n        } else if (message.getInputUnits) {\n            for (var i in message.getInputUnits()) {\n                _filterStrokes(message.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(_computeHmac(challenge, applicationKey, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {String} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.StrokeComponent) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript, CryptoJS);\n\n\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, inputUnits, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    TextWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/text');\n        }\n    };\n\n    TextWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, new Error(JSON.stringify(message.data.getError())));\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.TextResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (inputUnits, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.ShapeRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n        return scope.AbstractRecognizer.prototype.clearRestRecognition.call(this, instanceId); // super\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MathRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.MathParameter();\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    MathWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/math');\n        }\n    };\n\n    MathWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, new Error(JSON.stringify(message.data.getError())));\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.MathResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MusicRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * Set the context (legacy code for non-regression)\n     *\n     * @private\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype._setContext = function (context) {\n        this.context = context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    AbstractRenderer.prototype.drawComponents = function (components) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     */\n    AbstractRenderer.prototype.drawComponent = function (component) {\n        if (component instanceof scope.StrokeComponent) {\n            this.drawStroke(component);\n        } else if (component instanceof scope.CharacterInputComponent) {\n            this.drawCharacter(component);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {Rectangle} rectangle\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle) {\n        var params = this.getParameters();\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getRectColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     */\n    AbstractRenderer.prototype.drawCharacter = function (character) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method drawStroke\n     * @param {StrokeComponent} stroke\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke) {\n        if (stroke && stroke.getLength() > 0) {\n            _renderStroke(stroke, this.getContext());\n        }\n    };\n\n    /**\n     * Draw stroke components\n     *\n     * @private\n     * @method drawStrokes\n     * @param {StrokeComponent[]} strokes\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes) {\n        for (var i = 0; i < strokes.length; i++) {\n            this.drawStroke(strokes[i]);\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x: (point.x - Math.sin(angle) * radius),\n            y: (point.y + Math.cos(angle) * radius)\n        }, {\n            x: (point.x + Math.sin(angle) * radius),\n            y: (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x: ((point2.x + point1.x) / 2),\n            y: ((point2.y + point1.y) / 2),\n            p: ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color) {\n        if (color !== undefined) {\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3) {\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++) {\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextDocument} recognitionResult\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (inputUnits, recognitionResult) {\n        this.drawInputUnits(inputUnits);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents());\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractTextInputComponent) {\n                _drawTextComponent(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @private\n     * @method _drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextComponent = function (component, context, parameters) {\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, context, parameters);\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} recognitionResult\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        if (this.isTypesetting()) {\n            this.drawShapes(components, recognitionResult.getSegments());\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                _drawShapePrimitive(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i]);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment) {\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            _drawShapeRecognized(candidate, this.getContext(), this.getParameters());\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            var notRecognized = _extractShapeNotRecognized(components, segment.getInkRanges());\n            this.drawComponents(notRecognized);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges) {\n        var notRecognized = _extractShapeNotRecognized(components, inkRanges);\n        this.drawComponents(notRecognized);\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive) {\n        _drawShapePrimitive(primitive, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @private\n     * @method _drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        for (var i in shapeRecognized.getPrimitives()) {\n            _drawShapePrimitive(shapeRecognized.getPrimitives()[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @private\n     * @method _drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            _drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            _drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @private\n     * @method _drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeLine = function (shapeLine, context, parameters) {\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), context, parameters);\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @private\n     * @method _drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            context, parameters);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param inkRanges\n     * @returns {*}\n     */\n    var _extractShapeNotRecognized = function (components, inkRanges) {\n        var result = [];\n\n        for (var i in inkRanges) {\n            var inkRange = inkRanges[i];\n\n            var firstPointIndex = Math.floor(inkRange.getFirstPoint());\n            var lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n            for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n                var currentStroke = components[strokeIndex];\n                var currentStrokePointCount = currentStroke.getX().length;\n\n                var newStroke = new scope.StrokeComponent(), x = [], y = [];\n\n                for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                    x.push(currentStroke.getX()[pointIndex]);\n                    y.push(currentStroke.getY()[pointIndex]);\n                }\n\n                newStroke.setX(x);\n                newStroke.setY(y);\n                result.push(newStroke);\n            }\n        }\n        return result;\n\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        var notScratchOutComponents = _removeMathScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMathScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getErasedInkRanges()[n].getComponent());\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getInkRanges()[p].getComponent());\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        var notScratchOutComponents = _removeMusicScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents);\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method drawStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRenderer.prototype.drawStaff = function (staff) {\n        _drawStaff(staff, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                _drawMusicNode(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw music node\n     *\n     * @method drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     */\n    MusicRenderer.prototype.drawMusicNode = function (component) {\n        _drawMusicNode(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @private\n     * @method _drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStaff = function (staff, context, parameters) {\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw music node\n     *\n     * @private\n     * @method _drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawMusicNode = function (component, context, parameters) {\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, context, parameters);\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, context, parameters);\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, context, parameters);\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, context, parameters);\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, context, parameters);\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, context, parameters);\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, context, parameters);\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, context, parameters);\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, context, parameters);\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, context, parameters);\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, context, parameters);\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, context, parameters);\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, context, parameters);\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMusicScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        if (this.isTypesetting()) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes());\n            _drawTables(components, recognitionResult.getTables(), this.getContext(), this.getParameters());\n            _drawTextLines(components, recognitionResult.getTextLines(), this.getContext(), this.getParameters());\n            //_drawGroups(components, recognitionResult.getGroups(), this.getContext(), this.getParameters()); // TODO: not implemented\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @private\n     * @method _drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTables = function (components, tables, context, parameters) {\n        for (var i in tables) {\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @private\n     * @method _drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                _drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    _drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @private\n     * @method _drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n            context.textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            context.fillText(text, boundingBox.getX(), baseline);\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @private\n     * @method _drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n\n    /**\n     * Draw Underline\n     *\n     * @private\n     * @method _drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), context, parameters);\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @private\n     * @method _drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            var rectangle = cell.getData().getBoundingBox();\n            context.save();\n            try {\n                context.fillStyle = parameters.getRectColor();\n                context.strokeStyle = parameters.getColor();\n                context.lineWidth = 0.5 * parameters.getWidth();\n                context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n            } finally {\n                context.restore();\n            }\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Image Renderer. It's used to calculate the Image ink rendering in HTML5 canvas\n     *\n     * @class ImageRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ImageRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ImageRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ImageRenderer.prototype.constructor = ImageRenderer;\n\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    ImageRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                console.log(components);\n                console.log(typeof component);\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    // Export\n    scope.ImageRenderer = ImageRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n\n\n\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n        this.canvasRatio = 1;\n\n        // Capture\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n        this.canvasRatio = _getCanvasRatio(this._renderingCanvas);\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer();\n        this._mathRecognizer = new scope.MathRecognizer();\n        this._shapeRecognizer = new scope.ShapeRecognizer();\n        this._musicRecognizer = new scope.MusicRecognizer();\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer();\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this));\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this));\n\n        this._attachListeners(element);\n\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            ssl: true,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        // Recognition type\n        this.setType(this.options.type);\n\n        this.setHost(this.options.host);\n        this.setSSL(this.options.ssl);\n\n        this.setTextParameters(this.options.textParameters); // jshint ignore:line\n        this.setMathParameters(this.options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(this.options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(this.options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(this.options.analyzerParameters); // jshint ignore:line\n\n        this.setProtocol(this.options.protocol);\n        this.setTimeout(this.options.timeout);\n        this.setApplicationKey(this.options.applicationKey);\n        this.setHmacKey(this.options.hmacKey);\n\n        this.setPenParameters(this.options.penParameters);\n\n        this.setPrecision(this.options.precision);\n        this.setTypeset(this.options.typeset);\n        this.setComponents(this.options.components);\n\n        this.setWidth(this.options.width);\n        this.setHeight(this.options.height);\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        if(width > 0){\n            this._captureCanvas.width = width * this.canvasRatio;\n            this._captureCanvas.style.width = width + 'px';\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n            this._renderingCanvas.width = width * this.canvasRatio;\n            this._renderingCanvas.style.width = width + 'px';\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        }\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        if(height > 0){\n            this._captureCanvas.height = height * this.canvasRatio;\n            this._captureCanvas.style.height = height + 'px';\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n            this._renderingCanvas.height = height * this.canvasRatio;\n            this._renderingCanvas.style.height = height + 'px';\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        }\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Set the recognition precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    InkPaper.prototype.setPrecision = function (precision) {\n        this._textRecognizer.setPrecision(precision);\n        this._textWSRecognizer.setPrecision(precision);\n        this._mathRecognizer.setPrecision(precision);\n        this._mathWSRecognizer.setPrecision(precision);\n        this._shapeRecognizer.setPrecision(precision);\n        this._musicRecognizer.setPrecision(precision);\n        this._analyzerRecognizer.setPrecision(precision);\n    };\n\n    /**\n     * Get the default components\n     *\n     * @method getComponents\n     * @return {Array} components\n     */\n    InkPaper.prototype.getComponents = function () {\n        return this.options.components;\n    };\n\n    /**\n     * Set the default components\n     *\n     * @method setComponents\n     * @param {Array} components\n     */\n    InkPaper.prototype.setComponents = function (components) {\n        this.options.components = components;\n        this._initRenderingCanvas();\n    };\n\n\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n            this._initRenderingCanvas();\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._selectedRenderer.getParameters()[i] = penParameters[i]; // Override options\n                }\n            }\n            var params = this._selectedRenderer.getParameters();\n            this._inkGrabber.setParameters(params); // Override options\n            this._textRenderer.setParameters(params); // Override options\n            this._mathRenderer.setParameters(params); // Override options\n            this._shapeRenderer.setParameters(params); // Override options\n            this._musicRenderer.setParameters(params); // Override options\n            this._analyzerRenderer.setParameters(params); // Override options\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @param {String} [inputMode] input mode\n     */\n    InkPaper.prototype.getAvailableLanguages = function (inputMode) {\n        this._selectedRESTRecognizer.getAvailableLanguageList(\n            this.getApplicationKey(),\n            inputMode ? inputMode : this._textRecognizer.getParameters().getInputMode()\n        ).then(\n            function (data) {\n                this._onResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        return this._doRecognition(this.components);\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this.components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            this.redoComponents.push(this.components.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this.redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this.components.push(this.redoComponents.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            if (this._instanceId) {\n                this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                this._instanceId = undefined;\n            }\n        }\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this._inkGrabber.clear();\n        this._instanceId = undefined;\n\n        this._initRenderingCanvas();\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n        var sizeChanged = false;\n        if (this._captureCanvas.clientHeight != this._captureCanvas.height) {\n            this._captureCanvas.height = this._captureCanvas.clientHeight;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight;\n            sizeChanged = true;\n        }\n\n        if (this._captureCanvas.clientWidth != this._captureCanvas.width) {\n            this._captureCanvas.width = this._captureCanvas.clientWidth;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth;\n            sizeChanged = true;\n        }\n\n        //Safari trash the canvas content when heigth or width are modified.\n        if(sizeChanged){\n            this._initRenderingCanvas();\n        }\n\n        if (this.canRedo()) {\n            this.redoComponents = [];\n            this._onChange();\n        }\n\n        this._inkGrabber.startCapture(x, y, t);\n\n\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this.components.push(stroke);\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            }\n        }\n    };\n\n    /**\n     * Do recognition\n     *\n     * @private\n     * @method _doRecognition\n     * @param {AbstractComponent[]} components Input components\n     */\n    InkPaper.prototype._doRecognition = function (components) {\n        if (components.length > 0) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                if (this._initialized) {\n                    var inputWS = [];\n                    if (this._selectedRecognizer instanceof scope.TextWSRecognizer) {\n                        var inputUnitWS = new scope.TextInputUnit();\n                        inputUnitWS.setComponents(this.getComponents().concat(components.slice(this.lastNonRecoComponentIdx)));\n                        inputWS = [inputUnitWS];\n                    } else {\n                        inputWS = components.slice(this.lastNonRecoComponentIdx);\n                    }\n                    this.lastNonRecoComponentIdx = components.length;\n\n\n                    if (this.isStarted) {\n                        this._selectedRecognizer.continueWSRecognition(inputWS, this._instanceId);\n                    } else {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(inputWS);\n                    }\n                }\n            } else {\n                var input = [];\n                if (this._selectedRecognizer instanceof scope.TextRecognizer) {\n                    var inputUnit = new scope.TextInputUnit();\n                    inputUnit.setComponents(this.getComponents().concat(components));\n                    input = [inputUnit];\n                } else if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                    input = components.slice(this.lastNonRecoComponentIdx);\n                    this.lastNonRecoComponentIdx = components.length;\n                } else {\n                    input = input.concat(this.getComponents(), components);\n                }\n                this._selectedRecognizer.doSimpleRecognition(\n                    this.getApplicationKey(),\n                    this._instanceId,\n                    input,\n                    this.getHmacKey()\n                ).then(\n                    function (data) {\n                        this._parseResult(data, input);\n                    }.bind(this),\n                    function (error) {\n                        this._onResult(undefined, error);\n                    }.bind(this)\n                );\n            }\n        } else {\n            this.isStarted = false;\n            this._selectedRenderer.clear();\n            this._initRenderingCanvas();\n            this._onResult();\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('error', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function () {\n        var data = {\n            canUndo: this.canUndo(),\n            undoLength: this.components.length,\n            canRedo: this.canRedo(),\n            redoLength: this.redoComponents.length\n        };\n\n        if (this.changeCallback) {\n            this.changeCallback(data)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: data}));\n    };\n\n    InkPaper.prototype._parseResult = function (data, input) {\n\n        if (!this._instanceId) {\n            this._instanceId = data.getInstanceId();\n        } else if (this._instanceId !== data.getInstanceId()) {\n            this._onResult(data);\n            return data;\n        }\n\n        if (data.getDocument().hasScratchOutResults() || this._selectedRenderer.isTypesetting()) {\n            this._selectedRenderer.clear();\n            this._selectedRenderer.drawRecognitionResult(input, data.getDocument());\n        }\n\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service url\n     *\n     * @param {String} host\n     */\n    InkPaper.prototype.setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._textWSRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._mathWSRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * @private\n     */\n    InkPaper.prototype.setSSL = function (ssl) {\n        this._textRecognizer.setSSL(ssl);\n        this._textWSRecognizer.setSSL(ssl);\n        this._mathRecognizer.setSSL(ssl);\n        this._mathWSRecognizer.setSSL(ssl);\n        this._shapeRecognizer.setSSL(ssl);\n        this._musicRecognizer.setSSL(ssl);\n        this._analyzerRecognizer.setSSL(ssl);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n\n        //Desactivation of contextmenu to prevent safari to fire pointerdown only once\n        element.addEventListener(\"contextmenu\", function(e){\n            e.preventDefault();\n            e.stopPropagation();\n            return false; }\n        );\n\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n        this._drawInput(this.components);\n    };\n\n    InkPaper.prototype._drawInput = function (components) {\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            }\n        }\n        this._selectedRenderer.drawComponents(this.getComponents().concat(components));\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this.lastNonRecoComponentIdx = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge(this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    break;\n                default:\n                    this._parseResult(message, this.components);\n                    break;\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Return the stats allowing to monitor what ink size is send to the server.\n     * @returns Stats objects format {strokesCount : 0, pointsCount : 0, byteSize : 0, humanSize : 0, humanUnit : 'BYTE'} humanUnit could have the values BYTE, BYTES, KiB, MiB\n     */\n    InkPaper.prototype.getStats = function () {\n        var stats = {strokesCount : 0, pointsCount : 0, byteSize : 0, humanSize : 0, humanUnit : 'BYTE'};\n        if(this.components){\n            stats.strokesCount = this.components.length;\n            var pointsCount = 0;\n            for(var strokeNb = 0; strokeNb < this.components.length; strokeNb++){\n                pointsCount = pointsCount + this.components[strokeNb].x.length;\n            }\n            stats.strokesCount = this.components.length;\n            stats.pointsCount = pointsCount;\n            //We start with 270 as it is the size in bytes. Make a real computation implies to recode a doRecogntion\n            var byteSize = 270;\n            byteSize = JSON.stringify(this.components).length;\n            stats.byteSize = byteSize;\n            if (byteSize < 270) {\n                stats.humanUnit = 'BYTE';\n                stats.byteSize = 0;\n                stats.humanSize  = 0;\n            } else if (byteSize < 2048) {\n                stats.humanUnit = 'BYTES';\n                stats.humanSize  = byteSize;\n            } else if (byteSize < 1024 * 1024) {\n                stats.humanUnit = 'KiB';\n                stats.humanSize = (byteSize / 1024).toFixed(2);\n            } else {\n                stats.humanUnit = 'MiB';\n                stats.humanSize = (byteSize / 1024 / 1024).toFixed(2);\n            }\n        }\n        return stats;\n    };\n\n    /**\n     *\n     * @param marginX the horizontal margin to apply (by default 10)\n     * @param marginY the vertical margin to apply (by default 10)\n     * @returns {ImageData} Build an ImageData object with content shrink to border of strokes.\n     * @private\n     */\n    InkPaper.prototype.getInkAsImageData = function (marginX, marginY) {\n        if(!marginX){\n            marginX = 10;\n        }\n        if(!marginY){\n            marginY = 10;\n        }\n        console.log({marginX : marginX, marginY : marginY});\n        if(this.components && this.components.length > 0){\n            var updatedStrokes ;\n            var strokesCount = this.components.length;\n            //Initializing min and max\n            var minX = this.components[0].x[0];\n            var maxX = this.components[0].x[0];\n            var minY = this.components[0].y[0];\n            var maxY = this.components[0].y[0];\n            // Computing the min and max for x and y\n            for(var strokeNb = 0; strokeNb < this.components.length; strokeNb++){\n                var pointCount = this.components[strokeNb].x.length;\n                for(var pointNb = 0; pointNb < pointCount; pointNb ++){\n                    var currentX = this.components[strokeNb].x[pointNb];\n                    var currentY = this.components[strokeNb].y[pointNb];\n                    if(currentX < minX){\n                        minX = currentX;\n                    }\n                    if(currentX > maxX){\n                        maxX = currentX;\n                    }\n                    if(currentY < minY){\n                        minY = currentY;\n                    }\n                    if(currentY > maxY){\n                        maxY = currentY;\n                    }\n                }\n            }\n            var nonDisplayCanvas = document.createElement('canvas');\n            nonDisplayCanvas.width = (maxX )+(2*marginX);\n            nonDisplayCanvas.height = (maxY )+(2*marginY)\n\n            var ctx =  nonDisplayCanvas.getContext(\"2d\");\n\n            var imageRendered = new scope.ImageRenderer(ctx);\n            imageRendered.drawComponents(this.components, ctx);\n\n            // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData\n            var imageData = ctx.getImageData(minX-marginX, minY-marginY, (maxX-minX )+(2*marginX), (maxY-minY )+(2*marginY));\n            return imageData;\n        } else {\n            return;\n        }\n    };\n\n    /**\n     *\n     * @param marginX the horizontal margin to apply (by default 10)\n     * @param marginY the vertical margin to apply (by default 10)\n     * @returns {String} Build an String containg dataUrl with content shrink to border of strokes.\n     * @private\n     */\n    InkPaper.prototype.getInkAsPng = function (marginX, marginY) {\n        var imageRenderingCanvas = document.createElement('canvas');\n        imageRenderingCanvas.style.display = 'none';\n\n        var imageDataToRender = this.getInkAsImageData();\n        imageRenderingCanvas.width = imageDataToRender.width;\n        imageRenderingCanvas.style.width = imageDataToRender.width +'px';\n        imageRenderingCanvas.height = imageDataToRender.height;\n        imageRenderingCanvas.style.height = imageDataToRender.height +'px';\n        var ctx = imageRenderingCanvas.getContext('2d');\n        ctx.putImageData(imageDataToRender, 0, 0);\n        var ret = imageRenderingCanvas.toDataURL(\"image/png\");\n        return ret;\n    }\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n    /**\n     * Tool to get canvas ratio (retina display)\n     *\n     * @private\n     * @param {Element} canvas\n     * @returns {Number}\n     */\n    function _getCanvasRatio(canvas) {\n        if (canvas) {\n            var context = canvas.getContext('2d'),\n                devicePixelRatio = window.devicePixelRatio || 1,\n                backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        }\n        return 1;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n","/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE',\n            OFFICEOPENXMLMATH : 'OFFICEOPENXMLMATH'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n","'use strict';\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters(obj) {\n        this.color = 'rgba(0, 0, 0, 0.9)';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = 'normal';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n        if (obj) {\n            this.color = obj.color;\n            this.rectColor = obj.rectColor;\n            this.font = obj.font;\n            this.decoration = obj.decoration;\n            this.width = obj.width;\n            this.pressureType = obj.pressureType;\n            this.alpha = obj.alpha;\n        }\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent a simple StrokeComponent input component\n     *\n     * @class StrokeComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            if (obj.x) {\n                this.x = obj.x;\n            }\n            if (obj.y) {\n                this.y = obj.y;\n            }\n            if (obj.t) {\n                this.t = obj.t;\n            }\n            if (obj.p) {\n                this.p = obj.p;\n            }\n            if (obj.d) {\n                this.d = obj.d;\n            }\n            if (obj.l) {\n                this.l = obj.l;\n            }\n            if (obj.color) {\n                this.color = obj.color;\n            }\n            if (obj.alpha) {\n                this.alpha = obj.alpha;\n            }\n            if (obj.width) {\n                this.width = obj.width;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**     *\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    StrokeComponent.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    StrokeComponent.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    StrokeComponent.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    StrokeComponent.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    StrokeComponent.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    StrokeComponent.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    StrokeComponent.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    StrokeComponent.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    StrokeComponent.prototype.toFixed = function (precision) {\n        if (precision !== undefined) {\n            for (var i in this.x) {\n                this.x[i] = this.x[i].toFixed(precision);\n                this.y[i] = this.y[i].toFixed(precision);\n            }\n        }\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (this.filterPointByAcquisitionDelta(x, y)) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(this.computeP(x, y));\n            this.addD(this.computeD(x, y));\n            this.addL(this.computeL(x, y));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    StrokeComponent.prototype.computeD = function (x, y) {\n        var distance = Math.sqrt(Math.pow((y - this.getY()[this.getLastIndexPoint() - 1]), 2) + Math.pow((x - this.getX()[this.getLastIndexPoint() - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    };\n\n    StrokeComponent.prototype.computeL = function (x, y) {\n        var length = this.getL()[this.getLastIndexPoint() - 1] + this.computeD(x, y);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    };\n\n    StrokeComponent.prototype.computeP = function (x, y) {\n        var ratio = 1.0;\n        var distance = this.computeD(x, y);\n        var length = this.computeL(x, y);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    };\n\n    StrokeComponent.prototype.filterPointByAcquisitionDelta = function (x, y) {\n        var delta = (2 + (this.getWidth() / 4));\n        var ret = false;\n        if (this.getLength() === 0 || Math.abs(this.getX()[this.getLastIndexPoint()] - x) >= delta || Math.abs(this.getY()[this.getLastIndexPoint()] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    };\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n        if (obj) {\n            if (obj.alternates) {\n                for (var i in obj.alternates) {\n                    this.alternates.push(new scope.CharacterInputComponentAlternate(obj.alternates[i]));\n                }\n            }\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(obj) {\n        if (obj) {\n            if (obj.alternate) {\n                this.alternate = obj.alternate;\n            }\n            if (obj.probability) {\n                this.probability = obj.probability;\n            }\n        }\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    /**\n     * Get recognition input\n     *\n     * @method getRecognitionInput\n     * @returns {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.getRecognitionInput = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.setRecognitionInput = function (input) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'char';\n        if (obj) {\n            if (obj.character) {\n                this.character = obj.character;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'string';\n        if (obj) {\n            if (obj.string) {\n                this.string = obj.string;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n        if (obj) {\n            if (obj.language) {\n                this.language = obj.language;\n            }\n            if (obj.textInputMode) {\n                this.textInputMode = obj.textInputMode;\n            }\n            if (obj.contentTypes) {\n                this.contentTypes = obj.contentTypes;\n            }\n            if (obj.subsetKnowledges) {\n                this.subsetKnowledges = obj.subsetKnowledges;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.userLkWords) {\n                this.userLkWords = obj.userLkWords;\n            }\n            if (obj.resultDetail) {\n                this.resultDetail = obj.resultDetail;\n            }\n            if (obj.textProperties) {\n                this.textProperties = new scope.TextProperties(obj.textProperties);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties(obj) {\n        if (obj) {\n            if (obj.textCandidateListSize) {\n                this.textCandidateListSize = obj.textCandidateListSize;\n            }\n            if (obj.wordCandidateListSize) {\n                this.wordCandidateListSize = obj.wordCandidateListSize;\n            }\n            if (obj.wordPredictionListSize) {\n                this.wordPredictionListSize = obj.wordPredictionListSize;\n            }\n            if (obj.wordCompletionListSize) {\n                this.wordCompletionListSize = obj.wordCompletionListSize;\n            }\n            if (obj.characterCandidateListSize) {\n                this.characterCandidateListSize = obj.characterCandidateListSize;\n            }\n            if (obj.discardCaseVariations) {\n                this.discardCaseVariations = obj.discardCaseVariations;\n            }\n            if (obj.discardAccentuationVariations) {\n                this.discardAccentuationVariations = obj.discardAccentuationVariations;\n            }\n            if (obj.disableSpatialOrdering) {\n                this.disableSpatialOrdering = obj.disableSpatialOrdering;\n            }\n            if (obj.glyphDistortion) {\n                this.glyphDistortion = obj.glyphDistortion;\n            }\n            if (obj.enableOutOfLexicon) {\n                this.enableOutOfLexicon = obj.enableOutOfLexicon;\n            }\n            if (obj.spellingDistortion) {\n                this.spellingDistortion = obj.spellingDistortion;\n            }\n        }\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @method getRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        if (obj) {\n            if (obj.rejectDetectionSensitivity) {\n                this.rejectDetectionSensitivity = obj.rejectDetectionSensitivity;\n            }\n            if (obj.doBeautification) {\n                this.doBeautification = obj.doBeautification;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {ShapeParameter}\n     */\n    ShapeRecognitionInput.prototype.getParameters = function () {\n        return new ShapeParameter({\n            rejectDetectionSensitivity: this.rejectDetectionSensitivity,\n            doBeautification: this.doBeautification,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {ShapeParameter} parameters\n     */\n    ShapeRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.rejectDetectionSensitivity = parameters.getRejectDetectionSensitivity();\n            this.doBeautification = parameters.hasBeautification();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @method getRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n            if (obj.columnarOperation) {\n                this.columnarOperation = obj.columnarOperation;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathRecognitionInput.prototype.getParameters = function () {\n        return new MathParameter({\n            resultTypes: this.resultTypes,\n            columnarOperation: this.columnarOperation,\n            userResources: this.userResources,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.resultTypes = parameters.getResultTypes();\n            this.columnarOperation = parameters.isColumnar();\n            this.userResources = parameters.getUserResources();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n\n    /**\n     * Get math input\n     *\n     * @method getRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'accidental';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'arpeggiate';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBar(obj.value);\n            }\n        }\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBeam(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicClef(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicDecoration(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'dots';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'head';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'rest';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'stem';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'tieOrSlur';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'timeSignature';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff(obj) {\n        this.count = 5;\n        this.gap = 20;\n        if (obj) {\n            if (obj.count) {\n                this.count = obj.count;\n            }\n            if (obj.gap) {\n                this.gap = obj.gap;\n            }\n            if (obj.top) {\n                this.top = obj.top;\n            }\n        }\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.divisions) {\n                this.divisions = obj.divisions;\n            }\n            if (obj.staff) {\n                this.staff = new scope.MusicStaff(obj.staff);\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MusicParameter}\n     */\n    MusicRecognitionInput.prototype.getParameters = function () {\n        return new MusicParameter({\n            divisions: this.divisions,\n            staff: this.staff,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity,\n            resultTypes: this.resultTypes,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MusicParameter} parameters\n     */\n    MusicRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.divisions = parameters.getDivisions();\n            this.staff = parameters.getStaff();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n            this.resultTypes = parameters.getResultTypes();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @method getRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n        if (obj) {\n            if (obj.coordinateResolution) {\n                this.coordinateResolution = obj.coordinateResolution;\n            }\n            if (obj.textParameter) {\n                this.textParameter = new scope.TextParameter(obj.textParameter);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @method getRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            if (typeof obj === 'string') {\n                var cpt = obj.split(/[:-]+/);\n                this.startUnit = Number(cpt[0]);\n                this.startComponent = Number(cpt[1]);\n                this.startPoint = Number(cpt[2]);\n                this.endUnit = Number(cpt[3]);\n                this.endComponent = Number(cpt[4]);\n                this.endPoint = Number(cpt[5]);\n            } else {\n                this.startUnit = obj.startUnit;\n                this.startComponent = obj.startComponent;\n                this.startPoint = obj.startPoint;\n                this.endUnit = obj.endUnit;\n                this.endComponent = obj.endComponent;\n                this.endPoint = obj.endPoint;\n            }\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    case 'OFFICEOPENXMLMATH':\n                        this.results.push(new scope.MathOfficeOpenXmlMathResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MathOfficeOpenXmlMathResultElement result element\n     *\n     * @class MathOfficeOpenXmlMathResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathOfficeOpenXmlMathResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n\n    /**\n     * Inheritance property\n     */\n    MathOfficeOpenXmlMathResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathOfficeOpenXmlMathResultElement.prototype.constructor = MathOfficeOpenXmlMathResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathOfficeOpenXmlMathResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathOfficeOpenXmlMathResultElement = MathOfficeOpenXmlMathResultElement;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);","'use strict';\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    NetworkInterface.parseURL = function (url) {\n\n        var parser = document.createElement('a'),\n            searchObject = {},\n            queries, split, i;\n        // Let the browser do the work\n        parser.href = url;\n        // Convert query string to object\n        queries = parser.search.replace(/^\\?/, '').split('&');\n        for (i = 0; i < queries.length; i++) {\n            split = queries[i].split('=');\n            searchObject[split[0]] = split[1];\n        }\n        return {\n            protocol: parser.protocol,\n            host: parser.host,\n            hostname: parser.hostname,\n            port: parser.port,\n            pathname: parser.pathname,\n            search: parser.search,\n            searchObject: searchObject,\n            hash: parser.hash\n        };\n    };\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.xhr = function (type, url, data) {\n\n        return Q.Promise(function (resolve, reject, notify) {\n\n            function onStateChange() {\n                if (request.readyState === 4) {\n                    if (request.status >= 200 && request.status < 300) {\n                        resolve(NetworkInterface.parse(request));\n                    }\n                }\n            }\n\n            function onLoad() {\n                if (request.status >= 200 && request.status < 300) {\n                    resolve(NetworkInterface.parse(request));\n                } else {\n                    reject(new Error(request.responseText));\n                }\n            }\n\n            function onError() {\n                reject(new Error('Can\\'t XHR ' + url));\n            }\n\n            function onProgress(e) {\n                notify(e.loaded / e.total);\n            }\n\n            var request = new XMLHttpRequest();\n            request.open(type, url, true);\n            request.withCredentials = true;\n            request.setRequestHeader('Accept', 'application/json');\n            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            request.onerror = onError;\n            request.onprogress = onProgress;\n            request.onload = onLoad;\n            request.onreadystatechange = onStateChange;\n            request.send(NetworkInterface.transformRequest(data));\n        });\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return scope.NetworkInterface.xhr('GET', src, undefined);\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.put = function (url, data) {\n        return scope.NetworkInterface.xhr('PUT', url, data);\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.post = function (url, data) {\n        return scope.NetworkInterface.xhr('POST', url, data);\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.delete = function (url, data) {\n        return scope.NetworkInterface.xhr('DELETE', url, data);\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n","'use strict';\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface() {\n    }\n\n    NetworkWSInterface.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.close();\n            this._url = url;\n        }\n    };\n\n    NetworkWSInterface.prototype.getUrl = function () {\n        return this._url;\n    };\n\n    NetworkWSInterface.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this.close();\n            this._callback = callback;\n        }\n    };\n\n    NetworkWSInterface.prototype.getCallback = function () {\n        return this._callback;\n    };\n\n    NetworkWSInterface.prototype.getState = function () {\n        return _getWebSocketState(this._socket);\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        return this.getState() === 3;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        return this.getState() === 2;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        return this.getState() === 1;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        return this.getState() === 0;\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        if (this.getUrl() && this.getCallback() && ((this.getState() < 0) || this.isClosed())) {\n            this._socket = _openWebSocket(this.getUrl(), this.getCallback());\n        }\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this.getState() < 2) {\n            _closeWebSocket(this._socket, code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.send = function (request) {\n        var state = _getWebSocketState(this._socket);\n        if (state  === 1) {\n            _sendMessage(this._socket, request);\n        }\n    };\n\n    /**\n     *\n     * @param url\n     * @param callback\n     * @returns {WebSocket}\n     * @private\n     */\n    var _openWebSocket = function (url, callback) {\n        function onOpen(e) {\n            callback(e);\n        }\n        function onClose(e) {\n            callback(e);\n        }\n        function onError(e) {\n            callback(e);\n        }\n        function onMessage(e) {\n            callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        }\n\n        var socket = new WebSocket(url);\n        socket.onopen = onOpen;\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n        return socket;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param code\n     * @param reason\n     * @private\n     */\n    var _closeWebSocket = function (socket, code, reason) {\n        if (socket) {\n            socket.close(code, reason);\n        }\n    };\n\n    /**\n     *\n     * @param socket\n     * @returns {*}\n     * @private\n     */\n    var _getWebSocketState = function (socket) {\n        if (socket) {\n            return socket.readyState;\n        }\n        return -1;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param message\n     * @private\n     */\n    var _sendMessage = function (socket, message) {\n        if (socket) {\n            socket.send(JSON.stringify(message));\n        }\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n    }\n\n    AbstractRecognizer.prototype.getProtocol = function() {\n        return this._ssl? 'https://': 'http://';\n    };\n\n    AbstractRecognizer.prototype.getSSL = function() {\n        return this._ssl;\n    };\n\n    AbstractRecognizer.prototype.setSSL = function (ssl) {\n        if (ssl !== undefined) {\n            this._ssl = ssl;\n            this.setUrl(this.getProtocol() + this.getHost());\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl(this.getProtocol() + host);\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getUrl\n     * @returns {String}\n     */\n    AbstractRecognizer.prototype.getUrl = function() {\n        return this.url;\n    };\n\n    /**\n     * Set the recognition service url\n     *\n     * @method setUrl\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.url = url;\n        }\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return scope.NetworkInterface.get(this.getUrl() + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            }\n        );\n    };\n\n    /**\n     * Do REST recognition\n     *\n     * @private\n     * @method doRestRecognition\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.doRestRecognition = function (input, applicationKey, hmacKey, instanceId) {\n        if (input.getComponents) {\n            _filterStrokes(input.getComponents(), this.getPrecision());\n        } else if (input.getInputUnits) {\n            for (var i in input.getInputUnits()) {\n                _filterStrokes(input.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n\n        if (input instanceof scope.TextRecognitionInput) {\n            return _doTextRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.ShapeRecognitionInput) {\n            return _doShapeRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MathRecognitionInput) {\n            return _doMathRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MusicRecognitionInput) {\n            return _doMusicRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.AnalyzerRecognitionInput) {\n            return _doAnalyzerRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * Clear REST recognition\n     *\n     * @method clearRestRecognition\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.clearRestRecognition = function (instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n        return _clearShapeRecognition(this.getUrl(), data);\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @private\n     * @method _doTextRecognition\n     * @param {String} url\n     * @param {TextRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doTextRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.TextRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doShapeRecognition\n     * @param {String} url\n     * @param {ShapeRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doShapeRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.ShapeRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition\n     *\n     * @private\n     * @method _clearShapeRecognition\n     * @param {String} url\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _clearShapeRecognition = function (url, instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doMathRecognition\n     * @param {String} url\n     * @param {MathRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMathRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MathRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @private\n     * @method _doMusicRecognition\n     * @param {String} url\n     * @param {MusicRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMusicRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MusicRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method _doAnalyzerRecognition\n     * @param {String} url\n     * @param {AnalyzerRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doAnalyzerRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.AnalyzerRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.StrokeComponent) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    var _fillData = function (data, input, instanceId, applicationKey, hmacKey) {\n        data.setRecognitionInput(input);\n        data.setApplicationKey(applicationKey);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(_computeHmac(data.getRecognitionInput(), applicationKey, hmacKey));\n        }\n    };\n\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @constructor\n     */\n    function AbstractWSRecognizer() {\n        this._wsInterface = new scope.NetworkWSInterface();\n    }\n\n    AbstractWSRecognizer.prototype.getProtocol = function() {\n        return this._ssl? 'wss://': 'ws://';\n    };\n\n    AbstractWSRecognizer.prototype.getSSL = function() {\n        return this._ssl;\n    };\n\n    AbstractWSRecognizer.prototype.setSSL = function (ssl) {\n        if (ssl !== undefined) {\n            this._ssl = ssl;\n            this.setUrl(this.getProtocol() + this.getHost());\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractWSRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractWSRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl(this.getProtocol() + host);\n        }\n    };\n\n    AbstractWSRecognizer.prototype.setUrl = function (url) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    AbstractWSRecognizer.prototype.getUrl = function () {\n        return this._wsInterface.getUrl();\n    };\n\n    AbstractWSRecognizer.prototype.setCallback = function (callback) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractWSRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractWSRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        if (message.getComponents) {\n            _filterStrokes(message.getComponents(), this.getPrecision());\n        } else if (message.getInputUnits) {\n            for (var i in message.getInputUnits()) {\n                _filterStrokes(message.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(_computeHmac(challenge, applicationKey, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {String} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.StrokeComponent) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript, CryptoJS);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, inputUnits, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    TextWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/text');\n        }\n    };\n\n    TextWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, new Error(JSON.stringify(message.data.getError())));\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.TextResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (inputUnits, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.ShapeRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n        return scope.AbstractRecognizer.prototype.clearRestRecognition.call(this, instanceId); // super\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MathRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.MathParameter();\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    MathWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/math');\n        }\n    };\n\n    MathWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, new Error(JSON.stringify(message.data.getError())));\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.MathResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MusicRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * Set the context (legacy code for non-regression)\n     *\n     * @private\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype._setContext = function (context) {\n        this.context = context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    AbstractRenderer.prototype.drawComponents = function (components) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     */\n    AbstractRenderer.prototype.drawComponent = function (component) {\n        if (component instanceof scope.StrokeComponent) {\n            this.drawStroke(component);\n        } else if (component instanceof scope.CharacterInputComponent) {\n            this.drawCharacter(component);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {Rectangle} rectangle\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle) {\n        var params = this.getParameters();\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getRectColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     */\n    AbstractRenderer.prototype.drawCharacter = function (character) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method drawStroke\n     * @param {StrokeComponent} stroke\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke) {\n        if (stroke && stroke.getLength() > 0) {\n            _renderStroke(stroke, this.getContext());\n        }\n    };\n\n    /**\n     * Draw stroke components\n     *\n     * @private\n     * @method drawStrokes\n     * @param {StrokeComponent[]} strokes\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes) {\n        for (var i = 0; i < strokes.length; i++) {\n            this.drawStroke(strokes[i]);\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x: (point.x - Math.sin(angle) * radius),\n            y: (point.y + Math.cos(angle) * radius)\n        }, {\n            x: (point.x + Math.sin(angle) * radius),\n            y: (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x: ((point2.x + point1.x) / 2),\n            y: ((point2.y + point1.y) / 2),\n            p: ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color) {\n        if (color !== undefined) {\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3) {\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++) {\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextDocument} recognitionResult\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (inputUnits, recognitionResult) {\n        this.drawInputUnits(inputUnits);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents());\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractTextInputComponent) {\n                _drawTextComponent(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @private\n     * @method _drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextComponent = function (component, context, parameters) {\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, context, parameters);\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} recognitionResult\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        if (this.isTypesetting()) {\n            this.drawShapes(components, recognitionResult.getSegments());\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                _drawShapePrimitive(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i]);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment) {\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            _drawShapeRecognized(candidate, this.getContext(), this.getParameters());\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            var notRecognized = _extractShapeNotRecognized(components, segment.getInkRanges());\n            this.drawComponents(notRecognized);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges) {\n        var notRecognized = _extractShapeNotRecognized(components, inkRanges);\n        this.drawComponents(notRecognized);\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive) {\n        _drawShapePrimitive(primitive, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @private\n     * @method _drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        for (var i in shapeRecognized.getPrimitives()) {\n            _drawShapePrimitive(shapeRecognized.getPrimitives()[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @private\n     * @method _drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            _drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            _drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @private\n     * @method _drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeLine = function (shapeLine, context, parameters) {\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), context, parameters);\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @private\n     * @method _drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            context, parameters);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param inkRanges\n     * @returns {*}\n     */\n    var _extractShapeNotRecognized = function (components, inkRanges) {\n        var result = [];\n\n        for (var i in inkRanges) {\n            var inkRange = inkRanges[i];\n\n            var firstPointIndex = Math.floor(inkRange.getFirstPoint());\n            var lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n            for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n                var currentStroke = components[strokeIndex];\n                var currentStrokePointCount = currentStroke.getX().length;\n\n                var newStroke = new scope.StrokeComponent(), x = [], y = [];\n\n                for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                    x.push(currentStroke.getX()[pointIndex]);\n                    y.push(currentStroke.getY()[pointIndex]);\n                }\n\n                newStroke.setX(x);\n                newStroke.setY(y);\n                result.push(newStroke);\n            }\n        }\n        return result;\n\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        var notScratchOutComponents = _removeMathScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMathScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getErasedInkRanges()[n].getComponent());\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getInkRanges()[p].getComponent());\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        var notScratchOutComponents = _removeMusicScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents);\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method drawStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRenderer.prototype.drawStaff = function (staff) {\n        _drawStaff(staff, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                _drawMusicNode(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw music node\n     *\n     * @method drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     */\n    MusicRenderer.prototype.drawMusicNode = function (component) {\n        _drawMusicNode(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @private\n     * @method _drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStaff = function (staff, context, parameters) {\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw music node\n     *\n     * @private\n     * @method _drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawMusicNode = function (component, context, parameters) {\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, context, parameters);\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, context, parameters);\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, context, parameters);\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, context, parameters);\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, context, parameters);\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, context, parameters);\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, context, parameters);\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, context, parameters);\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, context, parameters);\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, context, parameters);\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, context, parameters);\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, context, parameters);\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, context, parameters);\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMusicScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        if (this.isTypesetting()) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes());\n            _drawTables(components, recognitionResult.getTables(), this.getContext(), this.getParameters());\n            _drawTextLines(components, recognitionResult.getTextLines(), this.getContext(), this.getParameters());\n            //_drawGroups(components, recognitionResult.getGroups(), this.getContext(), this.getParameters()); // TODO: not implemented\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @private\n     * @method _drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTables = function (components, tables, context, parameters) {\n        for (var i in tables) {\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @private\n     * @method _drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                _drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    _drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @private\n     * @method _drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n            context.textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            context.fillText(text, boundingBox.getX(), baseline);\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @private\n     * @method _drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n\n    /**\n     * Draw Underline\n     *\n     * @private\n     * @method _drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), context, parameters);\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @private\n     * @method _drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            var rectangle = cell.getData().getBoundingBox();\n            context.save();\n            try {\n                context.fillStyle = parameters.getRectColor();\n                context.strokeStyle = parameters.getColor();\n                context.lineWidth = 0.5 * parameters.getWidth();\n                context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n            } finally {\n                context.restore();\n            }\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Image Renderer. It's used to calculate the Image ink rendering in HTML5 canvas\n     *\n     * @class ImageRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ImageRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ImageRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ImageRenderer.prototype.constructor = ImageRenderer;\n\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    ImageRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                console.log(components);\n                console.log(typeof component);\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    // Export\n    scope.ImageRenderer = ImageRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n","'use strict';\n'use strict';\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n        this.canvasRatio = 1;\n\n        // Capture\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n        this.canvasRatio = _getCanvasRatio(this._renderingCanvas);\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer();\n        this._mathRecognizer = new scope.MathRecognizer();\n        this._shapeRecognizer = new scope.ShapeRecognizer();\n        this._musicRecognizer = new scope.MusicRecognizer();\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer();\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this));\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this));\n\n        this._attachListeners(element);\n\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            ssl: true,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        // Recognition type\n        this.setType(this.options.type);\n\n        this.setHost(this.options.host);\n        this.setSSL(this.options.ssl);\n\n        this.setTextParameters(this.options.textParameters); // jshint ignore:line\n        this.setMathParameters(this.options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(this.options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(this.options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(this.options.analyzerParameters); // jshint ignore:line\n\n        this.setProtocol(this.options.protocol);\n        this.setTimeout(this.options.timeout);\n        this.setApplicationKey(this.options.applicationKey);\n        this.setHmacKey(this.options.hmacKey);\n\n        this.setPenParameters(this.options.penParameters);\n\n        this.setPrecision(this.options.precision);\n        this.setTypeset(this.options.typeset);\n        this.setComponents(this.options.components);\n\n        this.setWidth(this.options.width);\n        this.setHeight(this.options.height);\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        if(width > 0){\n            this._captureCanvas.width = width * this.canvasRatio;\n            this._captureCanvas.style.width = width + 'px';\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n            this._renderingCanvas.width = width * this.canvasRatio;\n            this._renderingCanvas.style.width = width + 'px';\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        }\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        if(height > 0){\n            this._captureCanvas.height = height * this.canvasRatio;\n            this._captureCanvas.style.height = height + 'px';\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n            this._renderingCanvas.height = height * this.canvasRatio;\n            this._renderingCanvas.style.height = height + 'px';\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        }\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Set the recognition precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    InkPaper.prototype.setPrecision = function (precision) {\n        this._textRecognizer.setPrecision(precision);\n        this._textWSRecognizer.setPrecision(precision);\n        this._mathRecognizer.setPrecision(precision);\n        this._mathWSRecognizer.setPrecision(precision);\n        this._shapeRecognizer.setPrecision(precision);\n        this._musicRecognizer.setPrecision(precision);\n        this._analyzerRecognizer.setPrecision(precision);\n    };\n\n    /**\n     * Get the default components\n     *\n     * @method getComponents\n     * @return {Array} components\n     */\n    InkPaper.prototype.getComponents = function () {\n        return this.options.components;\n    };\n\n    /**\n     * Set the default components\n     *\n     * @method setComponents\n     * @param {Array} components\n     */\n    InkPaper.prototype.setComponents = function (components) {\n        this.options.components = components;\n        this._initRenderingCanvas();\n    };\n\n\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n            this._initRenderingCanvas();\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._selectedRenderer.getParameters()[i] = penParameters[i]; // Override options\n                }\n            }\n            var params = this._selectedRenderer.getParameters();\n            this._inkGrabber.setParameters(params); // Override options\n            this._textRenderer.setParameters(params); // Override options\n            this._mathRenderer.setParameters(params); // Override options\n            this._shapeRenderer.setParameters(params); // Override options\n            this._musicRenderer.setParameters(params); // Override options\n            this._analyzerRenderer.setParameters(params); // Override options\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @param {String} [inputMode] input mode\n     */\n    InkPaper.prototype.getAvailableLanguages = function (inputMode) {\n        this._selectedRESTRecognizer.getAvailableLanguageList(\n            this.getApplicationKey(),\n            inputMode ? inputMode : this._textRecognizer.getParameters().getInputMode()\n        ).then(\n            function (data) {\n                this._onResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        return this._doRecognition(this.components);\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this.components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            this.redoComponents.push(this.components.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this.redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this.components.push(this.redoComponents.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            if (this._instanceId) {\n                this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                this._instanceId = undefined;\n            }\n        }\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this._inkGrabber.clear();\n        this._instanceId = undefined;\n\n        this._initRenderingCanvas();\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n        var sizeChanged = false;\n        if (this._captureCanvas.clientHeight != this._captureCanvas.height) {\n            this._captureCanvas.height = this._captureCanvas.clientHeight;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight;\n            sizeChanged = true;\n        }\n\n        if (this._captureCanvas.clientWidth != this._captureCanvas.width) {\n            this._captureCanvas.width = this._captureCanvas.clientWidth;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth;\n            sizeChanged = true;\n        }\n\n        //Safari trash the canvas content when heigth or width are modified.\n        if(sizeChanged){\n            this._initRenderingCanvas();\n        }\n\n        if (this.canRedo()) {\n            this.redoComponents = [];\n            this._onChange();\n        }\n\n        this._inkGrabber.startCapture(x, y, t);\n\n\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this.components.push(stroke);\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            }\n        }\n    };\n\n    /**\n     * Do recognition\n     *\n     * @private\n     * @method _doRecognition\n     * @param {AbstractComponent[]} components Input components\n     */\n    InkPaper.prototype._doRecognition = function (components) {\n        if (components.length > 0) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                if (this._initialized) {\n                    var inputWS = [];\n                    if (this._selectedRecognizer instanceof scope.TextWSRecognizer) {\n                        var inputUnitWS = new scope.TextInputUnit();\n                        inputUnitWS.setComponents(this.getComponents().concat(components.slice(this.lastNonRecoComponentIdx)));\n                        inputWS = [inputUnitWS];\n                    } else {\n                        inputWS = components.slice(this.lastNonRecoComponentIdx);\n                    }\n                    this.lastNonRecoComponentIdx = components.length;\n\n\n                    if (this.isStarted) {\n                        this._selectedRecognizer.continueWSRecognition(inputWS, this._instanceId);\n                    } else {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(inputWS);\n                    }\n                }\n            } else {\n                var input = [];\n                if (this._selectedRecognizer instanceof scope.TextRecognizer) {\n                    var inputUnit = new scope.TextInputUnit();\n                    inputUnit.setComponents(this.getComponents().concat(components));\n                    input = [inputUnit];\n                } else if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                    input = components.slice(this.lastNonRecoComponentIdx);\n                    this.lastNonRecoComponentIdx = components.length;\n                } else {\n                    input = input.concat(this.getComponents(), components);\n                }\n                this._selectedRecognizer.doSimpleRecognition(\n                    this.getApplicationKey(),\n                    this._instanceId,\n                    input,\n                    this.getHmacKey()\n                ).then(\n                    function (data) {\n                        this._parseResult(data, input);\n                    }.bind(this),\n                    function (error) {\n                        this._onResult(undefined, error);\n                    }.bind(this)\n                );\n            }\n        } else {\n            this.isStarted = false;\n            this._selectedRenderer.clear();\n            this._initRenderingCanvas();\n            this._onResult();\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('error', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function () {\n        var data = {\n            canUndo: this.canUndo(),\n            undoLength: this.components.length,\n            canRedo: this.canRedo(),\n            redoLength: this.redoComponents.length\n        };\n\n        if (this.changeCallback) {\n            this.changeCallback(data)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: data}));\n    };\n\n    InkPaper.prototype._parseResult = function (data, input) {\n\n        if (!this._instanceId) {\n            this._instanceId = data.getInstanceId();\n        } else if (this._instanceId !== data.getInstanceId()) {\n            this._onResult(data);\n            return data;\n        }\n\n        if (data.getDocument().hasScratchOutResults() || this._selectedRenderer.isTypesetting()) {\n            this._selectedRenderer.clear();\n            this._selectedRenderer.drawRecognitionResult(input, data.getDocument());\n        }\n\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service url\n     *\n     * @param {String} host\n     */\n    InkPaper.prototype.setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._textWSRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._mathWSRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * @private\n     */\n    InkPaper.prototype.setSSL = function (ssl) {\n        this._textRecognizer.setSSL(ssl);\n        this._textWSRecognizer.setSSL(ssl);\n        this._mathRecognizer.setSSL(ssl);\n        this._mathWSRecognizer.setSSL(ssl);\n        this._shapeRecognizer.setSSL(ssl);\n        this._musicRecognizer.setSSL(ssl);\n        this._analyzerRecognizer.setSSL(ssl);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n\n        //Desactivation of contextmenu to prevent safari to fire pointerdown only once\n        element.addEventListener(\"contextmenu\", function(e){\n            e.preventDefault();\n            e.stopPropagation();\n            return false; }\n        );\n\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n        this._drawInput(this.components);\n    };\n\n    InkPaper.prototype._drawInput = function (components) {\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            }\n        }\n        this._selectedRenderer.drawComponents(this.getComponents().concat(components));\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this.lastNonRecoComponentIdx = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge(this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    break;\n                default:\n                    this._parseResult(message, this.components);\n                    break;\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Return the stats allowing to monitor what ink size is send to the server.\n     * @returns Stats objects format {strokesCount : 0, pointsCount : 0, byteSize : 0, humanSize : 0, humanUnit : 'BYTE'} humanUnit could have the values BYTE, BYTES, KiB, MiB\n     */\n    InkPaper.prototype.getStats = function () {\n        var stats = {strokesCount : 0, pointsCount : 0, byteSize : 0, humanSize : 0, humanUnit : 'BYTE'};\n        if(this.components){\n            stats.strokesCount = this.components.length;\n            var pointsCount = 0;\n            for(var strokeNb = 0; strokeNb < this.components.length; strokeNb++){\n                pointsCount = pointsCount + this.components[strokeNb].x.length;\n            }\n            stats.strokesCount = this.components.length;\n            stats.pointsCount = pointsCount;\n            //We start with 270 as it is the size in bytes. Make a real computation implies to recode a doRecogntion\n            var byteSize = 270;\n            byteSize = JSON.stringify(this.components).length;\n            stats.byteSize = byteSize;\n            if (byteSize < 270) {\n                stats.humanUnit = 'BYTE';\n                stats.byteSize = 0;\n                stats.humanSize  = 0;\n            } else if (byteSize < 2048) {\n                stats.humanUnit = 'BYTES';\n                stats.humanSize  = byteSize;\n            } else if (byteSize < 1024 * 1024) {\n                stats.humanUnit = 'KiB';\n                stats.humanSize = (byteSize / 1024).toFixed(2);\n            } else {\n                stats.humanUnit = 'MiB';\n                stats.humanSize = (byteSize / 1024 / 1024).toFixed(2);\n            }\n        }\n        return stats;\n    };\n\n    /**\n     *\n     * @param marginX the horizontal margin to apply (by default 10)\n     * @param marginY the vertical margin to apply (by default 10)\n     * @returns {ImageData} Build an ImageData object with content shrink to border of strokes.\n     * @private\n     */\n    InkPaper.prototype.getInkAsImageData = function (marginX, marginY) {\n        if(!marginX){\n            marginX = 10;\n        }\n        if(!marginY){\n            marginY = 10;\n        }\n        console.log({marginX : marginX, marginY : marginY});\n        if(this.components && this.components.length > 0){\n            var updatedStrokes ;\n            var strokesCount = this.components.length;\n            //Initializing min and max\n            var minX = this.components[0].x[0];\n            var maxX = this.components[0].x[0];\n            var minY = this.components[0].y[0];\n            var maxY = this.components[0].y[0];\n            // Computing the min and max for x and y\n            for(var strokeNb = 0; strokeNb < this.components.length; strokeNb++){\n                var pointCount = this.components[strokeNb].x.length;\n                for(var pointNb = 0; pointNb < pointCount; pointNb ++){\n                    var currentX = this.components[strokeNb].x[pointNb];\n                    var currentY = this.components[strokeNb].y[pointNb];\n                    if(currentX < minX){\n                        minX = currentX;\n                    }\n                    if(currentX > maxX){\n                        maxX = currentX;\n                    }\n                    if(currentY < minY){\n                        minY = currentY;\n                    }\n                    if(currentY > maxY){\n                        maxY = currentY;\n                    }\n                }\n            }\n            var nonDisplayCanvas = document.createElement('canvas');\n            nonDisplayCanvas.width = (maxX )+(2*marginX);\n            nonDisplayCanvas.height = (maxY )+(2*marginY)\n\n            var ctx =  nonDisplayCanvas.getContext(\"2d\");\n\n            var imageRendered = new scope.ImageRenderer(ctx);\n            imageRendered.drawComponents(this.components, ctx);\n\n            // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData\n            var imageData = ctx.getImageData(minX-marginX, minY-marginY, (maxX-minX )+(2*marginX), (maxY-minY )+(2*marginY));\n            return imageData;\n        } else {\n            return;\n        }\n    };\n\n    /**\n     *\n     * @param marginX the horizontal margin to apply (by default 10)\n     * @param marginY the vertical margin to apply (by default 10)\n     * @returns {String} Build an String containg dataUrl with content shrink to border of strokes.\n     * @private\n     */\n    InkPaper.prototype.getInkAsPng = function (marginX, marginY) {\n        var imageRenderingCanvas = document.createElement('canvas');\n        imageRenderingCanvas.style.display = 'none';\n\n        var imageDataToRender = this.getInkAsImageData();\n        imageRenderingCanvas.width = imageDataToRender.width;\n        imageRenderingCanvas.style.width = imageDataToRender.width +'px';\n        imageRenderingCanvas.height = imageDataToRender.height;\n        imageRenderingCanvas.style.height = imageDataToRender.height +'px';\n        var ctx = imageRenderingCanvas.getContext('2d');\n        ctx.putImageData(imageDataToRender, 0, 0);\n        var ret = imageRenderingCanvas.toDataURL(\"image/png\");\n        return ret;\n    }\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n    /**\n     * Tool to get canvas ratio (retina display)\n     *\n     * @private\n     * @param {Element} canvas\n     * @returns {Number}\n     */\n    function _getCanvasRatio(canvas) {\n        if (canvas) {\n            var context = canvas.getContext('2d'),\n                devicePixelRatio = window.devicePixelRatio || 1,\n                backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        }\n        return 1;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n"],"sourceRoot":"/source/"}