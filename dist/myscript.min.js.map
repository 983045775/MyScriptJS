{"version":3,"sources":["myscript.js","MyScript.js","point.js","quadraticPoint.js","rectangle.js","inkManager.js","penParameters.js","renderingParameters.js","mathUtils.js","abstractWSMessage.js","abstractComponent.js","stroke.js","strokeComponent.js","characterInputComponent.js","characterInputComponentAlternate.js","abstractParameter.js","abstractRecognitionInput.js","abstractRecognitionData.js","recognitionLanguagesData.js","abstractStartRequestWSMessage.js","abstractContinueRequestWSMessage.js","challengeRequestWSMessage.js","initRequestWSMessage.js","resetRequestWSMessage.js","abstractTextInputComponent.js","charInputComponent.js","stringInputComponent.js","textInputUnit.js","textParameter.js","textProperties.js","textRecognitionInput.js","textRecognitionData.js","textStartRequestWSMessage.js","textContinueRequestWSMessage.js","shapeParameter.js","shapeRecognitionInput.js","shapeRecognitionData.js","mathParameter.js","mathRecognitionInput.js","mathRecognitionData.js","mathStartRequestWSMessage.js","mathContinueRequestWSMessage.js","abstractMusicInputComponent.js","musicAccidentalInputComponent.js","musicArpeggiateInputComponent.js","musicBarInputComponent.js","musicBeamInputComponent.js","musicClefInputComponent.js","musicDecorationInputComponent.js","musicDotsInputComponent.js","musicHeadInputComponent.js","musicLedgerLineInputComponent.js","musicRestInputComponent.js","musicStemInputComponent.js","musicTieOrSlurInputComponent.js","musicTimeSignatureInputComponent.js","musicStaff.js","musicParameter.js","musicRecognitionInput.js","musicRecognitionData.js","analyzerParameter.js","analyzerRecognitionInput.js","analyzerRecognitionData.js","abstractResult.js","abstractRecoResponseWSMessage.js","challengeResponseWSMessage.js","errorResponseWSMessage.js","initResponseWSMessage.js","resetResponseWSMessage.js","textInkRange.js","textCandidate.js","textDocument.js","textResult.js","textSegment.js","textTagItem.js","textResponseWSMessage.js","abstractShapePrimitive.js","shapeCandidate.js","shapeDocument.js","shapeEllipse.js","shapeErased.js","shapeInkRange.js","shapeLine.js","shapeNotRecognized.js","shapeRecognized.js","shapeResult.js","shapeScratchOut.js","shapeSegment.js","mathNode.js","mathNonTerminalNode.js","mathResultElement.js","mathRuleNode.js","mathDocument.js","mathInkRange.js","mathLaTexResultElement.js","mathMathMLResultElement.js","mathResult.js","mathScratchOut.js","mathSymbolTreeResultElement.js","mathTerminalNode.js","mathTerminalNodeCandidate.js","mathBorderData.js","mathBorderNonTerminalNode.js","mathCellData.js","mathCellNonTerminalNode.js","mathTableData.js","mathTableRuleNode.js","mathResponseWSMessage.js","musicElement.js","musicResultElement.js","musicAccidental.js","musicAnnotation.js","musicArpeggiate.js","musicBar.js","musicBeam.js","musicChord.js","musicClef.js","musicDecoration.js","musicDocument.js","musicDots.js","musicHead.js","musicInputRange.js","musicKeySignature.js","musicKeySignatureData.js","musicLedgerLine.js","musicNote.js","musicPart.js","musicPitchData.js","musicRest.js","musicResult.js","musicScore.js","musicScoreTreeResultElement.js","musicScratchOut.js","musicSlur.js","musicStem.js","musicTie.js","musicTimeModificationData.js","musicTimeSignature.js","musicTupletBracket.js","musicTuplet.js","musicXMLResultElement.js","analyzerElement.js","analyzerCell.js","analyzerCellData.js","analyzerDocument.js","analyzerElementReference.js","analyzerGroup.js","analyzerInkRange.js","analyzerLine.js","analyzerLineData.js","analyzerRecognizedStroke.js","analyzerResult.js","analyzerStrokeType.js","analyzerTable.js","analyzerTableData.js","analyzerTextLine.js","analyzerTextLineData.js","analyzerUnderline.js","analyzerUnderlineData.js","networkInterface.js","networkWSInterface.js","abstractRecognizer.js","abstractWSRecognizer.js","textRecognizer.js","textWSRecognizer.js","shapeRecognizer.js","mathRecognizer.js","mathWSRecognizer.js","musicRecognizer.js","analyzerRecognizer.js","abstractRenderer.js","textRenderer.js","shapeRenderer.js","mathRenderer.js","musicRenderer.js","analyzerRenderer.js","inkGrabber.js","inkPaper.js"],"names":["CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","window","Event","Function","bind","oThis","this","TypeError","aArgs","Array","slice","call","arguments","fToBind","fNOP","fBound","apply","concat","MyScript","RecognitionType","TEXT","MATH","SHAPE","MUSIC","ANALYZER","InputMode","CURSIVE","ISOLATED","SUPERIMPOSED","VERTICAL","InputType","CHAR","WORD","SINGLE_LINE_TEXT","MULTI_LINE_TEXT","ResultDetail","CHARACTER","ResultType","Math","LATEX","MATHML","SYMBOLTREE","Music","MUSICXML","SCORETREE","Protocol","WS","REST","scope","Point","obj","x","y","getX","setX","getY","setY","QuadraticPoint","pressure","distance","length","cos","sin","p1","p2","constructor","getPressure","setPressure","getDistance","setDistance","getLength","setLength","getCos","setCos","getSin","setSin","getP1","setP1","getP2","setP2","Rectangle","width","height","getTopLeftPoint","point","setTopLeftPoint","topLeftPoint","getWidth","setWidth","getHeight","setHeight","InkManager","writing","strokes","currentStroke","undoRedoStack","isWriting","getCurrentStroke","startInkCapture","t","Error","isRedoEmpty","clearUndoRedoStack","Stroke","addX","addY","addT","continueInkCapture","endInkCapture","push","clear","isEmpty","undo","pop","redo","getStrokes","getUndoRedoStack","copy","index","PenParameters","color","rectColor","font","decoration","pressureType","alpha","getColor","setColor","getRectColor","setRectColor","getFont","setFont","getDecoration","setDecoration","getPressureType","setPressureType","getAlpha","setAlpha","RenderingParameters","MathUtils","getEllipseArcRect","center","maxRadius","minRadius","orientation","startAngle","sweepAngle","angle","z1","z2","z3","z4","cosAlpha","sinAlpha","n","xList","yList","i","xMin","xMax","yMin","yMax","angleStep","sortFloat","a","b","abs","atan2","sort","getLineRect","firstPoint","lastPoint","xFirst","xLast","min","max","yFirst","yLast","getBoundingRect","boundingBoxes","rectangle","AbstractWSMessage","type","getType","AbstractComponent","setType","getBoundingBox","setBoundingBox","boundingBox","getT","setT","StrokeComponent","p","d","l","toJSON","getP","setP","addP","getD","setD","addD","getL","setL","addL","addPoint","filterPointByAcquisitionDelta","computeP","computeD","computeL","getLastIndexPoint","getPointByIndex","sqrt","pow","isNaN","ratio","parseFloat","delta","ret","CharacterInputComponent","alternates","CharacterInputComponentAlternate","getAlternates","setAlternates","addAlternate","alternate","probability","getAlternate","setAlternate","getProbability","setProbability","AbstractParameter","AbstractRecognitionInput","AbstractRecognitionData","getApplicationKey","applicationKey","setApplicationKey","getInstanceId","instanceId","setInstanceId","getHmac","hmac","setHmac","getRecognitionInput","setRecognitionInput","input","RecognitionLanguagesData","getInputMode","inputMode","setInputMode","AbstractStartRequestWSMessage","AbstractContinueRequestWSMessage","ChallengeRequestWSMessage","getChallenge","challenge","setChallenge","getHmacSignature","setHmacSignature","InitRequestWSMessage","ResetRequestWSMessage","AbstractTextInputComponent","CharInputComponent","character","getCharacter","setCharacter","getLabel","setLabel","label","StringInputComponent","string","getString","setString","TextInputUnit","textInputType","components","getInputType","setInputType","inputType","getComponents","inkRange","TextInkRange","getStartComponent","getEndComponent","setComponents","TextParameter","textProperties","TextProperties","language","textInputMode","contentTypes","subsetKnowledges","userResources","userLkWords","resultDetail","getLanguage","setLanguage","getContentTypes","setContentTypes","getSubsetKnowledges","setSubsetKnowledges","getUserResources","setUserResources","getUserLkWords","setUserLkWords","getResultDetail","setResultDetail","getTextProperties","setTextProperties","textCandidateListSize","wordCandidateListSize","wordPredictionListSize","wordCompletionListSize","characterCandidateListSize","discardCaseVariations","discardAccentuationVariations","disableSpatialOrdering","glyphDistortion","enableOutOfLexicon","spellingDistortion","getTextCandidateListSize","setTextCandidateListSize","getWordCandidateListSize","setWordCandidateListSize","getWordPredictionListSize","setWordPredictionListSize","getWordCompletionListSize","setWordCompletionListSize","getCharacterCandidateListSize","setCharacterCandidateListSize","getDiscardCaseVariations","setDiscardCaseVariations","getDiscardAccentuationVariations","setDiscardAccentuationVariations","getDisableSpatialOrdering","setDisableSpatialOrdering","getGlyphDistortion","setGlyphDistortion","getEnableOutOfLexicon","setEnableOutOfLexicon","getSpellingDistortion","setSpellingDistortion","TextRecognitionInput","getParameters","textParameter","setParameters","parameters","getInputUnits","inputUnits","getStartUnit","getEndUnit","setInputUnits","TextRecognitionData","getTextRecognitionInput","textInput","setTextRecognitionInput","JSON","stringify","TextStartRequestWSMessage","TextContinueRequestWSMessage","ShapeParameter","rejectDetectionSensitivity","doBeautification","getRejectDetectionSensitivity","setRejectDetectionSensitivity","hasBeautification","setBeautification","ShapeRecognitionInput","getDoBeautification","setDoBeautification","ShapeRecognitionData","getShapeRecognitionInput","shapeInput","setShapeRecognitionInput","MathParameter","resultTypes","columnarOperation","scratchOutDetectionSensitivity","getResultTypes","setResultTypes","isColumnar","setColumnar","columnar","getScratchOutDetectionSensitivity","setScratchOutDetectionSensitivity","MathRecognitionInput","MathRecognitionData","getMathRecognitionInput","mathInput","setMathRecognitionInput","MathStartRequestWSMessage","MathContinueRequestWSMessage","AbstractMusicInputComponent","MusicAccidentalInputComponent","value","getValue","setValue","MusicArpeggiateInputComponent","MusicBarInputComponent","MusicBar","MusicBeamInputComponent","MusicBeam","MusicClefInputComponent","MusicClef","MusicDecorationInputComponent","MusicDecoration","MusicDotsInputComponent","MusicHeadInputComponent","MusicLedgerLineInputComponent","MusicRestInputComponent","MusicStemInputComponent","MusicTieOrSlurInputComponent","MusicTimeSignatureInputComponent","MusicStaff","count","gap","top","getCount","setCount","getTop","setTop","getGap","setGap","MusicParameter","divisions","staff","getStaff","setStaff","getDivisions","setDivisions","MusicRecognitionInput","MusicRecognitionData","getMusicRecognitionInput","musicInput","setMusicRecognitionInput","AnalyzerParameter","coordinateResolution","getTextParameters","setTextParameters","getCoordinateResolution","setCoordinateResolution","AnalyzerRecognitionInput","parameter","AnalyzerRecognitionData","getAnalyzerRecognitionInput","analyzerInput","setAnalyzerRecognitionInput","AbstractResult","getDocument","result","AbstractRecoResponseWSMessage","ChallengeResponseWSMessage","ErrorResponseWSMessage","error","getError","InitResponseWSMessage","ResetResponseWSMessage","cpt","split","startUnit","Number","startComponent","startPoint","endUnit","endComponent","endPoint","getStartPoint","getEndPoint","TextCandidate","flags","children","normalizedScore","spellingDistortionRatio","j","TextSegment","getNormalizedScore","getResemblanceScore","resemblanceScore","getSpellingDistortionRatio","getFlags","getChildren","TextDocument","tagItems","wordCandidates","charCandidates","textSegmentResult","TextTagItem","k","getTagItems","getWordSegments","getWordSegment","inkRanges","getInkRanges","getCharSegments","getCharSegment","getTextSegment","hasScratchOutResults","TextResult","getTextDocument","candidates","selectedCandidateIdx","ranges","isArray","getCandidates","getSelectedCandidateIdx","getSelectedCandidate","tagType","getTagType","TextResponseWSMessage","AbstractShapePrimitive","beginDecoration","beginTangentAngle","endDecoration","endTangentAngle","isLine","isEllipse","hasBeginDecoration","hasEndDecoration","getBeginDecoration","getEndDecoration","getBeginTangentAngle","getEndTangentAngle","ShapeCandidate","isErased","isScratchOut","isNotRecognized","isRecognized","ShapeDocument","segments","ShapeSegment","getSegments","currentSeg","currentCandidate","ShapeScratchOut","ShapeEllipse","getCenter","getMinRadius","getMaxRadius","getOrientation","getStartAngle","getSweepAngle","ShapeErased","ShapeInkRange","firstStroke","lastStroke","getFirstStroke","getLastStroke","getFirstPoint","getLastPoint","ShapeLine","ShapeNotRecognized","ShapeRecognized","primitives","normalizedRecognitionScore","getPrimitives","getNormalizedRecognitionScore","ShapeResult","getShapeDocument","elementType","uniqueID","selectedCandidateIndex","getElementType","getUniqueId","MathNode","name","getName","MathNonTerminalNode","selectedCandidate","MathTerminalNode","MathRuleNode","MathCellNonTerminalNode","MathBorderNonTerminalNode","MathTableRuleNode","MathResultElement","isLaTex","isMathMl","isSymbolTree","childInkRanges","MathDocument","results","scratchOutResults","MathMathMLResultElement","MathLaTexResultElement","MathSymbolTreeResultElement","MathScratchOut","getResultElements","getScratchOutResults","MathInkRange","component","firstItem","lastItem","getComponent","getFirstItem","getLastItem","MathResult","getMathDocument","erasedInkRanges","getErasedInkRanges","root","getRoot","MathTerminalNodeCandidate","MathBorderData","position","start","stop","getPosition","getStart","getStop","data","getData","MathCellData","columnStart","columnStop","rowStart","rowStop","getColumnStart","getColumnStop","getRowStart","getRowStop","MathTableData","columnCount","rowCount","getColumnCount","getRowCount","MathResponseWSMessage","MusicElement","inputRanges","getInputRanges","MusicResultElement","isMusicXML","isScoreTree","MusicAccidental","MusicAnnotation","MusicArpeggiate","decorations","repeatDirection","style","getRepeatDirection","setRepeatDirection","getStyle","setStyle","getDecorations","setDecorations","slope","placement","leftCount","rightCount","getSlope","setSlope","getPlacement","setPlacement","getLeftCount","setLeftCount","getRightCount","setRightCount","MusicChord","notes","beamTypes","ledgerLines","startSlurs","stopSlurs","duration","arpeggiate","startBeam","stopBeam","stem","MusicStem","MusicNote","MusicLedgerLine","m","MusicSlur","getDuration","getArpeggiate","getStartBeam","getStopBeam","getStem","getNotes","getBeamTypes","getLedgerLines","getStartSlurs","getStopSlurs","symbol","octave","line","yAnchor","getYAnchor","setYAnchor","getLine","setLine","getOctave","setOctave","getSymbol","setSymbol","MusicDocument","MusicXMLResultElement","MusicScoreTreeResultElement","MusicScratchOut","MusicDots","MusicHead","MusicInputRange","MusicKeySignature","accidentals","signature","MusicKeySignatureData","getSignature","getAccidentals","fifths","cancel","getFifths","getCancel","accidental","dots","head","pitch","MusicPitchData","startTie","MusicTie","stopTie","startTuplet","MusicTuplet","stopTuplet","timeModification","MusicTimeModificationData","getAccidental","getDots","getHead","getPitch","getStartTie","getStopTie","getStartTuplet","getStopTuplet","getTimeModification","MusicPart","elements","MusicRest","MusicTimeSignature","MusicTupletBracket","getElements","alteration","step","getAlteration","getStep","MusicResult","getMusicDocument","MusicScore","parts","getParts","score","getScore","erasedInputRanges","getErasedInputRanges","actual","normal","getActual","getNormal","bottom","getBottom","brackets","number","getNumber","getBrackets","AnalyzerElement","AnalyzerCell","AnalyzerCellData","firstColumn","lastColumn","firstRow","lastRow","topBorder","bottomBorder","leftBorder","rightBorder","getFirstColumn","getLastColumn","getFirstRow","getLastRow","hasTopBorder","hasBottomBorder","hasLeftBorder","hasRightBorder","AnalyzerDocument","textLines","shapes","tables","groups","AnalyzerTextLine","AnalyzerTable","AnalyzerGroup","getTextLines","getShapes","getTables","getGroups","AnalyzerElementReference","elementReferences","getElementReferences","AnalyzerInkRange","stroke","AnalyzerRecognizedStroke","getStroke","AnalyzerLine","AnalyzerLineData","AnalyzerResult","getAnalyzerDocument","AnalyzerStrokeType","getInkRange","lines","cells","AnalyzerTableData","getLines","getCells","underlineList","AnalyzerTextLineData","AnalyzerUnderline","getUnderlineList","baselinePos","toMidline","textHeight","justificationType","getBaselinePos","getToMidline","getTextHeight","getJustificationType","AnalyzerUnderlineData","firstCharacter","lastCharacter","getFirstCharacter","getLastCharacter","Q","NetworkInterface","parseURL","url","queries","parser","createElement","searchObject","href","search","replace","protocol","host","hostname","port","pathname","hash","parse","req","responseText","e","transformRequest","str","encodeURIComponent","join","xhr","onStateChange","request","readyState","status","deferred","resolve","onLoad","reject","onError","onProgress","notify","loaded","total","defer","XMLHttpRequest","open","withCredentials","setRequestHeader","onload","onerror","onprogress","onreadystatechange","send","promise","get","src","put","post","NetworkWSInterface","setUrl","close","_url","getUrl","setCallback","callback","_callback","getCallback","getState","_getWebSocketState","_socket","isClosed","isClosing","isOpen","isConnecting","_openWebSocket","code","reason","_closeWebSocket","state","_sendMessage","onOpen","onClose","onMessage","socket","WebSocket","onopen","onclose","onmessage","message","CryptoJS","AbstractRecognizer","getHost","setHost","getAvailableLanguageList","then","response","doRestRecognition","hmacKey","_computeHmac","_doTextRecognition","_doShapeRecognition","_doMathRecognition","_doMusicRecognition","_doAnalyzerRecognition","clearRestRecognition","instanceSessionId","_clearShapeRecognition","computeHmac","jsonInput","HmacSHA512","toString","enc","Hex","AbstractWSRecognizer","_wsInterface","sendMessage","initWSRecognition","takeUpHmacChallenge","resetWSRecognition","TextRecognizer","doSimpleRecognition","TextWSRecognizer","startWSRecognition","continueWSRecognition","ShapeRecognizer","clearShapeRecognitionSession","MathRecognizer","MathWSRecognizer","MusicRecognizer","AnalyzerRecognizer","AbstractRenderer","context","penParameters","showBoundingBoxes","typeset","points","drawing","_computeLinksPoints","radius","_computeMiddlePoint","point1","point2","_computeAxeAngle","begin","end","_fill","fillStyle","fill","_renderStroke","beginPath","arc","PI","_renderLine","nbquadratics","_renderQuadratic","_renderFinal","closePath","ARCSPLIT","linkPoints","moveTo","newAngle","lineTo","linkPoints1","linkPoints2","ctrl","linkPoints3","quadraticCurveTo","getContext","_setContext","getShowBoundingBoxes","setShowBoundingBoxes","isTypesetting","setTypeset","clearRect","canvas","drawRecognitionResult","recognitionResult","drawComponents","drawComponent","drawStroke","drawCharacter","drawRectangle","save","strokeStyle","lineWidth","fillRect","restore","drawStart","drawContinue","drawEnd","drawStrokes","last","pA","pB","pAB","_computePointParameters","_computeFirstControls","_computeControls","_drawFirstSegment","pC","pBC","_drawSegment","_drawPoint","_computeLastControls","_drawLastSegment","globalAlpha","previous","dx","dy","_computePressure","first","next","penWidth","r","nx","ny","u","TextRenderer","drawInputUnits","_drawTextComponent","drawTextComponent","_drawChar","_drawString","char","ShapeRenderer","drawShapes","_drawShapePrimitive","drawShapeSegment","segment","candidate","_drawShapeRecognized","drawShapeNotRecognized","drawShapeRecognized","shapeRecognized","notRecognized","_extractShapeNotRecognized","drawShapePrimitive","primitive","drawShapeLine","shapeLine","_drawShapeLine","drawShapeEllipse","shapeEllipse","_drawShapeEllipse","_drawLine","_drawArrowHead","_drawEllipseArc","extractStroke","centerPoint","floor","boundariesPoints","_phi","headPoint","beta","firstPointIndex","lastPointIndex","ceil","strokeIndex","currentStrokePointCount","newStroke","pointIndex","MathRenderer","notScratchOutComponents","_removeMathScratchOut","removeScratchOut","cloneComponents","componentsToRemove","z","splice","MusicRenderer","_removeMusicScratchOut","drawStaff","_drawStaff","_drawMusicNode","drawMusicNode","staffHeight","staves","offset","clientWidth","_drawAccidental","_drawArpeggiate","_drawBar","_drawBeam","_drawClef","_drawDecoration","_drawDots","_drawHead","_drawLedgerLine","_drawRest","_drawStem","_drawTieOrSlur","_drawTimeSignature","bar","beam","clef","imageObj","Image","drawImage","ledgerLine","rest","tieOrSlur","timeSignature","AnalyzerRenderer","shapeRenderer","getShapeRenderer","setShapeRenderer","_drawTables","_drawTextLines","drawTables","_drawCell","drawTextLines","textLine","drawText","text","baseline","_drawText","drawUnderline","underline","_drawUnderline","drawGroups","_drawGroups","drawCell","cell","underlines","textAlign","fillText","topLeft","textMetrics","measureText","substring","x1","x2","InkGrabber","startCapture","continueCapture","endCapture","InkPaper","element","options","_element","_instanceId","_timerId","_initialized","redoComponents","lastNonRecoComponentIdx","resultCallback","changeCallback","canvasRatio","ssl","timeout","textParameters","mathParameters","shapeParameters","musicParameters","analyzerParameters","_captureCanvas","_createCanvas","_inkGrabber","_renderingCanvas","_getCanvasRatio","_textRenderer","_mathRenderer","_shapeRenderer","_musicRenderer","_analyzerRenderer","_textRecognizer","_mathRecognizer","_shapeRecognizer","_musicRecognizer","_analyzerRecognizer","_textWSRecognizer","_handleMessage","_mathWSRecognizer","_attachListeners","idx","_initialize","_getOptions","parent","id","querySelectorAll","appendChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","_getCoordinates","container","changedTouches","rect","getBoundingClientRect","clientX","left","clientLeft","clientY","clientTop","timeStamp","scale","_initRenderingCanvas","setProtocol","_selectedRecognizer","_selectedRESTRecognizer","setTimeout","_selectedWSRecognizer","getProtocol","_selectedRenderer","getTimeout","getHmacKey","setHmacKey","isStarted","map","toUpperCase","setMathParameters","getMathParameters","setShapeParameters","getShapeParameters","setMusicParameters","getMusicParameters","setAnalyzerParameters","getAnalyzerParameters","setPenParameters","getPenParameters","getAvailableLanguages","_onResult","done","getRenderer","getInkGrabber","getRecognizer","setChangeCallback","setResultCallback","recognize","_doRecognition","canUndo","_onChange","undoLength","canRedo","redoLength","clearTimeout","addDomListener","useCapture","myfunction","addEventListener","_down","clientHeight","_move","_up","inputWS","inputUnitWS","inputUnit","_parseResult","err","dispatchEvent","changes","pointerId","self","preventDefault","coord","console","log","_drawInput","replayNeeded"],"mappings":"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","file":"myscript.min.js","sourcesContent":["/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n\n\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Complex Point object used for quadratic calculation\n     *\n     * @deprecated\n     * @class QuadraticPoint\n     * @extends Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function QuadraticPoint(obj) {\n        scope.Point.call(this, obj);\n        this.pressure = 0.5;\n        this.distance = 0.0;\n        this.length = 0.0;\n        this.cos = 0.0;\n        this.sin = 0.0;\n        this.p1 = new scope.Point(obj);\n        this.p2 = new scope.Point(obj);\n        if (obj) {\n            this.pressure = obj.pressure;\n            this.distance = obj.distance;\n            this.length = obj.length;\n            this.cos = obj.cos;\n            this.sin = obj.sin;\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    QuadraticPoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    QuadraticPoint.prototype.constructor = QuadraticPoint;\n\n    /**\n     * Get pressure\n     *\n     * @method getPressure\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getPressure = function () {\n        return this.pressure;\n    };\n\n    /**\n     * Set pressure\n     *\n     * @method setPressure\n     * @param {Number} pressure\n     */\n    QuadraticPoint.prototype.setPressure = function (pressure) {\n        this.pressure = pressure;\n    };\n\n    /**\n     * Get distance\n     *\n     * @method getDistance\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getDistance = function () {\n        return this.distance;\n    };\n\n    /**\n     * Set distance\n     *\n     * @method setDistance\n     * @param {Number} distance\n     */\n    QuadraticPoint.prototype.setDistance = function (distance) {\n        this.distance = distance;\n    };\n\n    /**\n     * Get length\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getLength = function () {\n        return this.length;\n    };\n\n    /**\n     * Set length\n     *\n     * @method setLength\n     * @param {Number} length\n     */\n    QuadraticPoint.prototype.setLength = function (length) {\n        this.length = length;\n    };\n\n    /**\n     * Get cos\n     *\n     * @method getCos\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getCos = function () {\n        return this.cos;\n    };\n\n    /**\n     * Set cos\n     *\n     * @method setCos\n     * @param {Number} cos\n     */\n    QuadraticPoint.prototype.setCos = function (cos) {\n        this.cos = cos;\n    };\n\n    /**\n     * Get sin\n     *\n     * @method getSin\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getSin = function () {\n        return this.sin;\n    };\n\n    /**\n     * Set sin\n     *\n     * @method setSin\n     * @param {Number} sin\n     */\n    QuadraticPoint.prototype.setSin = function (sin) {\n        this.sin = sin;\n    };\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Set p1\n     *\n     * @method setP1\n     * @param {Point} p1\n     */\n    QuadraticPoint.prototype.setP1 = function (p1) {\n        this.p1 = p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    /**\n     * Set p2\n     *\n     * @method setP2\n     * @param {Point} p2\n     */\n    QuadraticPoint.prototype.setP2 = function (p2) {\n        this.p2 = p2;\n    };\n\n    // Export\n    scope.QuadraticPoint = QuadraticPoint;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * The InkManager class that can use to store writing strokes and manage the undo/redo/clear system\n     *\n     * @deprecated\n     * @class InkManager\n     * @constructor\n     */\n    function InkManager() {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    }\n\n    /**\n     * Is Writing a stroke\n     *\n     * @deprecated\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last current Stroke write\n     *\n     * @deprecated\n     * @method getCurrentStroke\n     * @returns {Stroke}\n     */\n    InkManager.prototype.getCurrentStroke = function () {\n        return this.currentStroke;\n    };\n\n    /**\n     * Start ink capture\n     *\n     * @deprecated\n     * @method startInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.startInkCapture = function (x, y, t) {\n        if (!this.writing) {\n            if (!this.isRedoEmpty()) {\n                this.clearUndoRedoStack();\n            }\n            this.currentStroke = new scope.Stroke();\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n            this.writing = true;\n        } else {\n            throw new Error('Stroke capture already running');\n        }\n    };\n\n    /**\n     * Continue ink capture\n     *\n     * @deprecated\n     * @method continueInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.continueInkCapture = function (x, y, t) {\n        if (this.writing) {\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * End ink capture\n     *\n     * @deprecated\n     * @method endInkCapture\n     */\n    InkManager.prototype.endInkCapture = function () {\n        if (this.writing) {\n            this.strokes.push(this.currentStroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * Clear the strokes list\n     *\n     * @deprecated\n     * @method clear\n     */\n    InkManager.prototype.clear = function () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Is The Strokes list is empty\n     *\n     * @deprecated\n     * @method isEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isEmpty = function () {\n        return this.strokes.length === 0;\n    };\n\n    /**\n     * Is the Undo/Redo Stack empty\n     *\n     * @method isRedoEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isRedoEmpty = function () {\n        return this.undoRedoStack.length === 0;\n    };\n\n    /**\n     * Make an undo\n     *\n     * @deprecated\n     * @method undo\n     */\n    InkManager.prototype.undo = function () {\n        if (!this.isEmpty()) {\n            this.undoRedoStack.push(this.strokes.pop());\n        }\n    };\n\n    /**\n     * Make a redo\n     *\n     * @deprecated\n     * @method redo\n     */\n    InkManager.prototype.redo = function () {\n        if (!this.isRedoEmpty()) {\n            this.strokes.push(this.undoRedoStack.pop());\n        }\n    };\n\n    /**\n     * Get the strokes list\n     *\n     * @deprecated\n     * @method getStokes\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getStrokes = function () {\n        return this.strokes;\n    };\n\n    /**\n     * Get the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method getUndoRedoStack\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getUndoRedoStack = function () {\n        return this.undoRedoStack;\n    };\n\n    /**\n     * Clear the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method clearUndoRedoStack\n     */\n    InkManager.prototype.clearUndoRedoStack = function () {\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Copy the strokes values from index on an other list of strokes\n     *\n     * @deprecated\n     * @method copy\n     * @param {Stroke[]} strokes List of strokes\n     * @param {Number} index Position to start the copy\n     */\n    InkManager.prototype.copy = function (strokes, index) {\n        for (index; index < this.strokes.length; index++) {\n            strokes.push(this.strokes[index]);\n        }\n    };\n\n    // Export\n    scope.InkManager = InkManager;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters(obj) {\n        this.color = 'rgba(0, 0, 0, 0.9)';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = 'normal';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n        if (obj) {\n            this.color = obj.color;\n            this.rectColor = obj.rectColor;\n            this.font = obj.font;\n            this.decoration = obj.decoration;\n            this.width = obj.width;\n            this.pressureType = obj.pressureType;\n            this.alpha = obj.alpha;\n        }\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get the pressure renderer parameter\n     *\n     * @deprecated\n     * @method getPressureType\n     * @returns {String} The pressure type\n     */\n    PenParameters.prototype.getPressureType = function () {\n        return this.pressureType;\n    };\n\n    /**\n     * Set the pressure renderer parameter\n     *\n     * @deprecated\n     * @method setPressureType\n     * @param {String} pressureType\n     */\n    PenParameters.prototype.setPressureType = function (pressureType) {\n        this.pressureType = pressureType;\n    };\n\n    /**\n     * Get the alpha renderer parameter\n     *\n     * @deprecated Use a rgba() color\n     * @method getAlpha\n     * @returns {String} The alpha\n     */\n    PenParameters.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * Set the alpha renderer parameter\n     *\n     * @deprecated Use a rgba() color\n     * @method setAlpha\n     * @param {String} alpha\n     */\n    PenParameters.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @deprecated Use 'PenParameters' instead\n     * @class RenderingParameters\n     * @constructor\n     */\n    function RenderingParameters() {\n        scope.PenParameters.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    RenderingParameters.prototype = new scope.PenParameters();\n\n    /**\n     * Constructor property\n     */\n    RenderingParameters.prototype.constructor = RenderingParameters;\n\n    // Export\n    scope.RenderingParameters = RenderingParameters;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @deprecated Use StrokeComponent instead\n     * @class Stroke\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function Stroke(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        if (obj) {\n            if (obj.x) {\n                this.x = obj.x;\n            }\n            if (obj.y) {\n                this.y = obj.y;\n            }\n            if (obj.t) {\n                this.t = obj.t;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    Stroke.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    Stroke.prototype.constructor = Stroke;\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    Stroke.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    Stroke.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    Stroke.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    Stroke.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    Stroke.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    Stroke.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    Stroke.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    Stroke.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    // Export\n    scope.Stroke = Stroke;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @class StrokeComponent\n     * @extends Stroke\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.Stroke.call(this);\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            if (obj.p) {\n                this.p = obj.p;\n            }\n            if (obj.d) {\n                this.d = obj.d;\n            }\n            if (obj.l) {\n                this.l = obj.l;\n            }\n            if (obj.color) {\n                this.color = obj.color;\n            }\n            if (obj.alpha) {\n                this.alpha = obj.alpha;\n            }\n            if (obj.width) {\n                this.width = obj.width;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.Stroke();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**     *\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * @deprecated Use a rgba() color\n     * @param alpha\n     */\n    StrokeComponent.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * @deprecated Use a rgba() color\n     * @param alpha\n     */\n    StrokeComponent.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (this.filterPointByAcquisitionDelta(x, y)) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(this.computeP(x, y));\n            this.addD(this.computeD(x, y));\n            this.addL(this.computeL(x, y));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    StrokeComponent.prototype.computeD = function (x, y) {\n        var distance = Math.sqrt(Math.pow((y - this.getY()[this.getLastIndexPoint() - 1]), 2) + Math.pow((x - this.getX()[this.getLastIndexPoint() - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    };\n\n    StrokeComponent.prototype.computeL = function (x, y) {\n        var length = this.getL()[this.getLastIndexPoint() - 1] + this.computeD(x, y);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    };\n\n    StrokeComponent.prototype.computeP = function (x, y) {\n        var ratio = 1.0;\n        var distance = this.computeD(x, y);\n        var length = this.computeL(x, y);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    };\n\n    StrokeComponent.prototype.filterPointByAcquisitionDelta = function (x, y) {\n        var delta = (2 + (this.getWidth() / 4));\n        var ret = false;\n        if (this.getLength() === 0 || Math.abs(this.getX()[this.getLastIndexPoint()] - x) >= delta || Math.abs(this.getY()[this.getLastIndexPoint()] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    };\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n        if (obj) {\n            if (obj.alternates) {\n                for (var i in obj.alternates) {\n                    this.alternates.push(new scope.CharacterInputComponentAlternate(obj.alternates[i]));\n                }\n            }\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(obj) {\n        if (obj) {\n            if (obj.alternate) {\n                this.alternate = obj.alternate;\n            }\n            if (obj.probability) {\n                this.probability = obj.probability;\n            }\n        }\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    /**\n     * Get recognition input\n     *\n     * @method getRecognitionInput\n     * @returns {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.getRecognitionInput = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.setRecognitionInput = function (input) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'char';\n        if (obj) {\n            if (obj.character) {\n                this.character = obj.character;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get character\n     *\n     * @deprecated Use 'getLabel'\n     * @method getCharacter\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getCharacter = function () {\n        return this.character;\n    };\n\n    /**\n     * Set character\n     *\n     * @deprecated Use 'setLabel'\n     * @method setCharacter\n     * @param {String} character\n     */\n    CharInputComponent.prototype.setCharacter = function (character) {\n        this.character = character;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'string';\n        if (obj) {\n            if (obj.string) {\n                this.string = obj.string;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get string\n     *\n     * @deprecated Use 'getLabel'\n     * @method getString\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getString = function () {\n        return this.string;\n    };\n\n    /**\n     * Set string\n     *\n     * @deprecated Use 'setLabel'\n     * @method setString\n     * @param {String} string\n     */\n    StringInputComponent.prototype.setString = function (string) {\n        this.string = string;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n        if (obj) {\n            if (obj.language) {\n                this.language = obj.language;\n            }\n            if (obj.textInputMode) {\n                this.textInputMode = obj.textInputMode;\n            }\n            if (obj.contentTypes) {\n                this.contentTypes = obj.contentTypes;\n            }\n            if (obj.subsetKnowledges) {\n                this.subsetKnowledges = obj.subsetKnowledges;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.userLkWords) {\n                this.userLkWords = obj.userLkWords;\n            }\n            if (obj.resultDetail) {\n                this.resultDetail = obj.resultDetail;\n            }\n            if (obj.textProperties) {\n                this.textProperties = new scope.TextProperties(obj.textProperties);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties(obj) {\n        if (obj) {\n            if (obj.textCandidateListSize) {\n                this.textCandidateListSize = obj.textCandidateListSize;\n            }\n            if (obj.wordCandidateListSize) {\n                this.wordCandidateListSize = obj.wordCandidateListSize;\n            }\n            if (obj.wordPredictionListSize) {\n                this.wordPredictionListSize = obj.wordPredictionListSize;\n            }\n            if (obj.wordCompletionListSize) {\n                this.wordCompletionListSize = obj.wordCompletionListSize;\n            }\n            if (obj.characterCandidateListSize) {\n                this.characterCandidateListSize = obj.characterCandidateListSize;\n            }\n            if (obj.discardCaseVariations) {\n                this.discardCaseVariations = obj.discardCaseVariations;\n            }\n            if (obj.discardAccentuationVariations) {\n                this.discardAccentuationVariations = obj.discardAccentuationVariations;\n            }\n            if (obj.disableSpatialOrdering) {\n                this.disableSpatialOrdering = obj.disableSpatialOrdering;\n            }\n            if (obj.glyphDistortion) {\n                this.glyphDistortion = obj.glyphDistortion;\n            }\n            if (obj.enableOutOfLexicon) {\n                this.enableOutOfLexicon = obj.enableOutOfLexicon;\n            }\n            if (obj.spellingDistortion) {\n                this.spellingDistortion = obj.spellingDistortion;\n            }\n        }\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getTextRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getTextRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setTextRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setTextRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get text input\n     *\n     * @method getRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        if (obj) {\n            if (obj.rejectDetectionSensitivity) {\n                this.rejectDetectionSensitivity = obj.rejectDetectionSensitivity;\n            }\n            if (obj.doBeautification) {\n                this.doBeautification = obj.doBeautification;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method getDoBeautification\n     * @returns {Boolean}\n     */\n    ShapeRecognitionInput.prototype.getDoBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setDoBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeRecognitionInput.prototype.setDoBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Number}\n     */\n    ShapeRecognitionInput.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Number} rejectDetectionSensitivity\n     */\n    ShapeRecognitionInput.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getShapeRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getShapeRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setShapeRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setShapeRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get shape input\n     *\n     * @method getRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n            if (obj.columnarOperation) {\n                this.columnarOperation = obj.columnarOperation;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathRecognitionInput.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathRecognitionInput.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n    /**\n     * Get math input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getMathRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getMathRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setMathRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setMathRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get math input\n     *\n     * @method getRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'accidental';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'arpeggiate';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBar(obj.value);\n            }\n        }\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBeam(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicClef(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicDecoration(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'dots';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'head';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'rest';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'stem';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'tieOrSlur';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'timeSignature';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff(obj) {\n        this.count = 5;\n        this.gap = 20;\n        if (obj) {\n            if (obj.count) {\n                this.count = obj.count;\n            }\n            if (obj.gap) {\n                this.gap = obj.gap;\n            }\n            if (obj.top) {\n                this.top = obj.top;\n            }\n        }\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.divisions) {\n                this.divisions = obj.divisions;\n            }\n            if (obj.staff) {\n                this.staff = new scope.MusicStaff(obj.staff);\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the result types\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the result types\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicRecognitionInput.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRecognitionInput.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicRecognitionInput.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getMusicRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getMusicRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setMusicRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setMusicRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get music input\n     *\n     * @method getRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n        if (obj) {\n            if (obj.coordinateResolution) {\n                this.coordinateResolution = obj.coordinateResolution;\n            }\n            if (obj.textParameter) {\n                this.textParameter = new scope.TextParameter(obj.textParameter);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getAnalyzerRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getAnalyzerRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setAnalyzerRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setAnalyzerRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get analyzer input\n     *\n     * @method getRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            if (typeof obj === 'string') {\n                var cpt = obj.split(/[:-]+/);\n                this.startUnit = Number(cpt[0]);\n                this.startComponent = Number(cpt[1]);\n                this.startPoint = Number(cpt[2]);\n                this.endUnit = Number(cpt[3]);\n                this.endComponent = Number(cpt[4]);\n                this.endPoint = Number(cpt[5]);\n            } else {\n                this.startUnit = obj.startUnit;\n                this.startComponent = obj.startComponent;\n                this.startPoint = obj.startPoint;\n                this.endUnit = obj.endUnit;\n                this.endComponent = obj.endComponent;\n                this.endPoint = obj.endPoint;\n            }\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResult.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResponseWSMessage.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    /**\n     * Get shape document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getShapeDocument\n     * @returns {ShapeDocument}\n     */\n    ShapeResult.prototype.getShapeDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);\n(function (scope) {\n    \n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResult.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResponseWSMessage.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    /**\n     * Get music document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMusicDocument\n     * @returns {MusicDocument}\n     */\n    MusicResult.prototype.getMusicDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    /**\n     * Get analyzer document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getAnalyzerDocument\n     * @returns {AnalyzerDocument}\n     */\n    AnalyzerResult.prototype.getAnalyzerDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);\n\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    NetworkInterface.parseURL = function (url) {\n\n        var parser = document.createElement('a'),\n            searchObject = {},\n            queries, split, i;\n        // Let the browser do the work\n        parser.href = url;\n        // Convert query string to object\n        queries = parser.search.replace(/^\\?/, '').split('&');\n        for( i = 0; i < queries.length; i++ ) {\n            split = queries[i].split('=');\n            searchObject[split[0]] = split[1];\n        }\n        return {\n            protocol: parser.protocol,\n            host: parser.host,\n            hostname: parser.hostname,\n            port: parser.port,\n            pathname: parser.pathname,\n            search: parser.search,\n            searchObject: searchObject,\n            hash: parser.hash\n        };\n    };\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.xhr = function (type, url, data) {\n\n        var deferred = Q.defer();\n\n        function onStateChange() {\n            if (request.readyState === 4) {\n                if (request.status >= 200 && request.status < 300) {\n                    deferred.resolve(NetworkInterface.parse(request));\n                }\n            }\n        }\n\n        function onLoad() {\n            if (request.status >= 200 && request.status < 300) {\n                deferred.resolve(NetworkInterface.parse(request));\n            } else {\n                deferred.reject(new Error(request.responseText));\n            }\n        }\n\n        function onError() {\n            deferred.reject(new Error('Can\\'t XHR ' + url));\n        }\n\n        function onProgress(event) {\n            deferred.notify(event.loaded / event.total);\n        }\n\n        var request = new XMLHttpRequest();\n        request.open(type, url, true);\n        request.withCredentials = true;\n        request.setRequestHeader('Accept', 'application/json');\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        request.onload = onLoad;\n        request.onerror = onError;\n        request.onprogress = onProgress;\n        request.onreadystatechange = onStateChange;\n        request.send(NetworkInterface.transformRequest(data));\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return scope.NetworkInterface.xhr('GET', src, undefined);\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.put = function (url, data) {\n        return scope.NetworkInterface.xhr('PUT', url, data);\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.post = function (url, data) {\n        return scope.NetworkInterface.xhr('POST', url, data);\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.delete = function (url, data) {\n        return scope.NetworkInterface.xhr('DELETE', url, data);\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n\n\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface() {\n    }\n\n    NetworkWSInterface.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.close();\n            this._url = url;\n        }\n    };\n\n    NetworkWSInterface.prototype.getUrl = function () {\n        return this._url;\n    };\n\n    NetworkWSInterface.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this.close();\n            this._callback = callback;\n        }\n    };\n\n    NetworkWSInterface.prototype.getCallback = function () {\n        return this._callback;\n    };\n\n    NetworkWSInterface.prototype.getState = function () {\n        return _getWebSocketState(this._socket);\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        return this.getState() === 3;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        return this.getState() === 2;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        return this.getState() === 1;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        return this.getState() === 0;\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        if (this.getUrl() && this.getCallback() && (this.getState() < 0)) {\n            this._socket = _openWebSocket(this.getUrl(), this.getCallback());\n        }\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this.getState() < 2) {\n            _closeWebSocket(this._socket, code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.send = function (request) {\n        var state = _getWebSocketState(this._socket);\n        if (state  === 1) {\n            _sendMessage(this._socket, request);\n        }\n    };\n\n    /**\n     *\n     * @param url\n     * @param callback\n     * @returns {WebSocket}\n     * @private\n     */\n    var _openWebSocket = function (url, callback) {\n        function onOpen(e) {\n            callback(e);\n        }\n        function onClose(e) {\n            callback(e);\n        }\n        function onError(e) {\n            callback(e);\n        }\n        function onMessage(e) {\n            callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        }\n\n        var socket = new WebSocket(url);\n        socket.onopen = onOpen;\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n        return socket;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param code\n     * @param reason\n     * @private\n     */\n    var _closeWebSocket = function (socket, code, reason) {\n        if (socket) {\n            socket.close(code, reason);\n        }\n    };\n\n    /**\n     *\n     * @param socket\n     * @returns {*}\n     * @private\n     */\n    var _getWebSocketState = function (socket) {\n        if (socket) {\n            return socket.readyState;\n        }\n        return -1;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param message\n     * @private\n     */\n    var _sendMessage = function (socket, message) {\n        if (socket) {\n            socket.send(JSON.stringify(message));\n        }\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.setUrl('https://cloud.myscript.com');\n        if (host) {\n            this.setUrl('https://' + host);\n        }\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @deprecated use getUrl instead\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @deprecated use setUrl instead\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl('https://' + host);\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getUrl\n     * @returns {String}\n     */\n    AbstractRecognizer.prototype.getUrl = function() {\n        return this.url;\n    };\n\n    /**\n     * Set the recognition service url\n     *\n     * @method setUrl\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.url = url;\n        }\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return scope.NetworkInterface.get(this.getUrl() + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do REST recognition\n     *\n     * @method doRestRecognition\n     * @param {AbstractRecognitionData} data\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.doRestRecognition = function (data, applicationKey, hmacKey, instanceId) {\n        data.setApplicationKey(applicationKey);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(_computeHmac(data.getRecognitionInput(), applicationKey, hmacKey));\n        }\n\n        if (data instanceof scope.TextRecognitionData) {\n            return _doTextRecognition(this.getUrl(), data);\n        } else if (data instanceof scope.ShapeRecognitionData) {\n            return _doShapeRecognition(this.getUrl(), data);\n        } else if (data instanceof scope.MathRecognitionData) {\n            return _doMathRecognition(this.getUrl(), data);\n        } else if (data instanceof scope.MusicRecognitionData) {\n            return _doMusicRecognition(this.getUrl(), data);\n        } else if (data instanceof scope.AnalyzerRecognitionData) {\n            return _doAnalyzerRecognition(this.getUrl(), data);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * Clear REST recognition\n     *\n     * @method clearRestRecognition\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.clearRestRecognition = function (instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n        return _clearShapeRecognition(this.getHost(), data);\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @private\n     * @method _doTextRecognition\n     * @param {String} url\n     * @param {TextRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doTextRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doShapeRecognition\n     * @param {String} url\n     * @param {ShapeRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doShapeRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition\n     *\n     * @private\n     * @method _clearShapeRecognition\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    var _clearShapeRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doMathRecognition\n     * @param {String} url\n     * @param {MathRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doMathRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @private\n     * @method _doMusicRecognition\n     * @param {String} url\n     * @param {MusicRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doMusicRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method _doAnalyzerRecognition\n     * @param {String} url\n     * @param {AnalyzerRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doAnalyzerRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @deprecated\n     * @method computeHmac\n     * @param {String} applicationKey\n     * @param {String} data\n     * @param {String} hmacKey\n     */\n    AbstractRecognizer.prototype.computeHmac = function (applicationKey, data, hmacKey) {\n        return _computeHmac(data, applicationKey, hmacKey);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @constructor\n     */\n    function AbstractWSRecognizer() {\n        this._wsInterface = new scope.NetworkWSInterface();\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @deprecated use getUrl instead\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractWSRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @deprecated use setUrl instead\n     * @method setHost\n     * @param {String}\n     */\n    AbstractWSRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl('wss://' + host);\n        }\n    };\n\n    AbstractWSRecognizer.prototype.setUrl = function (url) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    AbstractWSRecognizer.prototype.setCallback = function (callback) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(_computeHmac(challenge, applicationKey, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {String} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript, CryptoJS);\n\n\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, inputUnits, hmacKey, parameters) {\n        var input = new scope.TextRecognitionInput();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n\n        var data = new scope.TextRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this.setUrl('wss://cloud.myscript.com');\n        if (host) {\n            this.setUrl('wss://' + host);\n        }\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    TextWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/text');\n        }\n    };\n\n    TextWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, message.data);\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.TextResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (inputUnits, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.ShapeRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setDoBeautification(params.hasBeautification());\n        input.setRejectDetectionSensitivity(params.getRejectDetectionSensitivity());\n\n        var data = new scope.ShapeRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n        return scope.AbstractRecognizer.prototype.clearRestRecognition.call(this, instanceId); // super\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.MathRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setResultTypes(params.getResultTypes());\n        input.setColumnar(params.isColumnar());\n        input.setScratchOutDetectionSensitivity(params.getScratchOutDetectionSensitivity());\n        input.setUserResources(params.getUserResources());\n\n        var data = new scope.MathRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.MathParameter();\n        this.setUrl('wss://cloud.myscript.com');\n        if (host) {\n            this.setUrl('wss://' + host);\n        }\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    MathWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/math');\n        }\n    };\n\n    MathWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, message.data);\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.MathResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.MusicRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setStaff(params.getStaff());\n        input.setDivisions(params.getDivisions());\n        input.setResultTypes(params.getResultTypes());\n        input.setScratchOutDetectionSensitivity(params.getScratchOutDetectionSensitivity());\n        input.setUserResources(params.getUserResources());\n\n        var data = new scope.MusicRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setParameters(params);\n\n        var data = new scope.AnalyzerRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * Set the context (legacy code for non-regression)\n     *\n     * @private\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype._setContext = function (context) {\n        this.context = context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponents = function (components, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponent = function (component, context, parameters) {\n        if (component instanceof scope.Stroke) {\n            this.drawStroke(component, context, parameters);\n        } else if (component instanceof scope.CharacterInputComponent) {\n            this.drawCharacter(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {Rectangle} rectangle\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var params = this.getParameters();\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getRectColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawCharacter = function (character, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method drawStroke\n     * @param {Stroke} stroke\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (stroke && stroke.getLength() > 0) {\n            if (stroke instanceof scope.StrokeComponent) {\n                _renderStroke(stroke, this.getContext());\n            } else {\n                this.drawStart(stroke.getX()[0], stroke.getY()[0]);\n                for (var i = 0; i < stroke.getLength(); ++i) {\n                    this.drawContinue(stroke.getX()[i], stroke.getY()[i], context, parameters);\n                }\n                this.drawEnd(stroke.getX()[stroke.getLength() - 1], stroke.getY()[stroke.getLength() - 1], context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw stroke components\n     *\n     * @private\n     * @method drawStrokes\n     * @param {Stroke[]} strokes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes, context, parameters) {\n        for (var i = 0; i < strokes.length; i++) {\n            this.drawStroke(strokes[i], context, parameters);\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x: (point.x - Math.sin(angle) * radius),\n            y: (point.y + Math.cos(angle) * radius)\n        }, {\n            x: (point.x + Math.sin(angle) * radius),\n            y: (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x: ((point2.x + point1.x) / 2),\n            y: ((point2.y + point1.y) / 2),\n            p: ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color) {\n        if (color !== undefined) {\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3) {\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++) {\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    /**\n     * DEPRECATED METHODS\n     */\n\n    /**\n     * Record the beginning of drawing\n     *\n     * @deprecated\n     * @method drawStart\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStart = function (x, y, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        this.points = [];\n        this.drawing = true;\n        this.points.push(new scope.QuadraticPoint({x: x, y: y}));\n    };\n\n    /**\n     * Record the drawing\n     *\n     * @deprecated\n     * @method drawContinue\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawContinue = function (x, y, context, parameters) {\n        if (this.drawing) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            var params = this.getParameters();\n            var delta = 2 + (params.getWidth() / 4);\n            var last = this.points[this.points.length - 1];\n\n            if (Math.abs(last.getX() - x) >= delta || Math.abs(last.getY() - y) >= delta) {\n\n                if (this.points.length === 1) { // firstPoint\n\n                    var pA = this.points[this.points.length - 1]; // firstPoint\n                    var pB = new scope.QuadraticPoint({x: x, y: y});\n                    var pAB = new scope.QuadraticPoint({\n                        x: 0.5 * (pA.getX() + pB.getX()),\n                        y: 0.5 * (pA.getY() + pB.getY())\n                    });\n                    _computePointParameters(pA, pAB, params.getPressureType());\n                    _computePointParameters(pAB, pB, params.getPressureType());\n\n                    _computeFirstControls(pA, pAB, params.getWidth());\n                    _computeControls(pAB, pB, params.getWidth());\n\n                    this.points.push(pAB);\n                    this.points.push(pB);\n\n                    _drawFirstSegment(pA, pAB, this.getContext(), params);\n\n                } else {\n                    var pAB = this.points[this.points.length - 2]; // jshint ignore:line\n                    var pB = this.points[this.points.length - 1]; // jshint ignore:line\n                    var pC = new scope.QuadraticPoint({x: x, y: y});\n                    var pBC = new scope.QuadraticPoint({\n                        x: 0.5 * (pB.getX() + pC.getX()),\n                        y: 0.5 * (pB.getY() + pC.getY())\n                    });\n                    _computePointParameters(pB, pBC, params.getPressureType());\n                    _computePointParameters(pBC, pC, params.getPressureType());\n\n                    _computeControls(pB, pBC, params.getWidth());\n                    _computeControls(pBC, pC, params.getWidth());\n\n                    this.points.push(pBC);\n                    this.points.push(pC);\n\n                    _drawSegment(pAB, pB, pBC, this.getContext(), params);\n                }\n            }\n        }\n    };\n\n    /**\n     * Stop record of drawing\n     *\n     * @deprecated\n     * @method drawEnd\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawEnd = function (x, y, context, parameters) {\n        if (this.drawing) {\n            var params = this.getParameters();\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            if (this.points.length === 1) {\n                _drawPoint(new scope.QuadraticPoint({x: x, y: y}), this.getContext(), params);\n            } else if (this.points.length > 1) {\n                var pA = this.points[this.points.length - 1];\n                var pB = new scope.QuadraticPoint({x: x, y: y});\n                var pAB = new scope.QuadraticPoint({\n                    x: 0.5 * (pA.getX() + pB.getX()),\n                    y: 0.5 * (pA.getY() + pB.getY())\n                });\n                _computePointParameters(pA, pAB, params.getPressureType());\n                _computePointParameters(pAB, pB, params.getPressureType());\n\n                _computeControls(pA, pAB, params.getWidth());\n                _computeLastControls(pB, params.getWidth());\n\n                this.points.push(pAB);\n                this.points.push(pB);\n\n                _drawLastSegment(pAB, pB, this.getContext(), params);\n            }\n            this.drawing = false;\n        }\n    };\n\n    /**\n     * Draw point on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawPoint\n     * @param {QuadraticPoint} point\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawPoint = function (point, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.arc(point.getX(), point.getY(), 0.25 * parameters.getWidth(), 0, 2 * Math.PI);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw the first stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawFirstSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawFirstSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw middle stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {QuadraticPoint} pC\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawSegment = function (pA, pB, pC, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.quadraticCurveTo(pB.getP1().getX(), pB.getP1().getY(), pC.getP1().getX(), pC.getP1().getY());\n            context.lineTo(pC.getP2().getX(), pC.getP2().getY());\n            context.quadraticCurveTo(pB.getP2().getX(), pB.getP2().getY(), pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw the last stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawLastSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLastSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Compute distance and unit vector from the previous point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePointParameters\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     * @param {String} pressureType\n     */\n    var _computePointParameters = function (previous, point, pressureType) {\n        var dx = point.getX() - previous.getX(),\n            dy = point.getY() - previous.getY(),\n            d = Math.sqrt((dx * dx) + (dy * dy));\n\n        if (d !== 0) {\n            point.setDistance(d);\n            point.setCos(dx / d);\n            point.setSin(dy / d);\n        }\n        point.setLength(previous.getLength() + point.getDistance());\n\n        switch (pressureType) {\n            case 'SIMULATED':\n                _computePressure(point);\n                break;\n            case 'CONSTANT':\n                point.setPressure(1.0);\n                break;\n            case 'REAL':\n                // keep the current pressure\n                break;\n            default:\n                throw new Error('Unknown pressure type');\n        }\n    };\n\n    /**\n     * Compute simulated pressure of given point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePressure\n     * @param {QuadraticPoint} point\n     */\n    var _computePressure = function (point) {\n        var k, pressure;\n        if (point.getDistance() < 10) {\n            k = 0.2 + Math.pow(0.1 * point.getDistance(), 0.4);\n        } else if (point.getDistance() > point.getLength() - 10) {\n            k = 0.2 + Math.pow(0.1 * (point.getLength() - point.getDistance()), 0.4);\n        } else {\n            k = 1.0;\n        }\n\n        pressure = k * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(point.getDistance()));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        point.setPressure(pressure);\n    };\n\n    /**\n     * Compute control points of the first point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeFirstControls\n     * @param {QuadraticPoint} first First point of the list to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeFirstControls = function (first, next, penWidth) {\n        var r = 0.5 * (penWidth * first.getPressure()),\n            nx = r * next.getSin(),\n            ny = r * next.getCos();\n\n        first.getP1().setX(first.getX() - nx);\n        first.getP1().setY(first.getY() + ny);\n        first.getP2().setX(first.getX() + nx);\n        first.getP2().setY(first.getY() - ny);\n    };\n\n    /**\n     * Compute control points between two points.\n     *\n     * @private\n     * @deprecated\n     * @method _computeControls\n     * @param {QuadraticPoint} point Point to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeControls = function (point, next, penWidth) {\n        var cos = point.getCos() + next.getCos(),\n            sin = point.getSin() + next.getSin(),\n            u = Math.sqrt((cos * cos) + (sin * sin));\n\n        if (u !== 0) {\n            // compute control points\n            var r = 0.5 * penWidth * point.getPressure();\n            var nx = -r * sin / u;\n            var ny = r * cos / u;\n            point.getP1().setX(point.getX() + nx);\n            point.getP1().setY(point.getY() + ny);\n            point.getP2().setX(point.getX() - nx);\n            point.getP2().setY(point.getY() - ny);\n        }\n    };\n\n    /**\n     * Compute control points of the last point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeLastControls\n     * @param {QuadraticPoint} last Last point to be computed\n     * @param {Number} penWidth Pen width\n     */\n    var _computeLastControls = function (last, penWidth) {\n        var r = 0.5 * penWidth * last.getPressure(),\n            nx = -r * last.getSin(),\n            ny = r * last.getCos();\n\n        last.getP1().setX(last.getX() + nx);\n        last.getP1().setY(last.getY() + ny);\n        last.getP2().setX(last.getX() - nx);\n        last.getP2().setY(last.getY() - ny);\n    };\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (inputUnits, recognitionResult, context, parameters) {\n        this.drawInputUnits(inputUnits, context, parameters);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits, context, parameters) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents(), context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractTextInputComponent) {\n                _drawTextComponent(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @deprecated\n     * @method drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawTextComponent = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawTextComponent(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw text component\n     *\n     * @private\n     * @method _drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextComponent = function (component, context, parameters) {\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, context, parameters);\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (this.isTypesetting()) {\n            this.drawShapes(components, recognitionResult.getSegments(), context, parameters);\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                _drawShapePrimitive(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes, context, parameters) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            _drawShapeRecognized(candidate, this.getContext(), this.getParameters());\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            this.drawShapeNotRecognized(components, segment.getInkRanges(), context, parameters);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @deprecated\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeRecognized(shapeRecognized, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges, context, parameters) {\n        var notRecognized = _extractShapeNotRecognized(components, inkRanges);\n        this.drawComponents(notRecognized, context, parameters);\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @deprecated\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapePrimitive(primitive, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @deprecated\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeLine = function (shapeLine, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeLine(shapeLine, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @deprecated\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeEllipse(shapeEllipse, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @private\n     * @method _drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        for (var i in shapeRecognized.getPrimitives()) {\n            _drawShapePrimitive(shapeRecognized.getPrimitives()[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @private\n     * @method _drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            _drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            _drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @private\n     * @method _drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeLine = function (shapeLine, context, parameters) {\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), context, parameters);\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @private\n     * @method _drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            context, parameters);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Get strokes from shape inkRange\n     *\n     * @deprecated\n     * @method extractStroke\n     * @param {Stroke[]} strokes\n     * @param {ShapeInkRange} inkRange\n     * @result {Stroke[]} List of strokes from inkRange\n     */\n    ShapeRenderer.prototype.extractStroke = function (strokes, inkRange) {\n        return _extractShapeNotRecognized(strokes, inkRange);\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param inkRanges\n     * @returns {*}\n     */\n    var _extractShapeNotRecognized = function (components, inkRanges) {\n        var result = [];\n\n        for (var i in inkRanges) {\n            var inkRange = inkRanges[i];\n\n            var firstPointIndex = Math.floor(inkRange.getFirstPoint());\n            var lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n            for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n                var currentStroke = components[strokeIndex];\n                var currentStrokePointCount = currentStroke.getX().length;\n\n                var newStroke = new scope.Stroke(), x = [], y = [];\n\n                for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                    x.push(currentStroke.getX()[pointIndex]);\n                    y.push(currentStroke.getY()[pointIndex]);\n                }\n\n                newStroke.setX(x);\n                newStroke.setY(y);\n                result.push(newStroke);\n            }\n        }\n        return result;\n\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = _removeMathScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @deprecated\n     * @param {AbstractComponent[]} components\n     * @param {MathScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MathRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        return _removeMathScratchOut(components, scratchOutResults);\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMathScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getErasedInkRanges()[n].getComponent());\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getInkRanges()[p].getComponent());\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = _removeMusicScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @deprecated\n     * @param {AbstractComponent[]} components\n     * @param {MusicScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MusicRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        return _removeMusicScratchOut(components, scratchOutResults);\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawStaff = function (staff, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawStaff(staff, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                _drawMusicNode(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw music node\n     *\n     * @method drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawMusicNode = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawMusicNode(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @private\n     * @method _drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStaff = function (staff, context, parameters) {\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw music node\n     *\n     * @private\n     * @method _drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawMusicNode = function (component, context, parameters) {\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, context, parameters);\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, context, parameters);\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, context, parameters);\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, context, parameters);\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, context, parameters);\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, context, parameters);\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, context, parameters);\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, context, parameters);\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, context, parameters);\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, context, parameters);\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, context, parameters);\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, context, parameters);\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, context, parameters);\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMusicScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (this.isTypesetting()) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes(), context, parameters);\n            _drawTables(components, recognitionResult.getTables(), this.getContext(), this.getParameters());\n            _drawTextLines(components, recognitionResult.getTextLines(), this.getContext(), this.getParameters());\n            //_drawGroups(components, recognitionResult.getGroups(), this.getContext(), this.getParameters()); // TODO: not implemented\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @deprecated\n     * @method drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTables = function (components, tables, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in tables) {\n            if (this.getShowBoundingBoxes()) {\n                for (var j in tables[i].getCells()) {\n                    _drawCell(tables[i].getCells()[j], this.getContext(), this.getParameters());\n                }\n            }\n        }\n        _drawTables(components, tables, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @deprecated\n     * @method drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTextLines = function (components, textLines, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data && this.getShowBoundingBoxes()) {\n                this.drawRectangle(data.getBoundingBox(), context, parameters);\n            }\n        }\n        _drawTextLines(components, textLines, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @deprecated\n     * @method drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawText(boundingBox, text, justificationType, textHeight, baseline, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw Underline\n     *\n     * @deprecated\n     * @method drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawUnderline(boundingBox, underline, text, textHeight, baseline, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @deprecated\n     * @method drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        _drawGroups(components, groups, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @deprecated\n     * @method drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n            _drawCell(cell, this.getContext(), this.getParameters());\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @private\n     * @method _drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTables = function (components, tables, context, parameters) {\n        for (var i in tables) {\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @private\n     * @method _drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                _drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    _drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @private\n     * @method _drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n            context.textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            context.fillText(text, boundingBox.getX(), baseline);\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @private\n     * @method _drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n\n    /**\n     * Draw Underline\n     *\n     * @private\n     * @method _drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), context, parameters);\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @private\n     * @method _drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            var rectangle = cell.getData().getBoundingBox();\n            context.save();\n            try {\n                context.fillStyle = parameters.getRectColor();\n                context.strokeStyle = parameters.getColor();\n                context.lineWidth = 0.5 * parameters.getWidth();\n                context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n            } finally {\n                context.restore();\n            }\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n        this.canvasRatio = 1;\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            ssl: true,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        // Capture\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n        this.canvasRatio = _getCanvasRatio(this._renderingCanvas);\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer();\n        this._mathRecognizer = new scope.MathRecognizer();\n        this._shapeRecognizer = new scope.ShapeRecognizer();\n        this._musicRecognizer = new scope.MusicRecognizer();\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer();\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this));\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this));\n\n        this._attachListeners(element);\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        this._initialize(this._getOptions());\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        this._captureCanvas.width = width * this.canvasRatio;\n        this._captureCanvas.style.width = width + 'px';\n        this._renderingCanvas.width = width * this.canvasRatio;\n        this._renderingCanvas.style.width = width + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        this._captureCanvas.height = height * this.canvasRatio;\n        this._captureCanvas.style.height = height + 'px';\n        this._renderingCanvas.height = height * this.canvasRatio;\n        this._renderingCanvas.style.height = height + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @deprecated Use setTextParameters instead\n     * @method setLanguage\n     * @param  String language\n     */\n    InkPaper.prototype.setLanguage = function (language) {\n        if (this.options.type === scope.RecognitionType.TEXT) {\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setLanguage(language);\n        }\n    };\n\n    /**\n     * Set math recognition format result types\n     *\n     * @deprecated Use setMathParameters instead\n     * @method setResultTypes\n     * @param  Array resultTypes\n     */\n    InkPaper.prototype.setResultTypes = function (resultTypes) {\n        if (this.options.type === scope.RecognitionType.MATH) {\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setResultTypes(resultTypes.map(function (x) {\n                return x.toUpperCase();\n            }));\n        }\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._selectedRenderer.getParameters()[i] = penParameters[i]; // Override options\n                }\n            }\n            var params = this._selectedRenderer.getParameters();\n            this._inkGrabber.setParameters(params); // Override options\n            this._textRenderer.setParameters(params); // Override options\n            this._mathRenderer.setParameters(params); // Override options\n            this._shapeRenderer.setParameters(params); // Override options\n            this._musicRenderer.setParameters(params); // Override options\n            this._analyzerRenderer.setParameters(params); // Override options\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * @private\n     * @method _initialize\n     * @param {Object} options\n     */\n    InkPaper.prototype._initialize = function (options) {\n\n        this.setHost(options.host);\n\n        this.setTextParameters(options.textParameters); // jshint ignore:line\n        this.setMathParameters(options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(options.analyzerParameters); // jshint ignore:line\n\n        // Recognition type\n        this.setType(options.type);\n        this.setProtocol(options.protocol);\n        this.setTimeout(options.timeout);\n        this.setApplicationKey(options.applicationKey);\n        this.setHmacKey(options.hmacKey);\n\n        this.setPenParameters(options.penParameters);\n        this.setTypeset(options.typeset);\n\n        this.setWidth(options.width);\n        this.setHeight(options.height);\n    };\n\n    /**\n     * Get options\n     *\n     * @private\n     * @method _getOptions\n     * @returns {Object}\n     */\n    InkPaper.prototype._getOptions = function () {\n        return this.options;\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @param {String} [inputMode] input mode\n     */\n    InkPaper.prototype.getAvailableLanguages = function (inputMode) {\n        this._selectedRESTRecognizer.getAvailableLanguageList(\n            this.getApplicationKey(),\n            inputMode ? inputMode : this._textRecognizer.getParameters().getInputMode()\n        ).then(\n            function (data) {\n                return this._onResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n                return error;\n            }.bind(this)\n        ).done();\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the recognition callback\n     *\n     * @method setCallback\n     * @deprecated Use setResultCallback instead\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     */\n    InkPaper.prototype.setCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        return this._doRecognition(this.components);\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this.components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            this.redoComponents.push(this.components.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange({\n                canUndo: this.canUndo(),\n                undoLength: this.components.length,\n                canRedo: this.canRedo(),\n                redoLength: this.redoComponents.length\n            });\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this.redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this.components.push(this.redoComponents.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange({\n                canUndo: this.canUndo(),\n                undoLength: this.components.length,\n                canRedo: this.canRedo(),\n                redoLength: this.redoComponents.length\n            });\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            if (this._instanceId) {\n                this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                this._instanceId = undefined;\n            }\n        }\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this._inkGrabber.clear();\n        this._instanceId = undefined;\n\n        this._initRenderingCanvas();\n        this._onChange({\n            canUndo: this.canUndo(),\n            undoLength: this.components.length,\n            canRedo: this.canRedo(),\n            redoLength: this.redoComponents.length\n        });\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n\n        if (this._captureCanvas.clientHeight != this._captureCanvas.height) {\n            this._captureCanvas.height = this._captureCanvas.clientHeight;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight;\n        }\n        if (this._captureCanvas.clientWidth != this._captureCanvas.width) {\n            this._captureCanvas.width = this._captureCanvas.clientWidth;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth;\n        }\n\n        if (this.canRedo()) {\n            this.redoComponents = [];\n            this._onChange({\n                canUndo: this.canUndo(),\n                undoLength: this.components.length,\n                canRedo: this.canRedo(),\n                redoLength: this.redoComponents.length\n            });\n        }\n        this._inkGrabber.startCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this.components.push(stroke);\n        this._onChange({\n            canUndo: this.canUndo(),\n            undoLength: this.components.length,\n            canRedo: this.canRedo(),\n            redoLength: this.redoComponents.length\n        });\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            }\n        }\n    };\n\n    /**\n     * Do recognition\n     *\n     * @private\n     * @method _doRecognition\n     * @param {AbstractComponent[]} components Input components\n     */\n    InkPaper.prototype._doRecognition = function (components) {\n        if (components.length > 0) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                if (this._initialized) {\n                    var inputWS = [];\n                    if (this._selectedRecognizer instanceof scope.TextWSRecognizer) {\n                        var inputUnitWS = new scope.TextInputUnit();\n                        inputUnitWS.setComponents(this._getOptions().components.concat(components.slice(this.lastNonRecoComponentIdx)));\n                        inputWS = [inputUnitWS];\n                    } else {\n                        inputWS = components.slice(this.lastNonRecoComponentIdx);\n                    }\n                    this.lastNonRecoComponentIdx = components.length;\n\n\n                    if (this.isStarted) {\n                        this._selectedRecognizer.continueWSRecognition(inputWS, this._instanceId);\n                    } else {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(inputWS);\n                    }\n                }\n            } else {\n                var input = [];\n                if (this._selectedRecognizer instanceof scope.TextRecognizer) {\n                    var inputUnit = new scope.TextInputUnit();\n                    inputUnit.setComponents(this._getOptions().components.concat(components));\n                    input = [inputUnit];\n                } else if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                    input = components.slice(this.lastNonRecoComponentIdx);\n                    this.lastNonRecoComponentIdx = components.length;\n                } else {\n                    input = input.concat(this._getOptions().components, components);\n                }\n                this._selectedRecognizer.doSimpleRecognition(\n                    this.getApplicationKey(),\n                    this._instanceId,\n                    input,\n                    this.getHmacKey()\n                ).then(\n                    function (data) {\n                        return this._parseResult(data, input);\n                    }.bind(this),\n                    function (error) {\n                        this._onResult(undefined, error);\n                        return error;\n                    }.bind(this)\n                ).done();\n            }\n        } else {\n            this.isStarted = false;\n            this._selectedRenderer.clear();\n            this._initRenderingCanvas();\n            this._onResult();\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('failure', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function (changes) {\n        if (this.changeCallback) {\n            this.changeCallback(changes)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: changes}));\n    };\n\n    InkPaper.prototype._parseResult = function (data, input) {\n\n        if (!this._instanceId) {\n            this._instanceId = data.getInstanceId();\n        } else if (this._instanceId !== data.getInstanceId()) {\n            this._onResult(data);\n            return data;\n        }\n\n        if (data.getDocument().hasScratchOutResults() || this._selectedRenderer.isTypesetting()) {\n            this._selectedRenderer.clear();\n            this._selectedRenderer.drawRecognitionResult(input, data.getDocument());\n        }\n\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service url\n     *\n     * @param {String} host\n     */\n    InkPaper.prototype.setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._textWSRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._mathWSRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n                console.log('pointerenter');\n                console.log(e);\n            }\n        }, false);\n\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n        this._drawInput(this.components);\n    };\n\n    InkPaper.prototype._drawInput = function (components) {\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            } else {\n                throw new Error('Missing music staff');\n            }\n        }\n        this._selectedRenderer.drawComponents(this._getOptions().components.concat(components));\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this.lastNonRecoComponentIdx = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge(this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    break;\n                default:\n                {\n                    this._parseResult(message, this.components);\n                    break;\n                }\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n    /**\n     * Tool to get canvas ratio (retina display)\n     *\n     * @private\n     * @param {Element} canvas\n     * @returns {Number}\n     */\n    function _getCanvasRatio(canvas) {\n        if (canvas) {\n            var context = canvas.getContext('2d'),\n                devicePixelRatio = window.devicePixelRatio || 1,\n                backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        }\n        return 1;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n","/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n","'use strict';\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Complex Point object used for quadratic calculation\n     *\n     * @deprecated\n     * @class QuadraticPoint\n     * @extends Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function QuadraticPoint(obj) {\n        scope.Point.call(this, obj);\n        this.pressure = 0.5;\n        this.distance = 0.0;\n        this.length = 0.0;\n        this.cos = 0.0;\n        this.sin = 0.0;\n        this.p1 = new scope.Point(obj);\n        this.p2 = new scope.Point(obj);\n        if (obj) {\n            this.pressure = obj.pressure;\n            this.distance = obj.distance;\n            this.length = obj.length;\n            this.cos = obj.cos;\n            this.sin = obj.sin;\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    QuadraticPoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    QuadraticPoint.prototype.constructor = QuadraticPoint;\n\n    /**\n     * Get pressure\n     *\n     * @method getPressure\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getPressure = function () {\n        return this.pressure;\n    };\n\n    /**\n     * Set pressure\n     *\n     * @method setPressure\n     * @param {Number} pressure\n     */\n    QuadraticPoint.prototype.setPressure = function (pressure) {\n        this.pressure = pressure;\n    };\n\n    /**\n     * Get distance\n     *\n     * @method getDistance\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getDistance = function () {\n        return this.distance;\n    };\n\n    /**\n     * Set distance\n     *\n     * @method setDistance\n     * @param {Number} distance\n     */\n    QuadraticPoint.prototype.setDistance = function (distance) {\n        this.distance = distance;\n    };\n\n    /**\n     * Get length\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getLength = function () {\n        return this.length;\n    };\n\n    /**\n     * Set length\n     *\n     * @method setLength\n     * @param {Number} length\n     */\n    QuadraticPoint.prototype.setLength = function (length) {\n        this.length = length;\n    };\n\n    /**\n     * Get cos\n     *\n     * @method getCos\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getCos = function () {\n        return this.cos;\n    };\n\n    /**\n     * Set cos\n     *\n     * @method setCos\n     * @param {Number} cos\n     */\n    QuadraticPoint.prototype.setCos = function (cos) {\n        this.cos = cos;\n    };\n\n    /**\n     * Get sin\n     *\n     * @method getSin\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getSin = function () {\n        return this.sin;\n    };\n\n    /**\n     * Set sin\n     *\n     * @method setSin\n     * @param {Number} sin\n     */\n    QuadraticPoint.prototype.setSin = function (sin) {\n        this.sin = sin;\n    };\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Set p1\n     *\n     * @method setP1\n     * @param {Point} p1\n     */\n    QuadraticPoint.prototype.setP1 = function (p1) {\n        this.p1 = p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    /**\n     * Set p2\n     *\n     * @method setP2\n     * @param {Point} p2\n     */\n    QuadraticPoint.prototype.setP2 = function (p2) {\n        this.p2 = p2;\n    };\n\n    // Export\n    scope.QuadraticPoint = QuadraticPoint;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * The InkManager class that can use to store writing strokes and manage the undo/redo/clear system\n     *\n     * @deprecated\n     * @class InkManager\n     * @constructor\n     */\n    function InkManager() {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    }\n\n    /**\n     * Is Writing a stroke\n     *\n     * @deprecated\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last current Stroke write\n     *\n     * @deprecated\n     * @method getCurrentStroke\n     * @returns {Stroke}\n     */\n    InkManager.prototype.getCurrentStroke = function () {\n        return this.currentStroke;\n    };\n\n    /**\n     * Start ink capture\n     *\n     * @deprecated\n     * @method startInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.startInkCapture = function (x, y, t) {\n        if (!this.writing) {\n            if (!this.isRedoEmpty()) {\n                this.clearUndoRedoStack();\n            }\n            this.currentStroke = new scope.Stroke();\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n            this.writing = true;\n        } else {\n            throw new Error('Stroke capture already running');\n        }\n    };\n\n    /**\n     * Continue ink capture\n     *\n     * @deprecated\n     * @method continueInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.continueInkCapture = function (x, y, t) {\n        if (this.writing) {\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * End ink capture\n     *\n     * @deprecated\n     * @method endInkCapture\n     */\n    InkManager.prototype.endInkCapture = function () {\n        if (this.writing) {\n            this.strokes.push(this.currentStroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * Clear the strokes list\n     *\n     * @deprecated\n     * @method clear\n     */\n    InkManager.prototype.clear = function () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Is The Strokes list is empty\n     *\n     * @deprecated\n     * @method isEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isEmpty = function () {\n        return this.strokes.length === 0;\n    };\n\n    /**\n     * Is the Undo/Redo Stack empty\n     *\n     * @method isRedoEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isRedoEmpty = function () {\n        return this.undoRedoStack.length === 0;\n    };\n\n    /**\n     * Make an undo\n     *\n     * @deprecated\n     * @method undo\n     */\n    InkManager.prototype.undo = function () {\n        if (!this.isEmpty()) {\n            this.undoRedoStack.push(this.strokes.pop());\n        }\n    };\n\n    /**\n     * Make a redo\n     *\n     * @deprecated\n     * @method redo\n     */\n    InkManager.prototype.redo = function () {\n        if (!this.isRedoEmpty()) {\n            this.strokes.push(this.undoRedoStack.pop());\n        }\n    };\n\n    /**\n     * Get the strokes list\n     *\n     * @deprecated\n     * @method getStokes\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getStrokes = function () {\n        return this.strokes;\n    };\n\n    /**\n     * Get the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method getUndoRedoStack\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getUndoRedoStack = function () {\n        return this.undoRedoStack;\n    };\n\n    /**\n     * Clear the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method clearUndoRedoStack\n     */\n    InkManager.prototype.clearUndoRedoStack = function () {\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Copy the strokes values from index on an other list of strokes\n     *\n     * @deprecated\n     * @method copy\n     * @param {Stroke[]} strokes List of strokes\n     * @param {Number} index Position to start the copy\n     */\n    InkManager.prototype.copy = function (strokes, index) {\n        for (index; index < this.strokes.length; index++) {\n            strokes.push(this.strokes[index]);\n        }\n    };\n\n    // Export\n    scope.InkManager = InkManager;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters(obj) {\n        this.color = 'rgba(0, 0, 0, 0.9)';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = 'normal';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n        if (obj) {\n            this.color = obj.color;\n            this.rectColor = obj.rectColor;\n            this.font = obj.font;\n            this.decoration = obj.decoration;\n            this.width = obj.width;\n            this.pressureType = obj.pressureType;\n            this.alpha = obj.alpha;\n        }\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get the pressure renderer parameter\n     *\n     * @deprecated\n     * @method getPressureType\n     * @returns {String} The pressure type\n     */\n    PenParameters.prototype.getPressureType = function () {\n        return this.pressureType;\n    };\n\n    /**\n     * Set the pressure renderer parameter\n     *\n     * @deprecated\n     * @method setPressureType\n     * @param {String} pressureType\n     */\n    PenParameters.prototype.setPressureType = function (pressureType) {\n        this.pressureType = pressureType;\n    };\n\n    /**\n     * Get the alpha renderer parameter\n     *\n     * @deprecated Use a rgba() color\n     * @method getAlpha\n     * @returns {String} The alpha\n     */\n    PenParameters.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * Set the alpha renderer parameter\n     *\n     * @deprecated Use a rgba() color\n     * @method setAlpha\n     * @param {String} alpha\n     */\n    PenParameters.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @deprecated Use 'PenParameters' instead\n     * @class RenderingParameters\n     * @constructor\n     */\n    function RenderingParameters() {\n        scope.PenParameters.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    RenderingParameters.prototype = new scope.PenParameters();\n\n    /**\n     * Constructor property\n     */\n    RenderingParameters.prototype.constructor = RenderingParameters;\n\n    // Export\n    scope.RenderingParameters = RenderingParameters;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @deprecated Use StrokeComponent instead\n     * @class Stroke\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function Stroke(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        if (obj) {\n            if (obj.x) {\n                this.x = obj.x;\n            }\n            if (obj.y) {\n                this.y = obj.y;\n            }\n            if (obj.t) {\n                this.t = obj.t;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    Stroke.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    Stroke.prototype.constructor = Stroke;\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    Stroke.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    Stroke.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    Stroke.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    Stroke.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    Stroke.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    Stroke.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    Stroke.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    Stroke.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    // Export\n    scope.Stroke = Stroke;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @class StrokeComponent\n     * @extends Stroke\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.Stroke.call(this);\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            if (obj.p) {\n                this.p = obj.p;\n            }\n            if (obj.d) {\n                this.d = obj.d;\n            }\n            if (obj.l) {\n                this.l = obj.l;\n            }\n            if (obj.color) {\n                this.color = obj.color;\n            }\n            if (obj.alpha) {\n                this.alpha = obj.alpha;\n            }\n            if (obj.width) {\n                this.width = obj.width;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.Stroke();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**     *\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * @deprecated Use a rgba() color\n     * @param alpha\n     */\n    StrokeComponent.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * @deprecated Use a rgba() color\n     * @param alpha\n     */\n    StrokeComponent.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (this.filterPointByAcquisitionDelta(x, y)) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(this.computeP(x, y));\n            this.addD(this.computeD(x, y));\n            this.addL(this.computeL(x, y));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    StrokeComponent.prototype.computeD = function (x, y) {\n        var distance = Math.sqrt(Math.pow((y - this.getY()[this.getLastIndexPoint() - 1]), 2) + Math.pow((x - this.getX()[this.getLastIndexPoint() - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    };\n\n    StrokeComponent.prototype.computeL = function (x, y) {\n        var length = this.getL()[this.getLastIndexPoint() - 1] + this.computeD(x, y);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    };\n\n    StrokeComponent.prototype.computeP = function (x, y) {\n        var ratio = 1.0;\n        var distance = this.computeD(x, y);\n        var length = this.computeL(x, y);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    };\n\n    StrokeComponent.prototype.filterPointByAcquisitionDelta = function (x, y) {\n        var delta = (2 + (this.getWidth() / 4));\n        var ret = false;\n        if (this.getLength() === 0 || Math.abs(this.getX()[this.getLastIndexPoint()] - x) >= delta || Math.abs(this.getY()[this.getLastIndexPoint()] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    };\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n        if (obj) {\n            if (obj.alternates) {\n                for (var i in obj.alternates) {\n                    this.alternates.push(new scope.CharacterInputComponentAlternate(obj.alternates[i]));\n                }\n            }\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(obj) {\n        if (obj) {\n            if (obj.alternate) {\n                this.alternate = obj.alternate;\n            }\n            if (obj.probability) {\n                this.probability = obj.probability;\n            }\n        }\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    /**\n     * Get recognition input\n     *\n     * @method getRecognitionInput\n     * @returns {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.getRecognitionInput = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.setRecognitionInput = function (input) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'char';\n        if (obj) {\n            if (obj.character) {\n                this.character = obj.character;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get character\n     *\n     * @deprecated Use 'getLabel'\n     * @method getCharacter\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getCharacter = function () {\n        return this.character;\n    };\n\n    /**\n     * Set character\n     *\n     * @deprecated Use 'setLabel'\n     * @method setCharacter\n     * @param {String} character\n     */\n    CharInputComponent.prototype.setCharacter = function (character) {\n        this.character = character;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'string';\n        if (obj) {\n            if (obj.string) {\n                this.string = obj.string;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get string\n     *\n     * @deprecated Use 'getLabel'\n     * @method getString\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getString = function () {\n        return this.string;\n    };\n\n    /**\n     * Set string\n     *\n     * @deprecated Use 'setLabel'\n     * @method setString\n     * @param {String} string\n     */\n    StringInputComponent.prototype.setString = function (string) {\n        this.string = string;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n        if (obj) {\n            if (obj.language) {\n                this.language = obj.language;\n            }\n            if (obj.textInputMode) {\n                this.textInputMode = obj.textInputMode;\n            }\n            if (obj.contentTypes) {\n                this.contentTypes = obj.contentTypes;\n            }\n            if (obj.subsetKnowledges) {\n                this.subsetKnowledges = obj.subsetKnowledges;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.userLkWords) {\n                this.userLkWords = obj.userLkWords;\n            }\n            if (obj.resultDetail) {\n                this.resultDetail = obj.resultDetail;\n            }\n            if (obj.textProperties) {\n                this.textProperties = new scope.TextProperties(obj.textProperties);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties(obj) {\n        if (obj) {\n            if (obj.textCandidateListSize) {\n                this.textCandidateListSize = obj.textCandidateListSize;\n            }\n            if (obj.wordCandidateListSize) {\n                this.wordCandidateListSize = obj.wordCandidateListSize;\n            }\n            if (obj.wordPredictionListSize) {\n                this.wordPredictionListSize = obj.wordPredictionListSize;\n            }\n            if (obj.wordCompletionListSize) {\n                this.wordCompletionListSize = obj.wordCompletionListSize;\n            }\n            if (obj.characterCandidateListSize) {\n                this.characterCandidateListSize = obj.characterCandidateListSize;\n            }\n            if (obj.discardCaseVariations) {\n                this.discardCaseVariations = obj.discardCaseVariations;\n            }\n            if (obj.discardAccentuationVariations) {\n                this.discardAccentuationVariations = obj.discardAccentuationVariations;\n            }\n            if (obj.disableSpatialOrdering) {\n                this.disableSpatialOrdering = obj.disableSpatialOrdering;\n            }\n            if (obj.glyphDistortion) {\n                this.glyphDistortion = obj.glyphDistortion;\n            }\n            if (obj.enableOutOfLexicon) {\n                this.enableOutOfLexicon = obj.enableOutOfLexicon;\n            }\n            if (obj.spellingDistortion) {\n                this.spellingDistortion = obj.spellingDistortion;\n            }\n        }\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getTextRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getTextRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setTextRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setTextRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get text input\n     *\n     * @method getRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        if (obj) {\n            if (obj.rejectDetectionSensitivity) {\n                this.rejectDetectionSensitivity = obj.rejectDetectionSensitivity;\n            }\n            if (obj.doBeautification) {\n                this.doBeautification = obj.doBeautification;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method getDoBeautification\n     * @returns {Boolean}\n     */\n    ShapeRecognitionInput.prototype.getDoBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setDoBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeRecognitionInput.prototype.setDoBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Number}\n     */\n    ShapeRecognitionInput.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Number} rejectDetectionSensitivity\n     */\n    ShapeRecognitionInput.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getShapeRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getShapeRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setShapeRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setShapeRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get shape input\n     *\n     * @method getRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n            if (obj.columnarOperation) {\n                this.columnarOperation = obj.columnarOperation;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathRecognitionInput.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathRecognitionInput.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n    /**\n     * Get math input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getMathRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getMathRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setMathRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setMathRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get math input\n     *\n     * @method getRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'accidental';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'arpeggiate';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBar(obj.value);\n            }\n        }\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBeam(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicClef(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicDecoration(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'dots';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'head';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'rest';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'stem';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'tieOrSlur';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'timeSignature';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff(obj) {\n        this.count = 5;\n        this.gap = 20;\n        if (obj) {\n            if (obj.count) {\n                this.count = obj.count;\n            }\n            if (obj.gap) {\n                this.gap = obj.gap;\n            }\n            if (obj.top) {\n                this.top = obj.top;\n            }\n        }\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.divisions) {\n                this.divisions = obj.divisions;\n            }\n            if (obj.staff) {\n                this.staff = new scope.MusicStaff(obj.staff);\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the result types\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the result types\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicRecognitionInput.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRecognitionInput.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicRecognitionInput.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getMusicRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getMusicRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setMusicRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setMusicRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get music input\n     *\n     * @method getRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n        if (obj) {\n            if (obj.coordinateResolution) {\n                this.coordinateResolution = obj.coordinateResolution;\n            }\n            if (obj.textParameter) {\n                this.textParameter = new scope.TextParameter(obj.textParameter);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getAnalyzerRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getAnalyzerRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setAnalyzerRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setAnalyzerRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get analyzer input\n     *\n     * @method getRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            if (typeof obj === 'string') {\n                var cpt = obj.split(/[:-]+/);\n                this.startUnit = Number(cpt[0]);\n                this.startComponent = Number(cpt[1]);\n                this.startPoint = Number(cpt[2]);\n                this.endUnit = Number(cpt[3]);\n                this.endComponent = Number(cpt[4]);\n                this.endPoint = Number(cpt[5]);\n            } else {\n                this.startUnit = obj.startUnit;\n                this.startComponent = obj.startComponent;\n                this.startPoint = obj.startPoint;\n                this.endUnit = obj.endUnit;\n                this.endComponent = obj.endComponent;\n                this.endPoint = obj.endPoint;\n            }\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResult.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResponseWSMessage.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    /**\n     * Get shape document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getShapeDocument\n     * @returns {ShapeDocument}\n     */\n    ShapeResult.prototype.getShapeDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResult.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResponseWSMessage.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    /**\n     * Get music document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMusicDocument\n     * @returns {MusicDocument}\n     */\n    MusicResult.prototype.getMusicDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    /**\n     * Get analyzer document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getAnalyzerDocument\n     * @returns {AnalyzerDocument}\n     */\n    AnalyzerResult.prototype.getAnalyzerDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);","'use strict';\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    NetworkInterface.parseURL = function (url) {\n\n        var parser = document.createElement('a'),\n            searchObject = {},\n            queries, split, i;\n        // Let the browser do the work\n        parser.href = url;\n        // Convert query string to object\n        queries = parser.search.replace(/^\\?/, '').split('&');\n        for( i = 0; i < queries.length; i++ ) {\n            split = queries[i].split('=');\n            searchObject[split[0]] = split[1];\n        }\n        return {\n            protocol: parser.protocol,\n            host: parser.host,\n            hostname: parser.hostname,\n            port: parser.port,\n            pathname: parser.pathname,\n            search: parser.search,\n            searchObject: searchObject,\n            hash: parser.hash\n        };\n    };\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.xhr = function (type, url, data) {\n\n        var deferred = Q.defer();\n\n        function onStateChange() {\n            if (request.readyState === 4) {\n                if (request.status >= 200 && request.status < 300) {\n                    deferred.resolve(NetworkInterface.parse(request));\n                }\n            }\n        }\n\n        function onLoad() {\n            if (request.status >= 200 && request.status < 300) {\n                deferred.resolve(NetworkInterface.parse(request));\n            } else {\n                deferred.reject(new Error(request.responseText));\n            }\n        }\n\n        function onError() {\n            deferred.reject(new Error('Can\\'t XHR ' + url));\n        }\n\n        function onProgress(event) {\n            deferred.notify(event.loaded / event.total);\n        }\n\n        var request = new XMLHttpRequest();\n        request.open(type, url, true);\n        request.withCredentials = true;\n        request.setRequestHeader('Accept', 'application/json');\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        request.onload = onLoad;\n        request.onerror = onError;\n        request.onprogress = onProgress;\n        request.onreadystatechange = onStateChange;\n        request.send(NetworkInterface.transformRequest(data));\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return scope.NetworkInterface.xhr('GET', src, undefined);\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.put = function (url, data) {\n        return scope.NetworkInterface.xhr('PUT', url, data);\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.post = function (url, data) {\n        return scope.NetworkInterface.xhr('POST', url, data);\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.delete = function (url, data) {\n        return scope.NetworkInterface.xhr('DELETE', url, data);\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n","'use strict';\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface() {\n    }\n\n    NetworkWSInterface.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.close();\n            this._url = url;\n        }\n    };\n\n    NetworkWSInterface.prototype.getUrl = function () {\n        return this._url;\n    };\n\n    NetworkWSInterface.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this.close();\n            this._callback = callback;\n        }\n    };\n\n    NetworkWSInterface.prototype.getCallback = function () {\n        return this._callback;\n    };\n\n    NetworkWSInterface.prototype.getState = function () {\n        return _getWebSocketState(this._socket);\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        return this.getState() === 3;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        return this.getState() === 2;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        return this.getState() === 1;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        return this.getState() === 0;\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        if (this.getUrl() && this.getCallback() && (this.getState() < 0)) {\n            this._socket = _openWebSocket(this.getUrl(), this.getCallback());\n        }\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this.getState() < 2) {\n            _closeWebSocket(this._socket, code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.send = function (request) {\n        var state = _getWebSocketState(this._socket);\n        if (state  === 1) {\n            _sendMessage(this._socket, request);\n        }\n    };\n\n    /**\n     *\n     * @param url\n     * @param callback\n     * @returns {WebSocket}\n     * @private\n     */\n    var _openWebSocket = function (url, callback) {\n        function onOpen(e) {\n            callback(e);\n        }\n        function onClose(e) {\n            callback(e);\n        }\n        function onError(e) {\n            callback(e);\n        }\n        function onMessage(e) {\n            callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        }\n\n        var socket = new WebSocket(url);\n        socket.onopen = onOpen;\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n        return socket;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param code\n     * @param reason\n     * @private\n     */\n    var _closeWebSocket = function (socket, code, reason) {\n        if (socket) {\n            socket.close(code, reason);\n        }\n    };\n\n    /**\n     *\n     * @param socket\n     * @returns {*}\n     * @private\n     */\n    var _getWebSocketState = function (socket) {\n        if (socket) {\n            return socket.readyState;\n        }\n        return -1;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param message\n     * @private\n     */\n    var _sendMessage = function (socket, message) {\n        if (socket) {\n            socket.send(JSON.stringify(message));\n        }\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.setUrl('https://cloud.myscript.com');\n        if (host) {\n            this.setUrl('https://' + host);\n        }\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @deprecated use getUrl instead\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @deprecated use setUrl instead\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl('https://' + host);\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getUrl\n     * @returns {String}\n     */\n    AbstractRecognizer.prototype.getUrl = function() {\n        return this.url;\n    };\n\n    /**\n     * Set the recognition service url\n     *\n     * @method setUrl\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.url = url;\n        }\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return scope.NetworkInterface.get(this.getUrl() + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do REST recognition\n     *\n     * @method doRestRecognition\n     * @param {AbstractRecognitionData} data\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.doRestRecognition = function (data, applicationKey, hmacKey, instanceId) {\n        data.setApplicationKey(applicationKey);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(_computeHmac(data.getRecognitionInput(), applicationKey, hmacKey));\n        }\n\n        if (data instanceof scope.TextRecognitionData) {\n            return _doTextRecognition(this.getUrl(), data);\n        } else if (data instanceof scope.ShapeRecognitionData) {\n            return _doShapeRecognition(this.getUrl(), data);\n        } else if (data instanceof scope.MathRecognitionData) {\n            return _doMathRecognition(this.getUrl(), data);\n        } else if (data instanceof scope.MusicRecognitionData) {\n            return _doMusicRecognition(this.getUrl(), data);\n        } else if (data instanceof scope.AnalyzerRecognitionData) {\n            return _doAnalyzerRecognition(this.getUrl(), data);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * Clear REST recognition\n     *\n     * @method clearRestRecognition\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.clearRestRecognition = function (instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n        return _clearShapeRecognition(this.getHost(), data);\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @private\n     * @method _doTextRecognition\n     * @param {String} url\n     * @param {TextRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doTextRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doShapeRecognition\n     * @param {String} url\n     * @param {ShapeRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doShapeRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition\n     *\n     * @private\n     * @method _clearShapeRecognition\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    var _clearShapeRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doMathRecognition\n     * @param {String} url\n     * @param {MathRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doMathRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @private\n     * @method _doMusicRecognition\n     * @param {String} url\n     * @param {MusicRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doMusicRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method _doAnalyzerRecognition\n     * @param {String} url\n     * @param {AnalyzerRecognitionData} data\n     * @returns {Promise}\n     */\n    var _doAnalyzerRecognition = function (url, data) {\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @deprecated\n     * @method computeHmac\n     * @param {String} applicationKey\n     * @param {String} data\n     * @param {String} hmacKey\n     */\n    AbstractRecognizer.prototype.computeHmac = function (applicationKey, data, hmacKey) {\n        return _computeHmac(data, applicationKey, hmacKey);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @constructor\n     */\n    function AbstractWSRecognizer() {\n        this._wsInterface = new scope.NetworkWSInterface();\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @deprecated use getUrl instead\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractWSRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @deprecated use setUrl instead\n     * @method setHost\n     * @param {String}\n     */\n    AbstractWSRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl('wss://' + host);\n        }\n    };\n\n    AbstractWSRecognizer.prototype.setUrl = function (url) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    AbstractWSRecognizer.prototype.setCallback = function (callback) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(_computeHmac(challenge, applicationKey, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {String} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript, CryptoJS);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, inputUnits, hmacKey, parameters) {\n        var input = new scope.TextRecognitionInput();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n\n        var data = new scope.TextRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this.setUrl('wss://cloud.myscript.com');\n        if (host) {\n            this.setUrl('wss://' + host);\n        }\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    TextWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/text');\n        }\n    };\n\n    TextWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, message.data);\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.TextResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (inputUnits, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.ShapeRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setDoBeautification(params.hasBeautification());\n        input.setRejectDetectionSensitivity(params.getRejectDetectionSensitivity());\n\n        var data = new scope.ShapeRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n        return scope.AbstractRecognizer.prototype.clearRestRecognition.call(this, instanceId); // super\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.MathRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setResultTypes(params.getResultTypes());\n        input.setColumnar(params.isColumnar());\n        input.setScratchOutDetectionSensitivity(params.getScratchOutDetectionSensitivity());\n        input.setUserResources(params.getUserResources());\n\n        var data = new scope.MathRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.MathParameter();\n        this.setUrl('wss://cloud.myscript.com');\n        if (host) {\n            this.setUrl('wss://' + host);\n        }\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    MathWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/math');\n        }\n    };\n\n    MathWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, message.data);\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.MathResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.MusicRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setStaff(params.getStaff());\n        input.setDivisions(params.getDivisions());\n        input.setResultTypes(params.getResultTypes());\n        input.setScratchOutDetectionSensitivity(params.getScratchOutDetectionSensitivity());\n        input.setUserResources(params.getUserResources());\n\n        var data = new scope.MusicRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setParameters(params);\n\n        var data = new scope.AnalyzerRecognitionData();\n        data.setRecognitionInput(input);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, data, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * Set the context (legacy code for non-regression)\n     *\n     * @private\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype._setContext = function (context) {\n        this.context = context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponents = function (components, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponent = function (component, context, parameters) {\n        if (component instanceof scope.Stroke) {\n            this.drawStroke(component, context, parameters);\n        } else if (component instanceof scope.CharacterInputComponent) {\n            this.drawCharacter(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {Rectangle} rectangle\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var params = this.getParameters();\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getRectColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawCharacter = function (character, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method drawStroke\n     * @param {Stroke} stroke\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (stroke && stroke.getLength() > 0) {\n            if (stroke instanceof scope.StrokeComponent) {\n                _renderStroke(stroke, this.getContext());\n            } else {\n                this.drawStart(stroke.getX()[0], stroke.getY()[0]);\n                for (var i = 0; i < stroke.getLength(); ++i) {\n                    this.drawContinue(stroke.getX()[i], stroke.getY()[i], context, parameters);\n                }\n                this.drawEnd(stroke.getX()[stroke.getLength() - 1], stroke.getY()[stroke.getLength() - 1], context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw stroke components\n     *\n     * @private\n     * @method drawStrokes\n     * @param {Stroke[]} strokes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes, context, parameters) {\n        for (var i = 0; i < strokes.length; i++) {\n            this.drawStroke(strokes[i], context, parameters);\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x: (point.x - Math.sin(angle) * radius),\n            y: (point.y + Math.cos(angle) * radius)\n        }, {\n            x: (point.x + Math.sin(angle) * radius),\n            y: (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x: ((point2.x + point1.x) / 2),\n            y: ((point2.y + point1.y) / 2),\n            p: ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color) {\n        if (color !== undefined) {\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3) {\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++) {\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    /**\n     * DEPRECATED METHODS\n     */\n\n    /**\n     * Record the beginning of drawing\n     *\n     * @deprecated\n     * @method drawStart\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStart = function (x, y, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        this.points = [];\n        this.drawing = true;\n        this.points.push(new scope.QuadraticPoint({x: x, y: y}));\n    };\n\n    /**\n     * Record the drawing\n     *\n     * @deprecated\n     * @method drawContinue\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawContinue = function (x, y, context, parameters) {\n        if (this.drawing) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            var params = this.getParameters();\n            var delta = 2 + (params.getWidth() / 4);\n            var last = this.points[this.points.length - 1];\n\n            if (Math.abs(last.getX() - x) >= delta || Math.abs(last.getY() - y) >= delta) {\n\n                if (this.points.length === 1) { // firstPoint\n\n                    var pA = this.points[this.points.length - 1]; // firstPoint\n                    var pB = new scope.QuadraticPoint({x: x, y: y});\n                    var pAB = new scope.QuadraticPoint({\n                        x: 0.5 * (pA.getX() + pB.getX()),\n                        y: 0.5 * (pA.getY() + pB.getY())\n                    });\n                    _computePointParameters(pA, pAB, params.getPressureType());\n                    _computePointParameters(pAB, pB, params.getPressureType());\n\n                    _computeFirstControls(pA, pAB, params.getWidth());\n                    _computeControls(pAB, pB, params.getWidth());\n\n                    this.points.push(pAB);\n                    this.points.push(pB);\n\n                    _drawFirstSegment(pA, pAB, this.getContext(), params);\n\n                } else {\n                    var pAB = this.points[this.points.length - 2]; // jshint ignore:line\n                    var pB = this.points[this.points.length - 1]; // jshint ignore:line\n                    var pC = new scope.QuadraticPoint({x: x, y: y});\n                    var pBC = new scope.QuadraticPoint({\n                        x: 0.5 * (pB.getX() + pC.getX()),\n                        y: 0.5 * (pB.getY() + pC.getY())\n                    });\n                    _computePointParameters(pB, pBC, params.getPressureType());\n                    _computePointParameters(pBC, pC, params.getPressureType());\n\n                    _computeControls(pB, pBC, params.getWidth());\n                    _computeControls(pBC, pC, params.getWidth());\n\n                    this.points.push(pBC);\n                    this.points.push(pC);\n\n                    _drawSegment(pAB, pB, pBC, this.getContext(), params);\n                }\n            }\n        }\n    };\n\n    /**\n     * Stop record of drawing\n     *\n     * @deprecated\n     * @method drawEnd\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawEnd = function (x, y, context, parameters) {\n        if (this.drawing) {\n            var params = this.getParameters();\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            if (this.points.length === 1) {\n                _drawPoint(new scope.QuadraticPoint({x: x, y: y}), this.getContext(), params);\n            } else if (this.points.length > 1) {\n                var pA = this.points[this.points.length - 1];\n                var pB = new scope.QuadraticPoint({x: x, y: y});\n                var pAB = new scope.QuadraticPoint({\n                    x: 0.5 * (pA.getX() + pB.getX()),\n                    y: 0.5 * (pA.getY() + pB.getY())\n                });\n                _computePointParameters(pA, pAB, params.getPressureType());\n                _computePointParameters(pAB, pB, params.getPressureType());\n\n                _computeControls(pA, pAB, params.getWidth());\n                _computeLastControls(pB, params.getWidth());\n\n                this.points.push(pAB);\n                this.points.push(pB);\n\n                _drawLastSegment(pAB, pB, this.getContext(), params);\n            }\n            this.drawing = false;\n        }\n    };\n\n    /**\n     * Draw point on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawPoint\n     * @param {QuadraticPoint} point\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawPoint = function (point, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.arc(point.getX(), point.getY(), 0.25 * parameters.getWidth(), 0, 2 * Math.PI);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw the first stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawFirstSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawFirstSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw middle stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {QuadraticPoint} pC\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawSegment = function (pA, pB, pC, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.quadraticCurveTo(pB.getP1().getX(), pB.getP1().getY(), pC.getP1().getX(), pC.getP1().getY());\n            context.lineTo(pC.getP2().getX(), pC.getP2().getY());\n            context.quadraticCurveTo(pB.getP2().getX(), pB.getP2().getY(), pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw the last stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawLastSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLastSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Compute distance and unit vector from the previous point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePointParameters\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     * @param {String} pressureType\n     */\n    var _computePointParameters = function (previous, point, pressureType) {\n        var dx = point.getX() - previous.getX(),\n            dy = point.getY() - previous.getY(),\n            d = Math.sqrt((dx * dx) + (dy * dy));\n\n        if (d !== 0) {\n            point.setDistance(d);\n            point.setCos(dx / d);\n            point.setSin(dy / d);\n        }\n        point.setLength(previous.getLength() + point.getDistance());\n\n        switch (pressureType) {\n            case 'SIMULATED':\n                _computePressure(point);\n                break;\n            case 'CONSTANT':\n                point.setPressure(1.0);\n                break;\n            case 'REAL':\n                // keep the current pressure\n                break;\n            default:\n                throw new Error('Unknown pressure type');\n        }\n    };\n\n    /**\n     * Compute simulated pressure of given point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePressure\n     * @param {QuadraticPoint} point\n     */\n    var _computePressure = function (point) {\n        var k, pressure;\n        if (point.getDistance() < 10) {\n            k = 0.2 + Math.pow(0.1 * point.getDistance(), 0.4);\n        } else if (point.getDistance() > point.getLength() - 10) {\n            k = 0.2 + Math.pow(0.1 * (point.getLength() - point.getDistance()), 0.4);\n        } else {\n            k = 1.0;\n        }\n\n        pressure = k * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(point.getDistance()));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        point.setPressure(pressure);\n    };\n\n    /**\n     * Compute control points of the first point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeFirstControls\n     * @param {QuadraticPoint} first First point of the list to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeFirstControls = function (first, next, penWidth) {\n        var r = 0.5 * (penWidth * first.getPressure()),\n            nx = r * next.getSin(),\n            ny = r * next.getCos();\n\n        first.getP1().setX(first.getX() - nx);\n        first.getP1().setY(first.getY() + ny);\n        first.getP2().setX(first.getX() + nx);\n        first.getP2().setY(first.getY() - ny);\n    };\n\n    /**\n     * Compute control points between two points.\n     *\n     * @private\n     * @deprecated\n     * @method _computeControls\n     * @param {QuadraticPoint} point Point to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeControls = function (point, next, penWidth) {\n        var cos = point.getCos() + next.getCos(),\n            sin = point.getSin() + next.getSin(),\n            u = Math.sqrt((cos * cos) + (sin * sin));\n\n        if (u !== 0) {\n            // compute control points\n            var r = 0.5 * penWidth * point.getPressure();\n            var nx = -r * sin / u;\n            var ny = r * cos / u;\n            point.getP1().setX(point.getX() + nx);\n            point.getP1().setY(point.getY() + ny);\n            point.getP2().setX(point.getX() - nx);\n            point.getP2().setY(point.getY() - ny);\n        }\n    };\n\n    /**\n     * Compute control points of the last point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeLastControls\n     * @param {QuadraticPoint} last Last point to be computed\n     * @param {Number} penWidth Pen width\n     */\n    var _computeLastControls = function (last, penWidth) {\n        var r = 0.5 * penWidth * last.getPressure(),\n            nx = -r * last.getSin(),\n            ny = r * last.getCos();\n\n        last.getP1().setX(last.getX() + nx);\n        last.getP1().setY(last.getY() + ny);\n        last.getP2().setX(last.getX() - nx);\n        last.getP2().setY(last.getY() - ny);\n    };\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (inputUnits, recognitionResult, context, parameters) {\n        this.drawInputUnits(inputUnits, context, parameters);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits, context, parameters) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents(), context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractTextInputComponent) {\n                _drawTextComponent(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @deprecated\n     * @method drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawTextComponent = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawTextComponent(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw text component\n     *\n     * @private\n     * @method _drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextComponent = function (component, context, parameters) {\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, context, parameters);\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (this.isTypesetting()) {\n            this.drawShapes(components, recognitionResult.getSegments(), context, parameters);\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                _drawShapePrimitive(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes, context, parameters) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            _drawShapeRecognized(candidate, this.getContext(), this.getParameters());\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            this.drawShapeNotRecognized(components, segment.getInkRanges(), context, parameters);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @deprecated\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeRecognized(shapeRecognized, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges, context, parameters) {\n        var notRecognized = _extractShapeNotRecognized(components, inkRanges);\n        this.drawComponents(notRecognized, context, parameters);\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @deprecated\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapePrimitive(primitive, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @deprecated\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeLine = function (shapeLine, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeLine(shapeLine, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @deprecated\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeEllipse(shapeEllipse, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @private\n     * @method _drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        for (var i in shapeRecognized.getPrimitives()) {\n            _drawShapePrimitive(shapeRecognized.getPrimitives()[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @private\n     * @method _drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            _drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            _drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @private\n     * @method _drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeLine = function (shapeLine, context, parameters) {\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), context, parameters);\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @private\n     * @method _drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            context, parameters);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Get strokes from shape inkRange\n     *\n     * @deprecated\n     * @method extractStroke\n     * @param {Stroke[]} strokes\n     * @param {ShapeInkRange} inkRange\n     * @result {Stroke[]} List of strokes from inkRange\n     */\n    ShapeRenderer.prototype.extractStroke = function (strokes, inkRange) {\n        return _extractShapeNotRecognized(strokes, inkRange);\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param inkRanges\n     * @returns {*}\n     */\n    var _extractShapeNotRecognized = function (components, inkRanges) {\n        var result = [];\n\n        for (var i in inkRanges) {\n            var inkRange = inkRanges[i];\n\n            var firstPointIndex = Math.floor(inkRange.getFirstPoint());\n            var lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n            for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n                var currentStroke = components[strokeIndex];\n                var currentStrokePointCount = currentStroke.getX().length;\n\n                var newStroke = new scope.Stroke(), x = [], y = [];\n\n                for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                    x.push(currentStroke.getX()[pointIndex]);\n                    y.push(currentStroke.getY()[pointIndex]);\n                }\n\n                newStroke.setX(x);\n                newStroke.setY(y);\n                result.push(newStroke);\n            }\n        }\n        return result;\n\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = _removeMathScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @deprecated\n     * @param {AbstractComponent[]} components\n     * @param {MathScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MathRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        return _removeMathScratchOut(components, scratchOutResults);\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMathScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getErasedInkRanges()[n].getComponent());\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getInkRanges()[p].getComponent());\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = _removeMusicScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @deprecated\n     * @param {AbstractComponent[]} components\n     * @param {MusicScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MusicRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        return _removeMusicScratchOut(components, scratchOutResults);\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawStaff = function (staff, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawStaff(staff, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                _drawMusicNode(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw music node\n     *\n     * @method drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawMusicNode = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawMusicNode(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @private\n     * @method _drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStaff = function (staff, context, parameters) {\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw music node\n     *\n     * @private\n     * @method _drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawMusicNode = function (component, context, parameters) {\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, context, parameters);\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, context, parameters);\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, context, parameters);\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, context, parameters);\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, context, parameters);\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, context, parameters);\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, context, parameters);\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, context, parameters);\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, context, parameters);\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, context, parameters);\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, context, parameters);\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, context, parameters);\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, context, parameters);\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMusicScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (this.isTypesetting()) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes(), context, parameters);\n            _drawTables(components, recognitionResult.getTables(), this.getContext(), this.getParameters());\n            _drawTextLines(components, recognitionResult.getTextLines(), this.getContext(), this.getParameters());\n            //_drawGroups(components, recognitionResult.getGroups(), this.getContext(), this.getParameters()); // TODO: not implemented\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @deprecated\n     * @method drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTables = function (components, tables, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in tables) {\n            if (this.getShowBoundingBoxes()) {\n                for (var j in tables[i].getCells()) {\n                    _drawCell(tables[i].getCells()[j], this.getContext(), this.getParameters());\n                }\n            }\n        }\n        _drawTables(components, tables, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @deprecated\n     * @method drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTextLines = function (components, textLines, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data && this.getShowBoundingBoxes()) {\n                this.drawRectangle(data.getBoundingBox(), context, parameters);\n            }\n        }\n        _drawTextLines(components, textLines, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @deprecated\n     * @method drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawText(boundingBox, text, justificationType, textHeight, baseline, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw Underline\n     *\n     * @deprecated\n     * @method drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawUnderline(boundingBox, underline, text, textHeight, baseline, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @deprecated\n     * @method drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        _drawGroups(components, groups, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @deprecated\n     * @method drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n            _drawCell(cell, this.getContext(), this.getParameters());\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @private\n     * @method _drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTables = function (components, tables, context, parameters) {\n        for (var i in tables) {\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @private\n     * @method _drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                _drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    _drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @private\n     * @method _drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n            context.textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            context.fillText(text, boundingBox.getX(), baseline);\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @private\n     * @method _drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n\n    /**\n     * Draw Underline\n     *\n     * @private\n     * @method _drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), context, parameters);\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @private\n     * @method _drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            var rectangle = cell.getData().getBoundingBox();\n            context.save();\n            try {\n                context.fillStyle = parameters.getRectColor();\n                context.strokeStyle = parameters.getColor();\n                context.lineWidth = 0.5 * parameters.getWidth();\n                context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n            } finally {\n                context.restore();\n            }\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n        this.canvasRatio = 1;\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            ssl: true,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        // Capture\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n        this.canvasRatio = _getCanvasRatio(this._renderingCanvas);\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer();\n        this._mathRecognizer = new scope.MathRecognizer();\n        this._shapeRecognizer = new scope.ShapeRecognizer();\n        this._musicRecognizer = new scope.MusicRecognizer();\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer();\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this));\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this));\n\n        this._attachListeners(element);\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        this._initialize(this._getOptions());\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        this._captureCanvas.width = width * this.canvasRatio;\n        this._captureCanvas.style.width = width + 'px';\n        this._renderingCanvas.width = width * this.canvasRatio;\n        this._renderingCanvas.style.width = width + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        this._captureCanvas.height = height * this.canvasRatio;\n        this._captureCanvas.style.height = height + 'px';\n        this._renderingCanvas.height = height * this.canvasRatio;\n        this._renderingCanvas.style.height = height + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @deprecated Use setTextParameters instead\n     * @method setLanguage\n     * @param  String language\n     */\n    InkPaper.prototype.setLanguage = function (language) {\n        if (this.options.type === scope.RecognitionType.TEXT) {\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setLanguage(language);\n        }\n    };\n\n    /**\n     * Set math recognition format result types\n     *\n     * @deprecated Use setMathParameters instead\n     * @method setResultTypes\n     * @param  Array resultTypes\n     */\n    InkPaper.prototype.setResultTypes = function (resultTypes) {\n        if (this.options.type === scope.RecognitionType.MATH) {\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setResultTypes(resultTypes.map(function (x) {\n                return x.toUpperCase();\n            }));\n        }\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._selectedRenderer.getParameters()[i] = penParameters[i]; // Override options\n                }\n            }\n            var params = this._selectedRenderer.getParameters();\n            this._inkGrabber.setParameters(params); // Override options\n            this._textRenderer.setParameters(params); // Override options\n            this._mathRenderer.setParameters(params); // Override options\n            this._shapeRenderer.setParameters(params); // Override options\n            this._musicRenderer.setParameters(params); // Override options\n            this._analyzerRenderer.setParameters(params); // Override options\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * @private\n     * @method _initialize\n     * @param {Object} options\n     */\n    InkPaper.prototype._initialize = function (options) {\n\n        this.setHost(options.host);\n\n        this.setTextParameters(options.textParameters); // jshint ignore:line\n        this.setMathParameters(options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(options.analyzerParameters); // jshint ignore:line\n\n        // Recognition type\n        this.setType(options.type);\n        this.setProtocol(options.protocol);\n        this.setTimeout(options.timeout);\n        this.setApplicationKey(options.applicationKey);\n        this.setHmacKey(options.hmacKey);\n\n        this.setPenParameters(options.penParameters);\n        this.setTypeset(options.typeset);\n\n        this.setWidth(options.width);\n        this.setHeight(options.height);\n    };\n\n    /**\n     * Get options\n     *\n     * @private\n     * @method _getOptions\n     * @returns {Object}\n     */\n    InkPaper.prototype._getOptions = function () {\n        return this.options;\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @param {String} [inputMode] input mode\n     */\n    InkPaper.prototype.getAvailableLanguages = function (inputMode) {\n        this._selectedRESTRecognizer.getAvailableLanguageList(\n            this.getApplicationKey(),\n            inputMode ? inputMode : this._textRecognizer.getParameters().getInputMode()\n        ).then(\n            function (data) {\n                return this._onResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n                return error;\n            }.bind(this)\n        ).done();\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the recognition callback\n     *\n     * @method setCallback\n     * @deprecated Use setResultCallback instead\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     */\n    InkPaper.prototype.setCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        return this._doRecognition(this.components);\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this.components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            this.redoComponents.push(this.components.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange({\n                canUndo: this.canUndo(),\n                undoLength: this.components.length,\n                canRedo: this.canRedo(),\n                redoLength: this.redoComponents.length\n            });\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this.redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this.components.push(this.redoComponents.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange({\n                canUndo: this.canUndo(),\n                undoLength: this.components.length,\n                canRedo: this.canRedo(),\n                redoLength: this.redoComponents.length\n            });\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            if (this._instanceId) {\n                this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                this._instanceId = undefined;\n            }\n        }\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this._inkGrabber.clear();\n        this._instanceId = undefined;\n\n        this._initRenderingCanvas();\n        this._onChange({\n            canUndo: this.canUndo(),\n            undoLength: this.components.length,\n            canRedo: this.canRedo(),\n            redoLength: this.redoComponents.length\n        });\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n\n        if (this._captureCanvas.clientHeight != this._captureCanvas.height) {\n            this._captureCanvas.height = this._captureCanvas.clientHeight;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight;\n        }\n        if (this._captureCanvas.clientWidth != this._captureCanvas.width) {\n            this._captureCanvas.width = this._captureCanvas.clientWidth;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth;\n        }\n\n        if (this.canRedo()) {\n            this.redoComponents = [];\n            this._onChange({\n                canUndo: this.canUndo(),\n                undoLength: this.components.length,\n                canRedo: this.canRedo(),\n                redoLength: this.redoComponents.length\n            });\n        }\n        this._inkGrabber.startCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this.components.push(stroke);\n        this._onChange({\n            canUndo: this.canUndo(),\n            undoLength: this.components.length,\n            canRedo: this.canRedo(),\n            redoLength: this.redoComponents.length\n        });\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            }\n        }\n    };\n\n    /**\n     * Do recognition\n     *\n     * @private\n     * @method _doRecognition\n     * @param {AbstractComponent[]} components Input components\n     */\n    InkPaper.prototype._doRecognition = function (components) {\n        if (components.length > 0) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                if (this._initialized) {\n                    var inputWS = [];\n                    if (this._selectedRecognizer instanceof scope.TextWSRecognizer) {\n                        var inputUnitWS = new scope.TextInputUnit();\n                        inputUnitWS.setComponents(this._getOptions().components.concat(components.slice(this.lastNonRecoComponentIdx)));\n                        inputWS = [inputUnitWS];\n                    } else {\n                        inputWS = components.slice(this.lastNonRecoComponentIdx);\n                    }\n                    this.lastNonRecoComponentIdx = components.length;\n\n\n                    if (this.isStarted) {\n                        this._selectedRecognizer.continueWSRecognition(inputWS, this._instanceId);\n                    } else {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(inputWS);\n                    }\n                }\n            } else {\n                var input = [];\n                if (this._selectedRecognizer instanceof scope.TextRecognizer) {\n                    var inputUnit = new scope.TextInputUnit();\n                    inputUnit.setComponents(this._getOptions().components.concat(components));\n                    input = [inputUnit];\n                } else if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                    input = components.slice(this.lastNonRecoComponentIdx);\n                    this.lastNonRecoComponentIdx = components.length;\n                } else {\n                    input = input.concat(this._getOptions().components, components);\n                }\n                this._selectedRecognizer.doSimpleRecognition(\n                    this.getApplicationKey(),\n                    this._instanceId,\n                    input,\n                    this.getHmacKey()\n                ).then(\n                    function (data) {\n                        return this._parseResult(data, input);\n                    }.bind(this),\n                    function (error) {\n                        this._onResult(undefined, error);\n                        return error;\n                    }.bind(this)\n                ).done();\n            }\n        } else {\n            this.isStarted = false;\n            this._selectedRenderer.clear();\n            this._initRenderingCanvas();\n            this._onResult();\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('failure', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function (changes) {\n        if (this.changeCallback) {\n            this.changeCallback(changes)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: changes}));\n    };\n\n    InkPaper.prototype._parseResult = function (data, input) {\n\n        if (!this._instanceId) {\n            this._instanceId = data.getInstanceId();\n        } else if (this._instanceId !== data.getInstanceId()) {\n            this._onResult(data);\n            return data;\n        }\n\n        if (data.getDocument().hasScratchOutResults() || this._selectedRenderer.isTypesetting()) {\n            this._selectedRenderer.clear();\n            this._selectedRenderer.drawRecognitionResult(input, data.getDocument());\n        }\n\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service url\n     *\n     * @param {String} host\n     */\n    InkPaper.prototype.setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._textWSRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._mathWSRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n                console.log('pointerenter');\n                console.log(e);\n            }\n        }, false);\n\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n        this._drawInput(this.components);\n    };\n\n    InkPaper.prototype._drawInput = function (components) {\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            } else {\n                throw new Error('Missing music staff');\n            }\n        }\n        this._selectedRenderer.drawComponents(this._getOptions().components.concat(components));\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this.lastNonRecoComponentIdx = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge(this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    break;\n                default:\n                {\n                    this._parseResult(message, this.components);\n                    break;\n                }\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n    /**\n     * Tool to get canvas ratio (retina display)\n     *\n     * @private\n     * @param {Element} canvas\n     * @returns {Number}\n     */\n    function _getCanvasRatio(canvas) {\n        if (canvas) {\n            var context = canvas.getContext('2d'),\n                devicePixelRatio = window.devicePixelRatio || 1,\n                backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        }\n        return 1;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n"],"sourceRoot":"/source/"}