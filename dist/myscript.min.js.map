{"version":3,"sources":["myscript.js","MyScript.js","point.js","quadraticPoint.js","rectangle.js","inkManager.js","penParameters.js","renderingParameters.js","mathUtils.js","abstractWSMessage.js","abstractComponent.js","stroke.js","strokeComponent.js","characterInputComponent.js","characterInputComponentAlternate.js","abstractParameter.js","abstractRecognitionInput.js","abstractRecognitionData.js","recognitionLanguagesData.js","abstractStartRequestWSMessage.js","abstractContinueRequestWSMessage.js","challengeRequestWSMessage.js","initRequestWSMessage.js","resetRequestWSMessage.js","abstractTextInputComponent.js","charInputComponent.js","stringInputComponent.js","textInputUnit.js","textParameter.js","textProperties.js","textRecognitionInput.js","textRecognitionData.js","textStartRequestWSMessage.js","textContinueRequestWSMessage.js","shapeParameter.js","shapeRecognitionInput.js","shapeRecognitionData.js","mathParameter.js","mathRecognitionInput.js","mathRecognitionData.js","mathStartRequestWSMessage.js","mathContinueRequestWSMessage.js","abstractMusicInputComponent.js","musicAccidentalInputComponent.js","musicArpeggiateInputComponent.js","musicBarInputComponent.js","musicBeamInputComponent.js","musicClefInputComponent.js","musicDecorationInputComponent.js","musicDotsInputComponent.js","musicHeadInputComponent.js","musicLedgerLineInputComponent.js","musicRestInputComponent.js","musicStemInputComponent.js","musicTieOrSlurInputComponent.js","musicTimeSignatureInputComponent.js","musicStaff.js","musicParameter.js","musicRecognitionInput.js","musicRecognitionData.js","analyzerParameter.js","analyzerRecognitionInput.js","analyzerRecognitionData.js","abstractResult.js","abstractRecoResponseWSMessage.js","challengeResponseWSMessage.js","errorResponseWSMessage.js","initResponseWSMessage.js","resetResponseWSMessage.js","textInkRange.js","textCandidate.js","textDocument.js","textResult.js","textSegment.js","textTagItem.js","textResponseWSMessage.js","abstractShapePrimitive.js","shapeCandidate.js","shapeDocument.js","shapeEllipse.js","shapeErased.js","shapeInkRange.js","shapeLine.js","shapeNotRecognized.js","shapeRecognized.js","shapeResult.js","shapeScratchOut.js","shapeSegment.js","mathNode.js","mathNonTerminalNode.js","mathResultElement.js","mathRuleNode.js","mathDocument.js","mathInkRange.js","mathLaTexResultElement.js","mathMathMLResultElement.js","mathResult.js","mathScratchOut.js","mathSymbolTreeResultElement.js","mathTerminalNode.js","mathTerminalNodeCandidate.js","mathBorderData.js","mathBorderNonTerminalNode.js","mathCellData.js","mathCellNonTerminalNode.js","mathTableData.js","mathTableRuleNode.js","mathResponseWSMessage.js","musicElement.js","musicResultElement.js","musicAccidental.js","musicAnnotation.js","musicArpeggiate.js","musicBar.js","musicBeam.js","musicChord.js","musicClef.js","musicDecoration.js","musicDocument.js","musicDots.js","musicHead.js","musicInputRange.js","musicKeySignature.js","musicKeySignatureData.js","musicLedgerLine.js","musicNote.js","musicPart.js","musicPitchData.js","musicRest.js","musicResult.js","musicScore.js","musicScoreTreeResultElement.js","musicScratchOut.js","musicSlur.js","musicStem.js","musicTie.js","musicTimeModificationData.js","musicTimeSignature.js","musicTupletBracket.js","musicTuplet.js","musicXMLResultElement.js","analyzerElement.js","analyzerCell.js","analyzerCellData.js","analyzerDocument.js","analyzerElementReference.js","analyzerGroup.js","analyzerInkRange.js","analyzerLine.js","analyzerLineData.js","analyzerRecognizedStroke.js","analyzerResult.js","analyzerStrokeType.js","analyzerTable.js","analyzerTableData.js","analyzerTextLine.js","analyzerTextLineData.js","analyzerUnderline.js","analyzerUnderlineData.js","networkInterface.js","networkWSInterface.js","abstractRecognizer.js","abstractWSRecognizer.js","textRecognizer.js","textWSRecognizer.js","shapeRecognizer.js","mathRecognizer.js","mathWSRecognizer.js","musicRecognizer.js","analyzerRecognizer.js","abstractRenderer.js","textRenderer.js","shapeRenderer.js","mathRenderer.js","musicRenderer.js","analyzerRenderer.js","inkGrabber.js","inkPaper.js"],"names":["CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","window","Event","Function","bind","oThis","this","TypeError","aArgs","Array","slice","call","arguments","fToBind","fNOP","fBound","apply","concat","MyScript","RecognitionType","TEXT","MATH","SHAPE","MUSIC","ANALYZER","InputMode","CURSIVE","ISOLATED","SUPERIMPOSED","VERTICAL","InputType","CHAR","WORD","SINGLE_LINE_TEXT","MULTI_LINE_TEXT","ResultDetail","CHARACTER","ResultType","Math","LATEX","MATHML","SYMBOLTREE","Music","MUSICXML","SCORETREE","Protocol","WS","REST","scope","Point","obj","x","y","getX","setX","getY","setY","QuadraticPoint","pressure","distance","length","cos","sin","p1","p2","constructor","getPressure","setPressure","getDistance","setDistance","getLength","setLength","getCos","setCos","getSin","setSin","getP1","setP1","getP2","setP2","Rectangle","width","height","getTopLeftPoint","point","setTopLeftPoint","topLeftPoint","getWidth","setWidth","getHeight","setHeight","InkManager","writing","strokes","currentStroke","undoRedoStack","isWriting","getCurrentStroke","startInkCapture","t","Error","isRedoEmpty","clearUndoRedoStack","Stroke","addX","addY","addT","continueInkCapture","endInkCapture","push","clear","isEmpty","undo","pop","redo","getStrokes","getUndoRedoStack","copy","index","PenParameters","color","rectColor","font","decoration","pressureType","alpha","getColor","setColor","getRectColor","setRectColor","getFont","setFont","getDecoration","setDecoration","getPressureType","setPressureType","getAlpha","setAlpha","RenderingParameters","MathUtils","getEllipseArcRect","center","maxRadius","minRadius","orientation","startAngle","sweepAngle","angle","z1","z2","z3","z4","cosAlpha","sinAlpha","n","xList","yList","i","xMin","xMax","yMin","yMax","angleStep","sortFloat","a","b","abs","atan2","sort","getLineRect","firstPoint","lastPoint","xFirst","xLast","min","max","yFirst","yLast","getBoundingRect","boundingBoxes","rectangle","AbstractWSMessage","type","getType","AbstractComponent","setType","getBoundingBox","setBoundingBox","boundingBox","getT","setT","toFixed","precision","StrokeComponent","p","d","l","toJSON","getP","setP","addP","getD","setD","addD","getL","setL","addL","addPoint","filterPointByAcquisitionDelta","computeP","computeD","computeL","getLastIndexPoint","getPointByIndex","sqrt","pow","isNaN","ratio","parseFloat","delta","ret","CharacterInputComponent","alternates","CharacterInputComponentAlternate","getAlternates","setAlternates","addAlternate","alternate","probability","getAlternate","setAlternate","getProbability","setProbability","AbstractParameter","AbstractRecognitionInput","AbstractRecognitionData","getApplicationKey","applicationKey","setApplicationKey","getInstanceId","instanceId","setInstanceId","getHmac","hmac","setHmac","getRecognitionInput","setRecognitionInput","input","RecognitionLanguagesData","getInputMode","inputMode","setInputMode","AbstractStartRequestWSMessage","AbstractContinueRequestWSMessage","ChallengeRequestWSMessage","getChallenge","challenge","setChallenge","getHmacSignature","setHmacSignature","InitRequestWSMessage","ResetRequestWSMessage","AbstractTextInputComponent","CharInputComponent","character","getCharacter","setCharacter","getLabel","setLabel","label","StringInputComponent","string","getString","setString","TextInputUnit","textInputType","components","getInputType","setInputType","inputType","getComponents","inkRange","TextInkRange","getStartComponent","getEndComponent","setComponents","TextParameter","textProperties","TextProperties","language","textInputMode","contentTypes","subsetKnowledges","userResources","userLkWords","resultDetail","getLanguage","setLanguage","getContentTypes","setContentTypes","getSubsetKnowledges","setSubsetKnowledges","getUserResources","setUserResources","getUserLkWords","setUserLkWords","getResultDetail","setResultDetail","getTextProperties","setTextProperties","textCandidateListSize","wordCandidateListSize","wordPredictionListSize","wordCompletionListSize","characterCandidateListSize","discardCaseVariations","discardAccentuationVariations","disableSpatialOrdering","glyphDistortion","enableOutOfLexicon","spellingDistortion","getTextCandidateListSize","setTextCandidateListSize","getWordCandidateListSize","setWordCandidateListSize","getWordPredictionListSize","setWordPredictionListSize","getWordCompletionListSize","setWordCompletionListSize","getCharacterCandidateListSize","setCharacterCandidateListSize","getDiscardCaseVariations","setDiscardCaseVariations","getDiscardAccentuationVariations","setDiscardAccentuationVariations","getDisableSpatialOrdering","setDisableSpatialOrdering","getGlyphDistortion","setGlyphDistortion","getEnableOutOfLexicon","setEnableOutOfLexicon","getSpellingDistortion","setSpellingDistortion","TextRecognitionInput","getParameters","textParameter","setParameters","parameters","getInputUnits","inputUnits","getStartUnit","getEndUnit","setInputUnits","TextRecognitionData","getTextRecognitionInput","textInput","setTextRecognitionInput","JSON","stringify","TextStartRequestWSMessage","TextContinueRequestWSMessage","ShapeParameter","rejectDetectionSensitivity","doBeautification","getRejectDetectionSensitivity","setRejectDetectionSensitivity","hasBeautification","setBeautification","ShapeRecognitionInput","getDoBeautification","setDoBeautification","ShapeRecognitionData","getShapeRecognitionInput","shapeInput","setShapeRecognitionInput","MathParameter","resultTypes","columnarOperation","scratchOutDetectionSensitivity","getResultTypes","setResultTypes","isColumnar","setColumnar","columnar","getScratchOutDetectionSensitivity","setScratchOutDetectionSensitivity","MathRecognitionInput","MathRecognitionData","getMathRecognitionInput","mathInput","setMathRecognitionInput","MathStartRequestWSMessage","MathContinueRequestWSMessage","AbstractMusicInputComponent","MusicAccidentalInputComponent","value","getValue","setValue","MusicArpeggiateInputComponent","MusicBarInputComponent","MusicBar","MusicBeamInputComponent","MusicBeam","MusicClefInputComponent","MusicClef","MusicDecorationInputComponent","MusicDecoration","MusicDotsInputComponent","MusicHeadInputComponent","MusicLedgerLineInputComponent","MusicRestInputComponent","MusicStemInputComponent","MusicTieOrSlurInputComponent","MusicTimeSignatureInputComponent","MusicStaff","count","gap","top","getCount","setCount","getTop","setTop","getGap","setGap","MusicParameter","divisions","staff","getStaff","setStaff","getDivisions","setDivisions","MusicRecognitionInput","MusicRecognitionData","getMusicRecognitionInput","musicInput","setMusicRecognitionInput","AnalyzerParameter","coordinateResolution","getTextParameters","setTextParameters","getCoordinateResolution","setCoordinateResolution","AnalyzerRecognitionInput","parameter","AnalyzerRecognitionData","getAnalyzerRecognitionInput","analyzerInput","setAnalyzerRecognitionInput","AbstractResult","getDocument","result","AbstractRecoResponseWSMessage","ChallengeResponseWSMessage","ErrorResponseWSMessage","error","getError","InitResponseWSMessage","ResetResponseWSMessage","cpt","split","startUnit","Number","startComponent","startPoint","endUnit","endComponent","endPoint","getStartPoint","getEndPoint","TextCandidate","flags","children","normalizedScore","spellingDistortionRatio","j","TextSegment","getNormalizedScore","getResemblanceScore","resemblanceScore","getSpellingDistortionRatio","getFlags","getChildren","TextDocument","tagItems","wordCandidates","charCandidates","textSegmentResult","TextTagItem","k","getTagItems","getWordSegments","getWordSegment","inkRanges","getInkRanges","getCharSegments","getCharSegment","getTextSegment","hasScratchOutResults","TextResult","getTextDocument","candidates","selectedCandidateIdx","ranges","isArray","getCandidates","getSelectedCandidateIdx","getSelectedCandidate","tagType","getTagType","TextResponseWSMessage","AbstractShapePrimitive","beginDecoration","beginTangentAngle","endDecoration","endTangentAngle","isLine","isEllipse","hasBeginDecoration","hasEndDecoration","getBeginDecoration","getEndDecoration","getBeginTangentAngle","getEndTangentAngle","ShapeCandidate","isErased","isScratchOut","isNotRecognized","isRecognized","ShapeDocument","segments","ShapeSegment","getSegments","currentSeg","currentCandidate","ShapeScratchOut","ShapeEllipse","getCenter","getMinRadius","getMaxRadius","getOrientation","getStartAngle","getSweepAngle","ShapeErased","ShapeInkRange","firstStroke","lastStroke","getFirstStroke","getLastStroke","getFirstPoint","getLastPoint","ShapeLine","ShapeNotRecognized","ShapeRecognized","primitives","normalizedRecognitionScore","getPrimitives","getNormalizedRecognitionScore","ShapeResult","getShapeDocument","elementType","uniqueID","selectedCandidateIndex","getElementType","getUniqueId","MathNode","name","getName","MathNonTerminalNode","selectedCandidate","MathTerminalNode","MathRuleNode","MathCellNonTerminalNode","MathBorderNonTerminalNode","MathTableRuleNode","MathResultElement","isLaTex","isMathMl","isSymbolTree","childInkRanges","MathDocument","results","scratchOutResults","MathMathMLResultElement","MathLaTexResultElement","MathSymbolTreeResultElement","MathScratchOut","getResultElements","getScratchOutResults","MathInkRange","component","firstItem","lastItem","getComponent","getFirstItem","getLastItem","MathResult","getMathDocument","erasedInkRanges","getErasedInkRanges","root","getRoot","MathTerminalNodeCandidate","MathBorderData","position","start","stop","getPosition","getStart","getStop","data","getData","MathCellData","columnStart","columnStop","rowStart","rowStop","getColumnStart","getColumnStop","getRowStart","getRowStop","MathTableData","columnCount","rowCount","getColumnCount","getRowCount","MathResponseWSMessage","MusicElement","inputRanges","getInputRanges","MusicResultElement","isMusicXML","isScoreTree","MusicAccidental","MusicAnnotation","MusicArpeggiate","decorations","repeatDirection","style","getRepeatDirection","setRepeatDirection","getStyle","setStyle","getDecorations","setDecorations","slope","placement","leftCount","rightCount","getSlope","setSlope","getPlacement","setPlacement","getLeftCount","setLeftCount","getRightCount","setRightCount","MusicChord","notes","beamTypes","ledgerLines","startSlurs","stopSlurs","duration","arpeggiate","startBeam","stopBeam","stem","MusicStem","MusicNote","MusicLedgerLine","m","MusicSlur","getDuration","getArpeggiate","getStartBeam","getStopBeam","getStem","getNotes","getBeamTypes","getLedgerLines","getStartSlurs","getStopSlurs","symbol","octave","line","yAnchor","getYAnchor","setYAnchor","getLine","setLine","getOctave","setOctave","getSymbol","setSymbol","MusicDocument","MusicXMLResultElement","MusicScoreTreeResultElement","MusicScratchOut","MusicDots","MusicHead","MusicInputRange","MusicKeySignature","accidentals","signature","MusicKeySignatureData","getSignature","getAccidentals","fifths","cancel","getFifths","getCancel","accidental","dots","head","pitch","MusicPitchData","startTie","MusicTie","stopTie","startTuplet","MusicTuplet","stopTuplet","timeModification","MusicTimeModificationData","getAccidental","getDots","getHead","getPitch","getStartTie","getStopTie","getStartTuplet","getStopTuplet","getTimeModification","MusicPart","elements","MusicRest","MusicTimeSignature","MusicTupletBracket","getElements","alteration","step","getAlteration","getStep","MusicResult","getMusicDocument","MusicScore","parts","getParts","score","getScore","erasedInputRanges","getErasedInputRanges","actual","normal","getActual","getNormal","bottom","getBottom","brackets","number","getNumber","getBrackets","AnalyzerElement","AnalyzerCell","AnalyzerCellData","firstColumn","lastColumn","firstRow","lastRow","topBorder","bottomBorder","leftBorder","rightBorder","getFirstColumn","getLastColumn","getFirstRow","getLastRow","hasTopBorder","hasBottomBorder","hasLeftBorder","hasRightBorder","AnalyzerDocument","textLines","shapes","tables","groups","AnalyzerTextLine","AnalyzerTable","AnalyzerGroup","getTextLines","getShapes","getTables","getGroups","AnalyzerElementReference","elementReferences","getElementReferences","AnalyzerInkRange","stroke","AnalyzerRecognizedStroke","getStroke","AnalyzerLine","AnalyzerLineData","AnalyzerResult","getAnalyzerDocument","AnalyzerStrokeType","getInkRange","lines","cells","AnalyzerTableData","getLines","getCells","underlineList","AnalyzerTextLineData","AnalyzerUnderline","getUnderlineList","baselinePos","toMidline","textHeight","justificationType","getBaselinePos","getToMidline","getTextHeight","getJustificationType","AnalyzerUnderlineData","firstCharacter","lastCharacter","getFirstCharacter","getLastCharacter","Q","NetworkInterface","parseURL","url","queries","parser","createElement","searchObject","href","search","replace","protocol","host","hostname","port","pathname","hash","parse","req","responseText","e","transformRequest","str","encodeURIComponent","join","xhr","Promise","resolve","reject","notify","onStateChange","request","readyState","status","onLoad","onError","onProgress","loaded","total","XMLHttpRequest","open","withCredentials","setRequestHeader","onerror","onprogress","onload","onreadystatechange","send","get","src","put","post","NetworkWSInterface","setUrl","close","_url","getUrl","setCallback","callback","_callback","getCallback","getState","_getWebSocketState","_socket","isClosed","isClosing","isOpen","isConnecting","_openWebSocket","code","reason","_closeWebSocket","state","_sendMessage","onOpen","onClose","onMessage","socket","WebSocket","onopen","onclose","onmessage","message","CryptoJS","AbstractRecognizer","getHost","setHost","getPrecision","setPrecision","getAvailableLanguageList","then","response","doRestRecognition","hmacKey","_filterStrokes","_doTextRecognition","_doShapeRecognition","_doMathRecognition","_doMusicRecognition","_doAnalyzerRecognition","clearRestRecognition","instanceSessionId","_clearShapeRecognition","_fillData","computeHmac","_computeHmac","jsonInput","HmacSHA512","toString","enc","Hex","forEach","currentValue","AbstractWSRecognizer","_wsInterface","sendMessage","initWSRecognition","takeUpHmacChallenge","resetWSRecognition","TextRecognizer","doSimpleRecognition","TextWSRecognizer","startWSRecognition","continueWSRecognition","ShapeRecognizer","clearShapeRecognitionSession","MathRecognizer","MathWSRecognizer","MusicRecognizer","AnalyzerRecognizer","AbstractRenderer","context","penParameters","showBoundingBoxes","typeset","points","drawing","_computeLinksPoints","radius","_computeMiddlePoint","point1","point2","_computeAxeAngle","begin","end","_fill","fillStyle","fill","_renderStroke","beginPath","arc","PI","_renderLine","nbquadratics","_renderQuadratic","_renderFinal","closePath","ARCSPLIT","linkPoints","moveTo","newAngle","lineTo","linkPoints1","linkPoints2","ctrl","linkPoints3","quadraticCurveTo","getContext","_setContext","getShowBoundingBoxes","setShowBoundingBoxes","isTypesetting","setTypeset","clearRect","canvas","drawRecognitionResult","recognitionResult","drawComponents","drawComponent","drawStroke","drawCharacter","drawRectangle","save","strokeStyle","lineWidth","fillRect","restore","drawStart","drawContinue","drawEnd","drawStrokes","last","pA","pB","pAB","_computePointParameters","_computeFirstControls","_computeControls","_drawFirstSegment","pC","pBC","_drawSegment","_drawPoint","_computeLastControls","_drawLastSegment","globalAlpha","previous","dx","dy","_computePressure","first","next","penWidth","r","nx","ny","u","TextRenderer","drawInputUnits","_drawTextComponent","drawTextComponent","_drawChar","_drawString","char","ShapeRenderer","drawShapes","_drawShapePrimitive","drawShapeSegment","segment","candidate","_drawShapeRecognized","drawShapeNotRecognized","drawShapeRecognized","shapeRecognized","notRecognized","_extractShapeNotRecognized","drawShapePrimitive","primitive","drawShapeLine","shapeLine","_drawShapeLine","drawShapeEllipse","shapeEllipse","_drawShapeEllipse","_drawLine","_drawArrowHead","_drawEllipseArc","extractStroke","centerPoint","floor","boundariesPoints","_phi","headPoint","beta","firstPointIndex","lastPointIndex","ceil","strokeIndex","currentStrokePointCount","newStroke","pointIndex","MathRenderer","notScratchOutComponents","_removeMathScratchOut","removeScratchOut","cloneComponents","componentsToRemove","z","splice","MusicRenderer","_removeMusicScratchOut","drawStaff","_drawStaff","_drawMusicNode","drawMusicNode","staffHeight","staves","offset","clientWidth","_drawAccidental","_drawArpeggiate","_drawBar","_drawBeam","_drawClef","_drawDecoration","_drawDots","_drawHead","_drawLedgerLine","_drawRest","_drawStem","_drawTieOrSlur","_drawTimeSignature","bar","beam","clef","imageObj","Image","drawImage","ledgerLine","rest","tieOrSlur","timeSignature","AnalyzerRenderer","shapeRenderer","getShapeRenderer","setShapeRenderer","_drawTables","_drawTextLines","drawTables","_drawCell","drawTextLines","textLine","drawText","text","baseline","_drawText","drawUnderline","underline","_drawUnderline","drawGroups","_drawGroups","drawCell","cell","underlines","textAlign","fillText","topLeft","textMetrics","measureText","substring","x1","x2","InkGrabber","startCapture","continueCapture","endCapture","InkPaper","element","options","_element","_instanceId","_timerId","_initialized","redoComponents","lastNonRecoComponentIdx","resultCallback","changeCallback","canvasRatio","_captureCanvas","_createCanvas","_inkGrabber","_renderingCanvas","_getCanvasRatio","_textRenderer","_mathRenderer","_shapeRenderer","_musicRenderer","_analyzerRenderer","_textRecognizer","_mathRecognizer","_shapeRecognizer","_musicRecognizer","_analyzerRecognizer","_textWSRecognizer","_handleMessage","_mathWSRecognizer","_attachListeners","ssl","timeout","textParameters","mathParameters","shapeParameters","musicParameters","analyzerParameters","idx","setMathParameters","setShapeParameters","setMusicParameters","setAnalyzerParameters","setProtocol","setTimeout","setHmacKey","setPenParameters","parent","id","querySelectorAll","appendChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","_getCoordinates","container","changedTouches","rect","getBoundingClientRect","clientX","left","clientLeft","clientY","clientTop","timeStamp","scale","_initRenderingCanvas","_selectedRecognizer","_selectedRESTRecognizer","_selectedWSRecognizer","getProtocol","_selectedRenderer","getTimeout","getHmacKey","isStarted","map","toUpperCase","getMathParameters","getShapeParameters","getMusicParameters","getAnalyzerParameters","getPenParameters","getAvailableLanguages","_onResult","getRenderer","getInkGrabber","getRecognizer","setChangeCallback","setResultCallback","recognize","_doRecognition","canUndo","_onChange","clearTimeout","canRedo","addDomListener","useCapture","myfunction","addEventListener","_down","clientHeight","_move","_up","inputWS","inputUnitWS","inputUnit","_parseResult","err","dispatchEvent","undoLength","redoLength","pointerId","self","preventDefault","coord","console","log","_drawInput","replayNeeded"],"mappings":"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","file":"myscript.min.js","sourcesContent":["/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n\n\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Complex Point object used for quadratic calculation\n     *\n     * @deprecated\n     * @class QuadraticPoint\n     * @extends Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function QuadraticPoint(obj) {\n        scope.Point.call(this, obj);\n        this.pressure = 0.5;\n        this.distance = 0.0;\n        this.length = 0.0;\n        this.cos = 0.0;\n        this.sin = 0.0;\n        this.p1 = new scope.Point(obj);\n        this.p2 = new scope.Point(obj);\n        if (obj) {\n            this.pressure = obj.pressure;\n            this.distance = obj.distance;\n            this.length = obj.length;\n            this.cos = obj.cos;\n            this.sin = obj.sin;\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    QuadraticPoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    QuadraticPoint.prototype.constructor = QuadraticPoint;\n\n    /**\n     * Get pressure\n     *\n     * @method getPressure\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getPressure = function () {\n        return this.pressure;\n    };\n\n    /**\n     * Set pressure\n     *\n     * @method setPressure\n     * @param {Number} pressure\n     */\n    QuadraticPoint.prototype.setPressure = function (pressure) {\n        this.pressure = pressure;\n    };\n\n    /**\n     * Get distance\n     *\n     * @method getDistance\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getDistance = function () {\n        return this.distance;\n    };\n\n    /**\n     * Set distance\n     *\n     * @method setDistance\n     * @param {Number} distance\n     */\n    QuadraticPoint.prototype.setDistance = function (distance) {\n        this.distance = distance;\n    };\n\n    /**\n     * Get length\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getLength = function () {\n        return this.length;\n    };\n\n    /**\n     * Set length\n     *\n     * @method setLength\n     * @param {Number} length\n     */\n    QuadraticPoint.prototype.setLength = function (length) {\n        this.length = length;\n    };\n\n    /**\n     * Get cos\n     *\n     * @method getCos\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getCos = function () {\n        return this.cos;\n    };\n\n    /**\n     * Set cos\n     *\n     * @method setCos\n     * @param {Number} cos\n     */\n    QuadraticPoint.prototype.setCos = function (cos) {\n        this.cos = cos;\n    };\n\n    /**\n     * Get sin\n     *\n     * @method getSin\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getSin = function () {\n        return this.sin;\n    };\n\n    /**\n     * Set sin\n     *\n     * @method setSin\n     * @param {Number} sin\n     */\n    QuadraticPoint.prototype.setSin = function (sin) {\n        this.sin = sin;\n    };\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Set p1\n     *\n     * @method setP1\n     * @param {Point} p1\n     */\n    QuadraticPoint.prototype.setP1 = function (p1) {\n        this.p1 = p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    /**\n     * Set p2\n     *\n     * @method setP2\n     * @param {Point} p2\n     */\n    QuadraticPoint.prototype.setP2 = function (p2) {\n        this.p2 = p2;\n    };\n\n    // Export\n    scope.QuadraticPoint = QuadraticPoint;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * The InkManager class that can use to store writing strokes and manage the undo/redo/clear system\n     *\n     * @deprecated\n     * @class InkManager\n     * @constructor\n     */\n    function InkManager() {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    }\n\n    /**\n     * Is Writing a stroke\n     *\n     * @deprecated\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last current Stroke write\n     *\n     * @deprecated\n     * @method getCurrentStroke\n     * @returns {Stroke}\n     */\n    InkManager.prototype.getCurrentStroke = function () {\n        return this.currentStroke;\n    };\n\n    /**\n     * Start ink capture\n     *\n     * @deprecated\n     * @method startInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.startInkCapture = function (x, y, t) {\n        if (!this.writing) {\n            if (!this.isRedoEmpty()) {\n                this.clearUndoRedoStack();\n            }\n            this.currentStroke = new scope.Stroke();\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n            this.writing = true;\n        } else {\n            throw new Error('Stroke capture already running');\n        }\n    };\n\n    /**\n     * Continue ink capture\n     *\n     * @deprecated\n     * @method continueInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.continueInkCapture = function (x, y, t) {\n        if (this.writing) {\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * End ink capture\n     *\n     * @deprecated\n     * @method endInkCapture\n     */\n    InkManager.prototype.endInkCapture = function () {\n        if (this.writing) {\n            this.strokes.push(this.currentStroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * Clear the strokes list\n     *\n     * @deprecated\n     * @method clear\n     */\n    InkManager.prototype.clear = function () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Is The Strokes list is empty\n     *\n     * @deprecated\n     * @method isEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isEmpty = function () {\n        return this.strokes.length === 0;\n    };\n\n    /**\n     * Is the Undo/Redo Stack empty\n     *\n     * @method isRedoEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isRedoEmpty = function () {\n        return this.undoRedoStack.length === 0;\n    };\n\n    /**\n     * Make an undo\n     *\n     * @deprecated\n     * @method undo\n     */\n    InkManager.prototype.undo = function () {\n        if (!this.isEmpty()) {\n            this.undoRedoStack.push(this.strokes.pop());\n        }\n    };\n\n    /**\n     * Make a redo\n     *\n     * @deprecated\n     * @method redo\n     */\n    InkManager.prototype.redo = function () {\n        if (!this.isRedoEmpty()) {\n            this.strokes.push(this.undoRedoStack.pop());\n        }\n    };\n\n    /**\n     * Get the strokes list\n     *\n     * @deprecated\n     * @method getStokes\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getStrokes = function () {\n        return this.strokes;\n    };\n\n    /**\n     * Get the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method getUndoRedoStack\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getUndoRedoStack = function () {\n        return this.undoRedoStack;\n    };\n\n    /**\n     * Clear the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method clearUndoRedoStack\n     */\n    InkManager.prototype.clearUndoRedoStack = function () {\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Copy the strokes values from index on an other list of strokes\n     *\n     * @deprecated\n     * @method copy\n     * @param {Stroke[]} strokes List of strokes\n     * @param {Number} index Position to start the copy\n     */\n    InkManager.prototype.copy = function (strokes, index) {\n        for (index; index < this.strokes.length; index++) {\n            strokes.push(this.strokes[index]);\n        }\n    };\n\n    // Export\n    scope.InkManager = InkManager;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters(obj) {\n        this.color = 'rgba(0, 0, 0, 0.9)';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = 'normal';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n        if (obj) {\n            this.color = obj.color;\n            this.rectColor = obj.rectColor;\n            this.font = obj.font;\n            this.decoration = obj.decoration;\n            this.width = obj.width;\n            this.pressureType = obj.pressureType;\n            this.alpha = obj.alpha;\n        }\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get the pressure renderer parameter\n     *\n     * @deprecated\n     * @method getPressureType\n     * @returns {String} The pressure type\n     */\n    PenParameters.prototype.getPressureType = function () {\n        return this.pressureType;\n    };\n\n    /**\n     * Set the pressure renderer parameter\n     *\n     * @deprecated\n     * @method setPressureType\n     * @param {String} pressureType\n     */\n    PenParameters.prototype.setPressureType = function (pressureType) {\n        this.pressureType = pressureType;\n    };\n\n    /**\n     * Get the alpha renderer parameter\n     *\n     * @deprecated Use a rgba() color\n     * @method getAlpha\n     * @returns {String} The alpha\n     */\n    PenParameters.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * Set the alpha renderer parameter\n     *\n     * @deprecated Use a rgba() color\n     * @method setAlpha\n     * @param {String} alpha\n     */\n    PenParameters.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @deprecated Use 'PenParameters' instead\n     * @class RenderingParameters\n     * @constructor\n     */\n    function RenderingParameters() {\n        scope.PenParameters.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    RenderingParameters.prototype = new scope.PenParameters();\n\n    /**\n     * Constructor property\n     */\n    RenderingParameters.prototype.constructor = RenderingParameters;\n\n    // Export\n    scope.RenderingParameters = RenderingParameters;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @deprecated Use StrokeComponent instead\n     * @class Stroke\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function Stroke(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        if (obj) {\n            if (obj.x) {\n                this.x = obj.x;\n            }\n            if (obj.y) {\n                this.y = obj.y;\n            }\n            if (obj.t) {\n                this.t = obj.t;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    Stroke.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    Stroke.prototype.constructor = Stroke;\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    Stroke.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    Stroke.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    Stroke.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    Stroke.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    Stroke.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    Stroke.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    Stroke.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    Stroke.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    Stroke.prototype.toFixed = function (precision) {\n        if (precision !== undefined) {\n            for (var i in this.x) {\n                this.x[i] = this.x[i].toFixed(precision);\n                this.y[i] = this.y[i].toFixed(precision);\n            }\n        }\n    };\n\n    // Export\n    scope.Stroke = Stroke;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @class StrokeComponent\n     * @extends Stroke\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.Stroke.call(this);\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            if (obj.p) {\n                this.p = obj.p;\n            }\n            if (obj.d) {\n                this.d = obj.d;\n            }\n            if (obj.l) {\n                this.l = obj.l;\n            }\n            if (obj.color) {\n                this.color = obj.color;\n            }\n            if (obj.alpha) {\n                this.alpha = obj.alpha;\n            }\n            if (obj.width) {\n                this.width = obj.width;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.Stroke();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**     *\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * @deprecated Use a rgba() color\n     * @param alpha\n     */\n    StrokeComponent.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * @deprecated Use a rgba() color\n     * @param alpha\n     */\n    StrokeComponent.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (this.filterPointByAcquisitionDelta(x, y)) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(this.computeP(x, y));\n            this.addD(this.computeD(x, y));\n            this.addL(this.computeL(x, y));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    StrokeComponent.prototype.computeD = function (x, y) {\n        var distance = Math.sqrt(Math.pow((y - this.getY()[this.getLastIndexPoint() - 1]), 2) + Math.pow((x - this.getX()[this.getLastIndexPoint() - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    };\n\n    StrokeComponent.prototype.computeL = function (x, y) {\n        var length = this.getL()[this.getLastIndexPoint() - 1] + this.computeD(x, y);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    };\n\n    StrokeComponent.prototype.computeP = function (x, y) {\n        var ratio = 1.0;\n        var distance = this.computeD(x, y);\n        var length = this.computeL(x, y);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    };\n\n    StrokeComponent.prototype.filterPointByAcquisitionDelta = function (x, y) {\n        var delta = (2 + (this.getWidth() / 4));\n        var ret = false;\n        if (this.getLength() === 0 || Math.abs(this.getX()[this.getLastIndexPoint()] - x) >= delta || Math.abs(this.getY()[this.getLastIndexPoint()] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    };\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n        if (obj) {\n            if (obj.alternates) {\n                for (var i in obj.alternates) {\n                    this.alternates.push(new scope.CharacterInputComponentAlternate(obj.alternates[i]));\n                }\n            }\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(obj) {\n        if (obj) {\n            if (obj.alternate) {\n                this.alternate = obj.alternate;\n            }\n            if (obj.probability) {\n                this.probability = obj.probability;\n            }\n        }\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    /**\n     * Get recognition input\n     *\n     * @method getRecognitionInput\n     * @returns {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.getRecognitionInput = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.setRecognitionInput = function (input) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'char';\n        if (obj) {\n            if (obj.character) {\n                this.character = obj.character;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get character\n     *\n     * @deprecated Use 'getLabel'\n     * @method getCharacter\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getCharacter = function () {\n        return this.character;\n    };\n\n    /**\n     * Set character\n     *\n     * @deprecated Use 'setLabel'\n     * @method setCharacter\n     * @param {String} character\n     */\n    CharInputComponent.prototype.setCharacter = function (character) {\n        this.character = character;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'string';\n        if (obj) {\n            if (obj.string) {\n                this.string = obj.string;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get string\n     *\n     * @deprecated Use 'getLabel'\n     * @method getString\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getString = function () {\n        return this.string;\n    };\n\n    /**\n     * Set string\n     *\n     * @deprecated Use 'setLabel'\n     * @method setString\n     * @param {String} string\n     */\n    StringInputComponent.prototype.setString = function (string) {\n        this.string = string;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n        if (obj) {\n            if (obj.language) {\n                this.language = obj.language;\n            }\n            if (obj.textInputMode) {\n                this.textInputMode = obj.textInputMode;\n            }\n            if (obj.contentTypes) {\n                this.contentTypes = obj.contentTypes;\n            }\n            if (obj.subsetKnowledges) {\n                this.subsetKnowledges = obj.subsetKnowledges;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.userLkWords) {\n                this.userLkWords = obj.userLkWords;\n            }\n            if (obj.resultDetail) {\n                this.resultDetail = obj.resultDetail;\n            }\n            if (obj.textProperties) {\n                this.textProperties = new scope.TextProperties(obj.textProperties);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties(obj) {\n        if (obj) {\n            if (obj.textCandidateListSize) {\n                this.textCandidateListSize = obj.textCandidateListSize;\n            }\n            if (obj.wordCandidateListSize) {\n                this.wordCandidateListSize = obj.wordCandidateListSize;\n            }\n            if (obj.wordPredictionListSize) {\n                this.wordPredictionListSize = obj.wordPredictionListSize;\n            }\n            if (obj.wordCompletionListSize) {\n                this.wordCompletionListSize = obj.wordCompletionListSize;\n            }\n            if (obj.characterCandidateListSize) {\n                this.characterCandidateListSize = obj.characterCandidateListSize;\n            }\n            if (obj.discardCaseVariations) {\n                this.discardCaseVariations = obj.discardCaseVariations;\n            }\n            if (obj.discardAccentuationVariations) {\n                this.discardAccentuationVariations = obj.discardAccentuationVariations;\n            }\n            if (obj.disableSpatialOrdering) {\n                this.disableSpatialOrdering = obj.disableSpatialOrdering;\n            }\n            if (obj.glyphDistortion) {\n                this.glyphDistortion = obj.glyphDistortion;\n            }\n            if (obj.enableOutOfLexicon) {\n                this.enableOutOfLexicon = obj.enableOutOfLexicon;\n            }\n            if (obj.spellingDistortion) {\n                this.spellingDistortion = obj.spellingDistortion;\n            }\n        }\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getTextRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getTextRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setTextRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setTextRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get text input\n     *\n     * @method getRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        if (obj) {\n            if (obj.rejectDetectionSensitivity) {\n                this.rejectDetectionSensitivity = obj.rejectDetectionSensitivity;\n            }\n            if (obj.doBeautification) {\n                this.doBeautification = obj.doBeautification;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {ShapeParameter}\n     */\n    ShapeRecognitionInput.prototype.getParameters = function () {\n        return new ShapeParameter({\n            rejectDetectionSensitivity: this.rejectDetectionSensitivity,\n            doBeautification: this.doBeautification,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {ShapeParameter} parameters\n     */\n    ShapeRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.rejectDetectionSensitivity = parameters.getRejectDetectionSensitivity();\n            this.doBeautification = parameters.hasBeautification();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @deprecated Use getParameters instead of getDoBeautification\n     * @method getDoBeautification\n     * @returns {Boolean}\n     */\n    ShapeRecognitionInput.prototype.getDoBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @deprecated Use setParameters instead of setDoBeautification\n     * @method setDoBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeRecognitionInput.prototype.setDoBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @deprecated Use getParameters instead of getRejectDetectionSensitivity\n     * @method getRejectDetectionSensitivity\n     * @returns {Number}\n     */\n    ShapeRecognitionInput.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @deprecated Use setParameters instead of setRejectDetectionSensitivity\n     * @method setRejectDetectionSensitivity\n     * @param {Number} rejectDetectionSensitivity\n     */\n    ShapeRecognitionInput.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getShapeRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getShapeRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setShapeRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setShapeRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get shape input\n     *\n     * @method getRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n            if (obj.columnarOperation) {\n                this.columnarOperation = obj.columnarOperation;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathRecognitionInput.prototype.getParameters = function () {\n        return new MathParameter({\n            resultTypes: this.resultTypes,\n            columnarOperation: this.columnarOperation,\n            userResources: this.userResources,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.resultTypes = parameters.getResultTypes();\n            this.columnarOperation = parameters.isColumnar();\n            this.userResources = parameters.getUserResources();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @deprecated Use getParameters instead of getResultTypes\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @deprecated Use setParameters instead of setResultTypes\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @deprecated Use getParameters instead of isColumnar\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathRecognitionInput.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @deprecated Use setParameters instead of setColumnar\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathRecognitionInput.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @deprecated Use getParameters instead of getUserResources\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @deprecated Use setParameters instead of setUserResources\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @deprecated Use getParameters instead of getScratchOutDetectionSensitivity\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @deprecated Use setParameters instead of setScratchOutDetectionSensitivity\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n    /**\n     * Get math input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getMathRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getMathRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setMathRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setMathRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get math input\n     *\n     * @method getRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'accidental';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'arpeggiate';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBar(obj.value);\n            }\n        }\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBeam(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicClef(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicDecoration(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'dots';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'head';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'rest';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'stem';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'tieOrSlur';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'timeSignature';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff(obj) {\n        this.count = 5;\n        this.gap = 20;\n        if (obj) {\n            if (obj.count) {\n                this.count = obj.count;\n            }\n            if (obj.gap) {\n                this.gap = obj.gap;\n            }\n            if (obj.top) {\n                this.top = obj.top;\n            }\n        }\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.divisions) {\n                this.divisions = obj.divisions;\n            }\n            if (obj.staff) {\n                this.staff = new scope.MusicStaff(obj.staff);\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MusicParameter}\n     */\n    MusicRecognitionInput.prototype.getParameters = function () {\n        return new MusicParameter({\n            divisions: this.divisions,\n            staff: this.staff,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity,\n            resultTypes: this.resultTypes,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MusicParameter} parameters\n     */\n    MusicRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.divisions = parameters.getDivisions();\n            this.staff = parameters.getStaff();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n            this.resultTypes = parameters.getResultTypes();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the result types\n     *\n     * @deprecated Use getParameters instead of getResultTypes\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the result types\n     *\n     * @deprecated Use setParameters instead of setResultTypes\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @deprecated Use getParameters instead of getUserResources\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @deprecated Use setParameters instead of setUserResources\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @deprecated Use getParameters instead of getScratchOutDetectionSensitivity\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @deprecated Use setParameters instead of setScratchOutDetectionSensitivity\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @deprecated Use getParameters instead of getStaff\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicRecognitionInput.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @deprecated Use setParameters instead of setStaff\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRecognitionInput.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @deprecated Use getParameters instead of getDivisions\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @deprecated Use setParameters instead of setDivisions\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicRecognitionInput.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getMusicRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getMusicRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setMusicRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setMusicRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get music input\n     *\n     * @method getRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n        if (obj) {\n            if (obj.coordinateResolution) {\n                this.coordinateResolution = obj.coordinateResolution;\n            }\n            if (obj.textParameter) {\n                this.textParameter = new scope.TextParameter(obj.textParameter);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getAnalyzerRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getAnalyzerRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setAnalyzerRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setAnalyzerRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get analyzer input\n     *\n     * @method getRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            if (typeof obj === 'string') {\n                var cpt = obj.split(/[:-]+/);\n                this.startUnit = Number(cpt[0]);\n                this.startComponent = Number(cpt[1]);\n                this.startPoint = Number(cpt[2]);\n                this.endUnit = Number(cpt[3]);\n                this.endComponent = Number(cpt[4]);\n                this.endPoint = Number(cpt[5]);\n            } else {\n                this.startUnit = obj.startUnit;\n                this.startComponent = obj.startComponent;\n                this.startPoint = obj.startPoint;\n                this.endUnit = obj.endUnit;\n                this.endComponent = obj.endComponent;\n                this.endPoint = obj.endPoint;\n            }\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResult.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResponseWSMessage.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    /**\n     * Get shape document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getShapeDocument\n     * @returns {ShapeDocument}\n     */\n    ShapeResult.prototype.getShapeDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);\n(function (scope) {\n    \n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResult.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResponseWSMessage.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    /**\n     * Get music document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMusicDocument\n     * @returns {MusicDocument}\n     */\n    MusicResult.prototype.getMusicDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    /**\n     * Get analyzer document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getAnalyzerDocument\n     * @returns {AnalyzerDocument}\n     */\n    AnalyzerResult.prototype.getAnalyzerDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);\n\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    NetworkInterface.parseURL = function (url) {\n\n        var parser = document.createElement('a'),\n            searchObject = {},\n            queries, split, i;\n        // Let the browser do the work\n        parser.href = url;\n        // Convert query string to object\n        queries = parser.search.replace(/^\\?/, '').split('&');\n        for (i = 0; i < queries.length; i++) {\n            split = queries[i].split('=');\n            searchObject[split[0]] = split[1];\n        }\n        return {\n            protocol: parser.protocol,\n            host: parser.host,\n            hostname: parser.hostname,\n            port: parser.port,\n            pathname: parser.pathname,\n            search: parser.search,\n            searchObject: searchObject,\n            hash: parser.hash\n        };\n    };\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.xhr = function (type, url, data) {\n\n        return Q.Promise(function (resolve, reject, notify) {\n\n            function onStateChange() {\n                if (request.readyState === 4) {\n                    if (request.status >= 200 && request.status < 300) {\n                        resolve(NetworkInterface.parse(request));\n                    }\n                }\n            }\n\n            function onLoad() {\n                if (request.status >= 200 && request.status < 300) {\n                    resolve(NetworkInterface.parse(request));\n                } else {\n                    reject(new Error(request.responseText));\n                }\n            }\n\n            function onError() {\n                reject(new Error('Can\\'t XHR ' + url));\n            }\n\n            function onProgress(e) {\n                notify(e.loaded / e.total);\n            }\n\n            var request = new XMLHttpRequest();\n            request.open(type, url, true);\n            request.withCredentials = true;\n            request.setRequestHeader('Accept', 'application/json');\n            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            request.onerror = onError;\n            request.onprogress = onProgress;\n            request.onload = onLoad;\n            request.onreadystatechange = onStateChange;\n            request.send(NetworkInterface.transformRequest(data));\n        });\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return scope.NetworkInterface.xhr('GET', src, undefined);\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.put = function (url, data) {\n        return scope.NetworkInterface.xhr('PUT', url, data);\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.post = function (url, data) {\n        return scope.NetworkInterface.xhr('POST', url, data);\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.delete = function (url, data) {\n        return scope.NetworkInterface.xhr('DELETE', url, data);\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n\n\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface() {\n    }\n\n    NetworkWSInterface.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.close();\n            this._url = url;\n        }\n    };\n\n    NetworkWSInterface.prototype.getUrl = function () {\n        return this._url;\n    };\n\n    NetworkWSInterface.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this.close();\n            this._callback = callback;\n        }\n    };\n\n    NetworkWSInterface.prototype.getCallback = function () {\n        return this._callback;\n    };\n\n    NetworkWSInterface.prototype.getState = function () {\n        return _getWebSocketState(this._socket);\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        return this.getState() === 3;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        return this.getState() === 2;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        return this.getState() === 1;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        return this.getState() === 0;\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        if (this.getUrl() && this.getCallback() && (this.getState() < 0)) {\n            this._socket = _openWebSocket(this.getUrl(), this.getCallback());\n        }\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this.getState() < 2) {\n            _closeWebSocket(this._socket, code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.send = function (request) {\n        var state = _getWebSocketState(this._socket);\n        if (state  === 1) {\n            _sendMessage(this._socket, request);\n        }\n    };\n\n    /**\n     *\n     * @param url\n     * @param callback\n     * @returns {WebSocket}\n     * @private\n     */\n    var _openWebSocket = function (url, callback) {\n        function onOpen(e) {\n            callback(e);\n        }\n        function onClose(e) {\n            callback(e);\n        }\n        function onError(e) {\n            callback(e);\n        }\n        function onMessage(e) {\n            callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        }\n\n        var socket = new WebSocket(url);\n        socket.onopen = onOpen;\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n        return socket;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param code\n     * @param reason\n     * @private\n     */\n    var _closeWebSocket = function (socket, code, reason) {\n        if (socket) {\n            socket.close(code, reason);\n        }\n    };\n\n    /**\n     *\n     * @param socket\n     * @returns {*}\n     * @private\n     */\n    var _getWebSocketState = function (socket) {\n        if (socket) {\n            return socket.readyState;\n        }\n        return -1;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param message\n     * @private\n     */\n    var _sendMessage = function (socket, message) {\n        if (socket) {\n            socket.send(JSON.stringify(message));\n        }\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.setUrl('https://cloud.myscript.com');\n        if (host) {\n            this.setUrl('https://' + host);\n        }\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @deprecated use getUrl instead\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @deprecated use setUrl instead\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl('https://' + host);\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getUrl\n     * @returns {String}\n     */\n    AbstractRecognizer.prototype.getUrl = function() {\n        return this.url;\n    };\n\n    /**\n     * Set the recognition service url\n     *\n     * @method setUrl\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.url = url;\n        }\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return scope.NetworkInterface.get(this.getUrl() + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            }\n        );\n    };\n\n    /**\n     * Do REST recognition\n     *\n     * @private\n     * @method doRestRecognition\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.doRestRecognition = function (input, applicationKey, hmacKey, instanceId) {\n        if (input.getComponents) {\n            _filterStrokes(input.getComponents(), this.getPrecision());\n        } else if (input.getInputUnits) {\n            for (var i in input.getInputUnits()) {\n                _filterStrokes(input.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n\n        if (input instanceof scope.TextRecognitionInput) {\n            return _doTextRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.ShapeRecognitionInput) {\n            return _doShapeRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MathRecognitionInput) {\n            return _doMathRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MusicRecognitionInput) {\n            return _doMusicRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.AnalyzerRecognitionInput) {\n            return _doAnalyzerRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * Clear REST recognition\n     *\n     * @method clearRestRecognition\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.clearRestRecognition = function (instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n        return _clearShapeRecognition(this.getUrl(), data);\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @private\n     * @method _doTextRecognition\n     * @param {String} url\n     * @param {TextRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doTextRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.TextRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doShapeRecognition\n     * @param {String} url\n     * @param {ShapeRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doShapeRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.ShapeRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition\n     *\n     * @private\n     * @method _clearShapeRecognition\n     * @param {String} url\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _clearShapeRecognition = function (url, instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doMathRecognition\n     * @param {String} url\n     * @param {MathRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMathRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MathRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @private\n     * @method _doMusicRecognition\n     * @param {String} url\n     * @param {MusicRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMusicRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MusicRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method _doAnalyzerRecognition\n     * @param {String} url\n     * @param {AnalyzerRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doAnalyzerRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.AnalyzerRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @deprecated\n     * @method computeHmac\n     * @param {String} applicationKey\n     * @param {String} data\n     * @param {String} hmacKey\n     */\n    AbstractRecognizer.prototype.computeHmac = function (applicationKey, data, hmacKey) {\n        return _computeHmac(data, applicationKey, hmacKey);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.Stroke) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    var _fillData = function (data, input, instanceId, applicationKey, hmacKey) {\n        data.setRecognitionInput(input);\n        data.setApplicationKey(applicationKey);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(_computeHmac(data.getRecognitionInput(), applicationKey, hmacKey));\n        }\n    };\n\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @constructor\n     */\n    function AbstractWSRecognizer() {\n        this._wsInterface = new scope.NetworkWSInterface();\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @deprecated use getUrl instead\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractWSRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @deprecated use setUrl instead\n     * @method setHost\n     * @param {String}\n     */\n    AbstractWSRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl('wss://' + host);\n        }\n    };\n\n    AbstractWSRecognizer.prototype.setUrl = function (url) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    AbstractWSRecognizer.prototype.setCallback = function (callback) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractWSRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractWSRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        if (message.getComponents) {\n            _filterStrokes(message.getComponents(), this.getPrecision());\n        } else if (message.getInputUnits) {\n            for (var i in message.getInputUnits()) {\n                _filterStrokes(message.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(_computeHmac(challenge, applicationKey, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {String} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.Stroke) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript, CryptoJS);\n\n\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, inputUnits, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this.setUrl('wss://cloud.myscript.com');\n        if (host) {\n            this.setUrl('wss://' + host);\n        }\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    TextWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/text');\n        }\n    };\n\n    TextWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, message.data);\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.TextResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (inputUnits, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.ShapeRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n        return scope.AbstractRecognizer.prototype.clearRestRecognition.call(this, instanceId); // super\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MathRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.MathParameter();\n        this.setUrl('wss://cloud.myscript.com');\n        if (host) {\n            this.setUrl('wss://' + host);\n        }\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    MathWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/math');\n        }\n    };\n\n    MathWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, message.data);\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.MathResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MusicRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * Set the context (legacy code for non-regression)\n     *\n     * @private\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype._setContext = function (context) {\n        this.context = context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponents = function (components, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponent = function (component, context, parameters) {\n        if (component instanceof scope.Stroke) {\n            this.drawStroke(component, context, parameters);\n        } else if (component instanceof scope.CharacterInputComponent) {\n            this.drawCharacter(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {Rectangle} rectangle\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var params = this.getParameters();\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getRectColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawCharacter = function (character, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method drawStroke\n     * @param {Stroke} stroke\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (stroke && stroke.getLength() > 0) {\n            if (stroke instanceof scope.StrokeComponent) {\n                _renderStroke(stroke, this.getContext());\n            } else {\n                this.drawStart(stroke.getX()[0], stroke.getY()[0]);\n                for (var i = 0; i < stroke.getLength(); ++i) {\n                    this.drawContinue(stroke.getX()[i], stroke.getY()[i], context, parameters);\n                }\n                this.drawEnd(stroke.getX()[stroke.getLength() - 1], stroke.getY()[stroke.getLength() - 1], context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw stroke components\n     *\n     * @private\n     * @method drawStrokes\n     * @param {Stroke[]} strokes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes, context, parameters) {\n        for (var i = 0; i < strokes.length; i++) {\n            this.drawStroke(strokes[i], context, parameters);\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x: (point.x - Math.sin(angle) * radius),\n            y: (point.y + Math.cos(angle) * radius)\n        }, {\n            x: (point.x + Math.sin(angle) * radius),\n            y: (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x: ((point2.x + point1.x) / 2),\n            y: ((point2.y + point1.y) / 2),\n            p: ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color) {\n        if (color !== undefined) {\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3) {\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++) {\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    /**\n     * DEPRECATED METHODS\n     */\n\n    /**\n     * Record the beginning of drawing\n     *\n     * @deprecated\n     * @method drawStart\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStart = function (x, y, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        this.points = [];\n        this.drawing = true;\n        this.points.push(new scope.QuadraticPoint({x: x, y: y}));\n    };\n\n    /**\n     * Record the drawing\n     *\n     * @deprecated\n     * @method drawContinue\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawContinue = function (x, y, context, parameters) {\n        if (this.drawing) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            var params = this.getParameters();\n            var delta = 2 + (params.getWidth() / 4);\n            var last = this.points[this.points.length - 1];\n\n            if (Math.abs(last.getX() - x) >= delta || Math.abs(last.getY() - y) >= delta) {\n\n                if (this.points.length === 1) { // firstPoint\n\n                    var pA = this.points[this.points.length - 1]; // firstPoint\n                    var pB = new scope.QuadraticPoint({x: x, y: y});\n                    var pAB = new scope.QuadraticPoint({\n                        x: 0.5 * (pA.getX() + pB.getX()),\n                        y: 0.5 * (pA.getY() + pB.getY())\n                    });\n                    _computePointParameters(pA, pAB, params.getPressureType());\n                    _computePointParameters(pAB, pB, params.getPressureType());\n\n                    _computeFirstControls(pA, pAB, params.getWidth());\n                    _computeControls(pAB, pB, params.getWidth());\n\n                    this.points.push(pAB);\n                    this.points.push(pB);\n\n                    _drawFirstSegment(pA, pAB, this.getContext(), params);\n\n                } else {\n                    var pAB = this.points[this.points.length - 2]; // jshint ignore:line\n                    var pB = this.points[this.points.length - 1]; // jshint ignore:line\n                    var pC = new scope.QuadraticPoint({x: x, y: y});\n                    var pBC = new scope.QuadraticPoint({\n                        x: 0.5 * (pB.getX() + pC.getX()),\n                        y: 0.5 * (pB.getY() + pC.getY())\n                    });\n                    _computePointParameters(pB, pBC, params.getPressureType());\n                    _computePointParameters(pBC, pC, params.getPressureType());\n\n                    _computeControls(pB, pBC, params.getWidth());\n                    _computeControls(pBC, pC, params.getWidth());\n\n                    this.points.push(pBC);\n                    this.points.push(pC);\n\n                    _drawSegment(pAB, pB, pBC, this.getContext(), params);\n                }\n            }\n        }\n    };\n\n    /**\n     * Stop record of drawing\n     *\n     * @deprecated\n     * @method drawEnd\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawEnd = function (x, y, context, parameters) {\n        if (this.drawing) {\n            var params = this.getParameters();\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            if (this.points.length === 1) {\n                _drawPoint(new scope.QuadraticPoint({x: x, y: y}), this.getContext(), params);\n            } else if (this.points.length > 1) {\n                var pA = this.points[this.points.length - 1];\n                var pB = new scope.QuadraticPoint({x: x, y: y});\n                var pAB = new scope.QuadraticPoint({\n                    x: 0.5 * (pA.getX() + pB.getX()),\n                    y: 0.5 * (pA.getY() + pB.getY())\n                });\n                _computePointParameters(pA, pAB, params.getPressureType());\n                _computePointParameters(pAB, pB, params.getPressureType());\n\n                _computeControls(pA, pAB, params.getWidth());\n                _computeLastControls(pB, params.getWidth());\n\n                this.points.push(pAB);\n                this.points.push(pB);\n\n                _drawLastSegment(pAB, pB, this.getContext(), params);\n            }\n            this.drawing = false;\n        }\n    };\n\n    /**\n     * Draw point on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawPoint\n     * @param {QuadraticPoint} point\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawPoint = function (point, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.arc(point.getX(), point.getY(), 0.25 * parameters.getWidth(), 0, 2 * Math.PI);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw the first stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawFirstSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawFirstSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw middle stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {QuadraticPoint} pC\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawSegment = function (pA, pB, pC, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.quadraticCurveTo(pB.getP1().getX(), pB.getP1().getY(), pC.getP1().getX(), pC.getP1().getY());\n            context.lineTo(pC.getP2().getX(), pC.getP2().getY());\n            context.quadraticCurveTo(pB.getP2().getX(), pB.getP2().getY(), pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw the last stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawLastSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLastSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Compute distance and unit vector from the previous point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePointParameters\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     * @param {String} pressureType\n     */\n    var _computePointParameters = function (previous, point, pressureType) {\n        var dx = point.getX() - previous.getX(),\n            dy = point.getY() - previous.getY(),\n            d = Math.sqrt((dx * dx) + (dy * dy));\n\n        if (d !== 0) {\n            point.setDistance(d);\n            point.setCos(dx / d);\n            point.setSin(dy / d);\n        }\n        point.setLength(previous.getLength() + point.getDistance());\n\n        switch (pressureType) {\n            case 'SIMULATED':\n                _computePressure(point);\n                break;\n            case 'CONSTANT':\n                point.setPressure(1.0);\n                break;\n            case 'REAL':\n                // keep the current pressure\n                break;\n            default:\n                throw new Error('Unknown pressure type');\n        }\n    };\n\n    /**\n     * Compute simulated pressure of given point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePressure\n     * @param {QuadraticPoint} point\n     */\n    var _computePressure = function (point) {\n        var k, pressure;\n        if (point.getDistance() < 10) {\n            k = 0.2 + Math.pow(0.1 * point.getDistance(), 0.4);\n        } else if (point.getDistance() > point.getLength() - 10) {\n            k = 0.2 + Math.pow(0.1 * (point.getLength() - point.getDistance()), 0.4);\n        } else {\n            k = 1.0;\n        }\n\n        pressure = k * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(point.getDistance()));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        point.setPressure(pressure);\n    };\n\n    /**\n     * Compute control points of the first point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeFirstControls\n     * @param {QuadraticPoint} first First point of the list to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeFirstControls = function (first, next, penWidth) {\n        var r = 0.5 * (penWidth * first.getPressure()),\n            nx = r * next.getSin(),\n            ny = r * next.getCos();\n\n        first.getP1().setX(first.getX() - nx);\n        first.getP1().setY(first.getY() + ny);\n        first.getP2().setX(first.getX() + nx);\n        first.getP2().setY(first.getY() - ny);\n    };\n\n    /**\n     * Compute control points between two points.\n     *\n     * @private\n     * @deprecated\n     * @method _computeControls\n     * @param {QuadraticPoint} point Point to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeControls = function (point, next, penWidth) {\n        var cos = point.getCos() + next.getCos(),\n            sin = point.getSin() + next.getSin(),\n            u = Math.sqrt((cos * cos) + (sin * sin));\n\n        if (u !== 0) {\n            // compute control points\n            var r = 0.5 * penWidth * point.getPressure();\n            var nx = -r * sin / u;\n            var ny = r * cos / u;\n            point.getP1().setX(point.getX() + nx);\n            point.getP1().setY(point.getY() + ny);\n            point.getP2().setX(point.getX() - nx);\n            point.getP2().setY(point.getY() - ny);\n        }\n    };\n\n    /**\n     * Compute control points of the last point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeLastControls\n     * @param {QuadraticPoint} last Last point to be computed\n     * @param {Number} penWidth Pen width\n     */\n    var _computeLastControls = function (last, penWidth) {\n        var r = 0.5 * penWidth * last.getPressure(),\n            nx = -r * last.getSin(),\n            ny = r * last.getCos();\n\n        last.getP1().setX(last.getX() + nx);\n        last.getP1().setY(last.getY() + ny);\n        last.getP2().setX(last.getX() - nx);\n        last.getP2().setY(last.getY() - ny);\n    };\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (inputUnits, recognitionResult, context, parameters) {\n        this.drawInputUnits(inputUnits, context, parameters);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits, context, parameters) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents(), context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractTextInputComponent) {\n                _drawTextComponent(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @deprecated\n     * @method drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawTextComponent = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawTextComponent(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw text component\n     *\n     * @private\n     * @method _drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextComponent = function (component, context, parameters) {\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, context, parameters);\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (this.isTypesetting()) {\n            this.drawShapes(components, recognitionResult.getSegments(), context, parameters);\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                _drawShapePrimitive(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes, context, parameters) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            _drawShapeRecognized(candidate, this.getContext(), this.getParameters());\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            this.drawShapeNotRecognized(components, segment.getInkRanges(), context, parameters);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @deprecated\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeRecognized(shapeRecognized, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges, context, parameters) {\n        var notRecognized = _extractShapeNotRecognized(components, inkRanges);\n        this.drawComponents(notRecognized, context, parameters);\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @deprecated\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapePrimitive(primitive, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @deprecated\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeLine = function (shapeLine, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeLine(shapeLine, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @deprecated\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeEllipse(shapeEllipse, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @private\n     * @method _drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        for (var i in shapeRecognized.getPrimitives()) {\n            _drawShapePrimitive(shapeRecognized.getPrimitives()[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @private\n     * @method _drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            _drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            _drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @private\n     * @method _drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeLine = function (shapeLine, context, parameters) {\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), context, parameters);\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @private\n     * @method _drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            context, parameters);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Get strokes from shape inkRange\n     *\n     * @deprecated\n     * @method extractStroke\n     * @param {Stroke[]} strokes\n     * @param {ShapeInkRange} inkRange\n     * @result {Stroke[]} List of strokes from inkRange\n     */\n    ShapeRenderer.prototype.extractStroke = function (strokes, inkRange) {\n        return _extractShapeNotRecognized(strokes, inkRange);\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param inkRanges\n     * @returns {*}\n     */\n    var _extractShapeNotRecognized = function (components, inkRanges) {\n        var result = [];\n\n        for (var i in inkRanges) {\n            var inkRange = inkRanges[i];\n\n            var firstPointIndex = Math.floor(inkRange.getFirstPoint());\n            var lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n            for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n                var currentStroke = components[strokeIndex];\n                var currentStrokePointCount = currentStroke.getX().length;\n\n                var newStroke = new scope.Stroke(), x = [], y = [];\n\n                for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                    x.push(currentStroke.getX()[pointIndex]);\n                    y.push(currentStroke.getY()[pointIndex]);\n                }\n\n                newStroke.setX(x);\n                newStroke.setY(y);\n                result.push(newStroke);\n            }\n        }\n        return result;\n\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = _removeMathScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @deprecated\n     * @param {AbstractComponent[]} components\n     * @param {MathScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MathRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        return _removeMathScratchOut(components, scratchOutResults);\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMathScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getErasedInkRanges()[n].getComponent());\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getInkRanges()[p].getComponent());\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = _removeMusicScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @deprecated\n     * @param {AbstractComponent[]} components\n     * @param {MusicScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MusicRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        return _removeMusicScratchOut(components, scratchOutResults);\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawStaff = function (staff, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawStaff(staff, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                _drawMusicNode(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw music node\n     *\n     * @method drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawMusicNode = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawMusicNode(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @private\n     * @method _drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStaff = function (staff, context, parameters) {\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw music node\n     *\n     * @private\n     * @method _drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawMusicNode = function (component, context, parameters) {\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, context, parameters);\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, context, parameters);\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, context, parameters);\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, context, parameters);\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, context, parameters);\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, context, parameters);\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, context, parameters);\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, context, parameters);\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, context, parameters);\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, context, parameters);\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, context, parameters);\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, context, parameters);\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, context, parameters);\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMusicScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (this.isTypesetting()) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes(), context, parameters);\n            _drawTables(components, recognitionResult.getTables(), this.getContext(), this.getParameters());\n            _drawTextLines(components, recognitionResult.getTextLines(), this.getContext(), this.getParameters());\n            //_drawGroups(components, recognitionResult.getGroups(), this.getContext(), this.getParameters()); // TODO: not implemented\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @deprecated\n     * @method drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTables = function (components, tables, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in tables) {\n            if (this.getShowBoundingBoxes()) {\n                for (var j in tables[i].getCells()) {\n                    _drawCell(tables[i].getCells()[j], this.getContext(), this.getParameters());\n                }\n            }\n        }\n        _drawTables(components, tables, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @deprecated\n     * @method drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTextLines = function (components, textLines, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data && this.getShowBoundingBoxes()) {\n                this.drawRectangle(data.getBoundingBox(), context, parameters);\n            }\n        }\n        _drawTextLines(components, textLines, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @deprecated\n     * @method drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawText(boundingBox, text, justificationType, textHeight, baseline, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw Underline\n     *\n     * @deprecated\n     * @method drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawUnderline(boundingBox, underline, text, textHeight, baseline, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @deprecated\n     * @method drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        _drawGroups(components, groups, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @deprecated\n     * @method drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n            _drawCell(cell, this.getContext(), this.getParameters());\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @private\n     * @method _drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTables = function (components, tables, context, parameters) {\n        for (var i in tables) {\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @private\n     * @method _drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                _drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    _drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @private\n     * @method _drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n            context.textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            context.fillText(text, boundingBox.getX(), baseline);\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @private\n     * @method _drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n\n    /**\n     * Draw Underline\n     *\n     * @private\n     * @method _drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), context, parameters);\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @private\n     * @method _drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            var rectangle = cell.getData().getBoundingBox();\n            context.save();\n            try {\n                context.fillStyle = parameters.getRectColor();\n                context.strokeStyle = parameters.getColor();\n                context.lineWidth = 0.5 * parameters.getWidth();\n                context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n            } finally {\n                context.restore();\n            }\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n        this.canvasRatio = 1;\n\n        // Capture\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n        this.canvasRatio = _getCanvasRatio(this._renderingCanvas);\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer();\n        this._mathRecognizer = new scope.MathRecognizer();\n        this._shapeRecognizer = new scope.ShapeRecognizer();\n        this._musicRecognizer = new scope.MusicRecognizer();\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer();\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this));\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this));\n\n        this._attachListeners(element);\n\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            ssl: true,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        // Recognition type\n        this.setType(this.options.type);\n\n        this.setHost(this.options.host);\n\n        this.setTextParameters(this.options.textParameters); // jshint ignore:line\n        this.setMathParameters(this.options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(this.options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(this.options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(this.options.analyzerParameters); // jshint ignore:line\n\n        this.setProtocol(this.options.protocol);\n        this.setTimeout(this.options.timeout);\n        this.setApplicationKey(this.options.applicationKey);\n        this.setHmacKey(this.options.hmacKey);\n\n        this.setPenParameters(this.options.penParameters);\n\n        this.setPrecision(this.options.precision);\n        this.setTypeset(this.options.typeset);\n        this.setComponents(this.options.components);\n\n        this.setWidth(this.options.width);\n        this.setHeight(this.options.height);\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        this._captureCanvas.width = width * this.canvasRatio;\n        this._captureCanvas.style.width = width + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n        this._renderingCanvas.width = width * this.canvasRatio;\n        this._renderingCanvas.style.width = width + 'px';\n        this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        this._captureCanvas.height = height * this.canvasRatio;\n        this._captureCanvas.style.height = height + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n        this._renderingCanvas.height = height * this.canvasRatio;\n        this._renderingCanvas.style.height = height + 'px';\n        this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Set the recognition precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    InkPaper.prototype.setPrecision = function (precision) {\n        this._textRecognizer.setPrecision(precision);\n        this._textWSRecognizer.setPrecision(precision);\n        this._mathRecognizer.setPrecision(precision);\n        this._mathWSRecognizer.setPrecision(precision);\n        this._shapeRecognizer.setPrecision(precision);\n        this._musicRecognizer.setPrecision(precision);\n        this._analyzerRecognizer.setPrecision(precision);\n    };\n\n    /**\n     * Get the default components\n     *\n     * @method getComponents\n     * @return {Array} components\n     */\n    InkPaper.prototype.getComponents = function () {\n        return this.options.components;\n    };\n\n    /**\n     * Set the default components\n     *\n     * @method setComponents\n     * @param {Array} components\n     */\n    InkPaper.prototype.setComponents = function (components) {\n        this.options.components = components;\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        this._captureCanvas.height = height * this.canvasRatio;\n        this._captureCanvas.style.height = height + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n        this._renderingCanvas.height = height * this.canvasRatio;\n        this._renderingCanvas.style.height = height + 'px';\n        this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @deprecated Use setTextParameters instead\n     * @method setLanguage\n     * @param  String language\n     */\n    InkPaper.prototype.setLanguage = function (language) {\n        if (this.options.type === scope.RecognitionType.TEXT) {\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setLanguage(language);\n        }\n    };\n\n    /**\n     * Set math recognition format result types\n     *\n     * @deprecated Use setMathParameters instead\n     * @method setResultTypes\n     * @param  Array resultTypes\n     */\n    InkPaper.prototype.setResultTypes = function (resultTypes) {\n        if (this.options.type === scope.RecognitionType.MATH) {\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setResultTypes(resultTypes.map(function (x) {\n                return x.toUpperCase();\n            }));\n        }\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n            this._initRenderingCanvas();\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._selectedRenderer.getParameters()[i] = penParameters[i]; // Override options\n                }\n            }\n            var params = this._selectedRenderer.getParameters();\n            this._inkGrabber.setParameters(params); // Override options\n            this._textRenderer.setParameters(params); // Override options\n            this._mathRenderer.setParameters(params); // Override options\n            this._shapeRenderer.setParameters(params); // Override options\n            this._musicRenderer.setParameters(params); // Override options\n            this._analyzerRenderer.setParameters(params); // Override options\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @param {String} [inputMode] input mode\n     */\n    InkPaper.prototype.getAvailableLanguages = function (inputMode) {\n        this._selectedRESTRecognizer.getAvailableLanguageList(\n            this.getApplicationKey(),\n            inputMode ? inputMode : this._textRecognizer.getParameters().getInputMode()\n        ).then(\n            function (data) {\n                this._onResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the recognition callback\n     *\n     * @method setCallback\n     * @deprecated Use setResultCallback instead\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     */\n    InkPaper.prototype.setCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        return this._doRecognition(this.components);\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this.components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            this.redoComponents.push(this.components.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this.redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this.components.push(this.redoComponents.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            if (this._instanceId) {\n                this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                this._instanceId = undefined;\n            }\n        }\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this._inkGrabber.clear();\n        this._instanceId = undefined;\n\n        this._initRenderingCanvas();\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n\n        if (this._captureCanvas.clientHeight != this._captureCanvas.height) {\n            this._captureCanvas.height = this._captureCanvas.clientHeight;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight;\n        }\n        if (this._captureCanvas.clientWidth != this._captureCanvas.width) {\n            this._captureCanvas.width = this._captureCanvas.clientWidth;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth;\n        }\n\n        if (this.canRedo()) {\n            this.redoComponents = [];\n            this._onChange();\n        }\n        this._inkGrabber.startCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this.components.push(stroke);\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            }\n        }\n    };\n\n    /**\n     * Do recognition\n     *\n     * @private\n     * @method _doRecognition\n     * @param {AbstractComponent[]} components Input components\n     */\n    InkPaper.prototype._doRecognition = function (components) {\n        if (components.length > 0) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                if (this._initialized) {\n                    var inputWS = [];\n                    if (this._selectedRecognizer instanceof scope.TextWSRecognizer) {\n                        var inputUnitWS = new scope.TextInputUnit();\n                        inputUnitWS.setComponents(this.getComponents().concat(components.slice(this.lastNonRecoComponentIdx)));\n                        inputWS = [inputUnitWS];\n                    } else {\n                        inputWS = components.slice(this.lastNonRecoComponentIdx);\n                    }\n                    this.lastNonRecoComponentIdx = components.length;\n\n\n                    if (this.isStarted) {\n                        this._selectedRecognizer.continueWSRecognition(inputWS, this._instanceId);\n                    } else {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(inputWS);\n                    }\n                }\n            } else {\n                var input = [];\n                if (this._selectedRecognizer instanceof scope.TextRecognizer) {\n                    var inputUnit = new scope.TextInputUnit();\n                    inputUnit.setComponents(this.getComponents().concat(components));\n                    input = [inputUnit];\n                } else if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                    input = components.slice(this.lastNonRecoComponentIdx);\n                    this.lastNonRecoComponentIdx = components.length;\n                } else {\n                    input = input.concat(this.getComponents(), components);\n                }\n                this._selectedRecognizer.doSimpleRecognition(\n                    this.getApplicationKey(),\n                    this._instanceId,\n                    input,\n                    this.getHmacKey()\n                ).then(\n                    function (data) {\n                        this._parseResult(data, input);\n                    }.bind(this),\n                    function (error) {\n                        this._onResult(undefined, error);\n                    }.bind(this)\n                );\n            }\n        } else {\n            this.isStarted = false;\n            this._selectedRenderer.clear();\n            this._initRenderingCanvas();\n            this._onResult();\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('failure', {detail: err})); // FIXME: mark as deprecated\n            this._element.dispatchEvent(new CustomEvent('error', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function () {\n        var data = {\n            canUndo: this.canUndo(),\n            undoLength: this.components.length,\n            canRedo: this.canRedo(),\n            redoLength: this.redoComponents.length\n        };\n\n        if (this.changeCallback) {\n            this.changeCallback(data)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: data}));\n    };\n\n    InkPaper.prototype._parseResult = function (data, input) {\n\n        if (!this._instanceId) {\n            this._instanceId = data.getInstanceId();\n        } else if (this._instanceId !== data.getInstanceId()) {\n            this._onResult(data);\n            return data;\n        }\n\n        if (data.getDocument().hasScratchOutResults() || this._selectedRenderer.isTypesetting()) {\n            this._selectedRenderer.clear();\n            this._selectedRenderer.drawRecognitionResult(input, data.getDocument());\n        }\n\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service url\n     *\n     * @param {String} host\n     */\n    InkPaper.prototype.setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._textWSRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._mathWSRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n                console.log('pointerenter');\n                console.log(e);\n            }\n        }, false);\n\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n        this._drawInput(this.components);\n    };\n\n    InkPaper.prototype._drawInput = function (components) {\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            }\n        }\n        this._selectedRenderer.drawComponents(this.getComponents().concat(components));\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this.lastNonRecoComponentIdx = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge(this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    break;\n                default:\n                {\n                    this._parseResult(message, this.components);\n                    break;\n                }\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n    /**\n     * Tool to get canvas ratio (retina display)\n     *\n     * @private\n     * @param {Element} canvas\n     * @returns {Number}\n     */\n    function _getCanvasRatio(canvas) {\n        if (canvas) {\n            var context = canvas.getContext('2d'),\n                devicePixelRatio = window.devicePixelRatio || 1,\n                backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        }\n        return 1;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n","/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n","'use strict';\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Complex Point object used for quadratic calculation\n     *\n     * @deprecated\n     * @class QuadraticPoint\n     * @extends Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function QuadraticPoint(obj) {\n        scope.Point.call(this, obj);\n        this.pressure = 0.5;\n        this.distance = 0.0;\n        this.length = 0.0;\n        this.cos = 0.0;\n        this.sin = 0.0;\n        this.p1 = new scope.Point(obj);\n        this.p2 = new scope.Point(obj);\n        if (obj) {\n            this.pressure = obj.pressure;\n            this.distance = obj.distance;\n            this.length = obj.length;\n            this.cos = obj.cos;\n            this.sin = obj.sin;\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    QuadraticPoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    QuadraticPoint.prototype.constructor = QuadraticPoint;\n\n    /**\n     * Get pressure\n     *\n     * @method getPressure\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getPressure = function () {\n        return this.pressure;\n    };\n\n    /**\n     * Set pressure\n     *\n     * @method setPressure\n     * @param {Number} pressure\n     */\n    QuadraticPoint.prototype.setPressure = function (pressure) {\n        this.pressure = pressure;\n    };\n\n    /**\n     * Get distance\n     *\n     * @method getDistance\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getDistance = function () {\n        return this.distance;\n    };\n\n    /**\n     * Set distance\n     *\n     * @method setDistance\n     * @param {Number} distance\n     */\n    QuadraticPoint.prototype.setDistance = function (distance) {\n        this.distance = distance;\n    };\n\n    /**\n     * Get length\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getLength = function () {\n        return this.length;\n    };\n\n    /**\n     * Set length\n     *\n     * @method setLength\n     * @param {Number} length\n     */\n    QuadraticPoint.prototype.setLength = function (length) {\n        this.length = length;\n    };\n\n    /**\n     * Get cos\n     *\n     * @method getCos\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getCos = function () {\n        return this.cos;\n    };\n\n    /**\n     * Set cos\n     *\n     * @method setCos\n     * @param {Number} cos\n     */\n    QuadraticPoint.prototype.setCos = function (cos) {\n        this.cos = cos;\n    };\n\n    /**\n     * Get sin\n     *\n     * @method getSin\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getSin = function () {\n        return this.sin;\n    };\n\n    /**\n     * Set sin\n     *\n     * @method setSin\n     * @param {Number} sin\n     */\n    QuadraticPoint.prototype.setSin = function (sin) {\n        this.sin = sin;\n    };\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Set p1\n     *\n     * @method setP1\n     * @param {Point} p1\n     */\n    QuadraticPoint.prototype.setP1 = function (p1) {\n        this.p1 = p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    /**\n     * Set p2\n     *\n     * @method setP2\n     * @param {Point} p2\n     */\n    QuadraticPoint.prototype.setP2 = function (p2) {\n        this.p2 = p2;\n    };\n\n    // Export\n    scope.QuadraticPoint = QuadraticPoint;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * The InkManager class that can use to store writing strokes and manage the undo/redo/clear system\n     *\n     * @deprecated\n     * @class InkManager\n     * @constructor\n     */\n    function InkManager() {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    }\n\n    /**\n     * Is Writing a stroke\n     *\n     * @deprecated\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last current Stroke write\n     *\n     * @deprecated\n     * @method getCurrentStroke\n     * @returns {Stroke}\n     */\n    InkManager.prototype.getCurrentStroke = function () {\n        return this.currentStroke;\n    };\n\n    /**\n     * Start ink capture\n     *\n     * @deprecated\n     * @method startInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.startInkCapture = function (x, y, t) {\n        if (!this.writing) {\n            if (!this.isRedoEmpty()) {\n                this.clearUndoRedoStack();\n            }\n            this.currentStroke = new scope.Stroke();\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n            this.writing = true;\n        } else {\n            throw new Error('Stroke capture already running');\n        }\n    };\n\n    /**\n     * Continue ink capture\n     *\n     * @deprecated\n     * @method continueInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.continueInkCapture = function (x, y, t) {\n        if (this.writing) {\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * End ink capture\n     *\n     * @deprecated\n     * @method endInkCapture\n     */\n    InkManager.prototype.endInkCapture = function () {\n        if (this.writing) {\n            this.strokes.push(this.currentStroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * Clear the strokes list\n     *\n     * @deprecated\n     * @method clear\n     */\n    InkManager.prototype.clear = function () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Is The Strokes list is empty\n     *\n     * @deprecated\n     * @method isEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isEmpty = function () {\n        return this.strokes.length === 0;\n    };\n\n    /**\n     * Is the Undo/Redo Stack empty\n     *\n     * @method isRedoEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isRedoEmpty = function () {\n        return this.undoRedoStack.length === 0;\n    };\n\n    /**\n     * Make an undo\n     *\n     * @deprecated\n     * @method undo\n     */\n    InkManager.prototype.undo = function () {\n        if (!this.isEmpty()) {\n            this.undoRedoStack.push(this.strokes.pop());\n        }\n    };\n\n    /**\n     * Make a redo\n     *\n     * @deprecated\n     * @method redo\n     */\n    InkManager.prototype.redo = function () {\n        if (!this.isRedoEmpty()) {\n            this.strokes.push(this.undoRedoStack.pop());\n        }\n    };\n\n    /**\n     * Get the strokes list\n     *\n     * @deprecated\n     * @method getStokes\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getStrokes = function () {\n        return this.strokes;\n    };\n\n    /**\n     * Get the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method getUndoRedoStack\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getUndoRedoStack = function () {\n        return this.undoRedoStack;\n    };\n\n    /**\n     * Clear the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method clearUndoRedoStack\n     */\n    InkManager.prototype.clearUndoRedoStack = function () {\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Copy the strokes values from index on an other list of strokes\n     *\n     * @deprecated\n     * @method copy\n     * @param {Stroke[]} strokes List of strokes\n     * @param {Number} index Position to start the copy\n     */\n    InkManager.prototype.copy = function (strokes, index) {\n        for (index; index < this.strokes.length; index++) {\n            strokes.push(this.strokes[index]);\n        }\n    };\n\n    // Export\n    scope.InkManager = InkManager;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters(obj) {\n        this.color = 'rgba(0, 0, 0, 0.9)';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = 'normal';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n        if (obj) {\n            this.color = obj.color;\n            this.rectColor = obj.rectColor;\n            this.font = obj.font;\n            this.decoration = obj.decoration;\n            this.width = obj.width;\n            this.pressureType = obj.pressureType;\n            this.alpha = obj.alpha;\n        }\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get the pressure renderer parameter\n     *\n     * @deprecated\n     * @method getPressureType\n     * @returns {String} The pressure type\n     */\n    PenParameters.prototype.getPressureType = function () {\n        return this.pressureType;\n    };\n\n    /**\n     * Set the pressure renderer parameter\n     *\n     * @deprecated\n     * @method setPressureType\n     * @param {String} pressureType\n     */\n    PenParameters.prototype.setPressureType = function (pressureType) {\n        this.pressureType = pressureType;\n    };\n\n    /**\n     * Get the alpha renderer parameter\n     *\n     * @deprecated Use a rgba() color\n     * @method getAlpha\n     * @returns {String} The alpha\n     */\n    PenParameters.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * Set the alpha renderer parameter\n     *\n     * @deprecated Use a rgba() color\n     * @method setAlpha\n     * @param {String} alpha\n     */\n    PenParameters.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @deprecated Use 'PenParameters' instead\n     * @class RenderingParameters\n     * @constructor\n     */\n    function RenderingParameters() {\n        scope.PenParameters.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    RenderingParameters.prototype = new scope.PenParameters();\n\n    /**\n     * Constructor property\n     */\n    RenderingParameters.prototype.constructor = RenderingParameters;\n\n    // Export\n    scope.RenderingParameters = RenderingParameters;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @deprecated Use StrokeComponent instead\n     * @class Stroke\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function Stroke(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        if (obj) {\n            if (obj.x) {\n                this.x = obj.x;\n            }\n            if (obj.y) {\n                this.y = obj.y;\n            }\n            if (obj.t) {\n                this.t = obj.t;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    Stroke.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    Stroke.prototype.constructor = Stroke;\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    Stroke.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    Stroke.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    Stroke.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    Stroke.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    Stroke.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    Stroke.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    Stroke.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    Stroke.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    Stroke.prototype.toFixed = function (precision) {\n        if (precision !== undefined) {\n            for (var i in this.x) {\n                this.x[i] = this.x[i].toFixed(precision);\n                this.y[i] = this.y[i].toFixed(precision);\n            }\n        }\n    };\n\n    // Export\n    scope.Stroke = Stroke;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @class StrokeComponent\n     * @extends Stroke\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.Stroke.call(this);\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            if (obj.p) {\n                this.p = obj.p;\n            }\n            if (obj.d) {\n                this.d = obj.d;\n            }\n            if (obj.l) {\n                this.l = obj.l;\n            }\n            if (obj.color) {\n                this.color = obj.color;\n            }\n            if (obj.alpha) {\n                this.alpha = obj.alpha;\n            }\n            if (obj.width) {\n                this.width = obj.width;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.Stroke();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**     *\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * @deprecated Use a rgba() color\n     * @param alpha\n     */\n    StrokeComponent.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * @deprecated Use a rgba() color\n     * @param alpha\n     */\n    StrokeComponent.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (this.filterPointByAcquisitionDelta(x, y)) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(this.computeP(x, y));\n            this.addD(this.computeD(x, y));\n            this.addL(this.computeL(x, y));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    StrokeComponent.prototype.computeD = function (x, y) {\n        var distance = Math.sqrt(Math.pow((y - this.getY()[this.getLastIndexPoint() - 1]), 2) + Math.pow((x - this.getX()[this.getLastIndexPoint() - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    };\n\n    StrokeComponent.prototype.computeL = function (x, y) {\n        var length = this.getL()[this.getLastIndexPoint() - 1] + this.computeD(x, y);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    };\n\n    StrokeComponent.prototype.computeP = function (x, y) {\n        var ratio = 1.0;\n        var distance = this.computeD(x, y);\n        var length = this.computeL(x, y);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    };\n\n    StrokeComponent.prototype.filterPointByAcquisitionDelta = function (x, y) {\n        var delta = (2 + (this.getWidth() / 4));\n        var ret = false;\n        if (this.getLength() === 0 || Math.abs(this.getX()[this.getLastIndexPoint()] - x) >= delta || Math.abs(this.getY()[this.getLastIndexPoint()] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    };\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n        if (obj) {\n            if (obj.alternates) {\n                for (var i in obj.alternates) {\n                    this.alternates.push(new scope.CharacterInputComponentAlternate(obj.alternates[i]));\n                }\n            }\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(obj) {\n        if (obj) {\n            if (obj.alternate) {\n                this.alternate = obj.alternate;\n            }\n            if (obj.probability) {\n                this.probability = obj.probability;\n            }\n        }\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    /**\n     * Get recognition input\n     *\n     * @method getRecognitionInput\n     * @returns {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.getRecognitionInput = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.setRecognitionInput = function (input) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'char';\n        if (obj) {\n            if (obj.character) {\n                this.character = obj.character;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get character\n     *\n     * @deprecated Use 'getLabel'\n     * @method getCharacter\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getCharacter = function () {\n        return this.character;\n    };\n\n    /**\n     * Set character\n     *\n     * @deprecated Use 'setLabel'\n     * @method setCharacter\n     * @param {String} character\n     */\n    CharInputComponent.prototype.setCharacter = function (character) {\n        this.character = character;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'string';\n        if (obj) {\n            if (obj.string) {\n                this.string = obj.string;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get string\n     *\n     * @deprecated Use 'getLabel'\n     * @method getString\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getString = function () {\n        return this.string;\n    };\n\n    /**\n     * Set string\n     *\n     * @deprecated Use 'setLabel'\n     * @method setString\n     * @param {String} string\n     */\n    StringInputComponent.prototype.setString = function (string) {\n        this.string = string;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n        if (obj) {\n            if (obj.language) {\n                this.language = obj.language;\n            }\n            if (obj.textInputMode) {\n                this.textInputMode = obj.textInputMode;\n            }\n            if (obj.contentTypes) {\n                this.contentTypes = obj.contentTypes;\n            }\n            if (obj.subsetKnowledges) {\n                this.subsetKnowledges = obj.subsetKnowledges;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.userLkWords) {\n                this.userLkWords = obj.userLkWords;\n            }\n            if (obj.resultDetail) {\n                this.resultDetail = obj.resultDetail;\n            }\n            if (obj.textProperties) {\n                this.textProperties = new scope.TextProperties(obj.textProperties);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties(obj) {\n        if (obj) {\n            if (obj.textCandidateListSize) {\n                this.textCandidateListSize = obj.textCandidateListSize;\n            }\n            if (obj.wordCandidateListSize) {\n                this.wordCandidateListSize = obj.wordCandidateListSize;\n            }\n            if (obj.wordPredictionListSize) {\n                this.wordPredictionListSize = obj.wordPredictionListSize;\n            }\n            if (obj.wordCompletionListSize) {\n                this.wordCompletionListSize = obj.wordCompletionListSize;\n            }\n            if (obj.characterCandidateListSize) {\n                this.characterCandidateListSize = obj.characterCandidateListSize;\n            }\n            if (obj.discardCaseVariations) {\n                this.discardCaseVariations = obj.discardCaseVariations;\n            }\n            if (obj.discardAccentuationVariations) {\n                this.discardAccentuationVariations = obj.discardAccentuationVariations;\n            }\n            if (obj.disableSpatialOrdering) {\n                this.disableSpatialOrdering = obj.disableSpatialOrdering;\n            }\n            if (obj.glyphDistortion) {\n                this.glyphDistortion = obj.glyphDistortion;\n            }\n            if (obj.enableOutOfLexicon) {\n                this.enableOutOfLexicon = obj.enableOutOfLexicon;\n            }\n            if (obj.spellingDistortion) {\n                this.spellingDistortion = obj.spellingDistortion;\n            }\n        }\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getTextRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getTextRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setTextRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setTextRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get text input\n     *\n     * @method getRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        if (obj) {\n            if (obj.rejectDetectionSensitivity) {\n                this.rejectDetectionSensitivity = obj.rejectDetectionSensitivity;\n            }\n            if (obj.doBeautification) {\n                this.doBeautification = obj.doBeautification;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {ShapeParameter}\n     */\n    ShapeRecognitionInput.prototype.getParameters = function () {\n        return new ShapeParameter({\n            rejectDetectionSensitivity: this.rejectDetectionSensitivity,\n            doBeautification: this.doBeautification,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {ShapeParameter} parameters\n     */\n    ShapeRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.rejectDetectionSensitivity = parameters.getRejectDetectionSensitivity();\n            this.doBeautification = parameters.hasBeautification();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @deprecated Use getParameters instead of getDoBeautification\n     * @method getDoBeautification\n     * @returns {Boolean}\n     */\n    ShapeRecognitionInput.prototype.getDoBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @deprecated Use setParameters instead of setDoBeautification\n     * @method setDoBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeRecognitionInput.prototype.setDoBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @deprecated Use getParameters instead of getRejectDetectionSensitivity\n     * @method getRejectDetectionSensitivity\n     * @returns {Number}\n     */\n    ShapeRecognitionInput.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @deprecated Use setParameters instead of setRejectDetectionSensitivity\n     * @method setRejectDetectionSensitivity\n     * @param {Number} rejectDetectionSensitivity\n     */\n    ShapeRecognitionInput.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getShapeRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getShapeRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setShapeRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setShapeRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get shape input\n     *\n     * @method getRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n            if (obj.columnarOperation) {\n                this.columnarOperation = obj.columnarOperation;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathRecognitionInput.prototype.getParameters = function () {\n        return new MathParameter({\n            resultTypes: this.resultTypes,\n            columnarOperation: this.columnarOperation,\n            userResources: this.userResources,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.resultTypes = parameters.getResultTypes();\n            this.columnarOperation = parameters.isColumnar();\n            this.userResources = parameters.getUserResources();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @deprecated Use getParameters instead of getResultTypes\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @deprecated Use setParameters instead of setResultTypes\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @deprecated Use getParameters instead of isColumnar\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathRecognitionInput.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @deprecated Use setParameters instead of setColumnar\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathRecognitionInput.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @deprecated Use getParameters instead of getUserResources\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @deprecated Use setParameters instead of setUserResources\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @deprecated Use getParameters instead of getScratchOutDetectionSensitivity\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @deprecated Use setParameters instead of setScratchOutDetectionSensitivity\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n    /**\n     * Get math input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getMathRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getMathRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setMathRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setMathRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get math input\n     *\n     * @method getRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'accidental';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'arpeggiate';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBar(obj.value);\n            }\n        }\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBeam(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicClef(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicDecoration(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'dots';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'head';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'rest';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'stem';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'tieOrSlur';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'timeSignature';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff(obj) {\n        this.count = 5;\n        this.gap = 20;\n        if (obj) {\n            if (obj.count) {\n                this.count = obj.count;\n            }\n            if (obj.gap) {\n                this.gap = obj.gap;\n            }\n            if (obj.top) {\n                this.top = obj.top;\n            }\n        }\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.divisions) {\n                this.divisions = obj.divisions;\n            }\n            if (obj.staff) {\n                this.staff = new scope.MusicStaff(obj.staff);\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MusicParameter}\n     */\n    MusicRecognitionInput.prototype.getParameters = function () {\n        return new MusicParameter({\n            divisions: this.divisions,\n            staff: this.staff,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity,\n            resultTypes: this.resultTypes,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MusicParameter} parameters\n     */\n    MusicRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.divisions = parameters.getDivisions();\n            this.staff = parameters.getStaff();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n            this.resultTypes = parameters.getResultTypes();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the result types\n     *\n     * @deprecated Use getParameters instead of getResultTypes\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the result types\n     *\n     * @deprecated Use setParameters instead of setResultTypes\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @deprecated Use getParameters instead of getUserResources\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @deprecated Use setParameters instead of setUserResources\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @deprecated Use getParameters instead of getScratchOutDetectionSensitivity\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @deprecated Use setParameters instead of setScratchOutDetectionSensitivity\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @deprecated Use getParameters instead of getStaff\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicRecognitionInput.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @deprecated Use setParameters instead of setStaff\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRecognitionInput.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @deprecated Use getParameters instead of getDivisions\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @deprecated Use setParameters instead of setDivisions\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicRecognitionInput.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getMusicRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getMusicRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setMusicRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setMusicRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get music input\n     *\n     * @method getRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n        if (obj) {\n            if (obj.coordinateResolution) {\n                this.coordinateResolution = obj.coordinateResolution;\n            }\n            if (obj.textParameter) {\n                this.textParameter = new scope.TextParameter(obj.textParameter);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @deprecated Use getRecognitionInput instead\n     * @method getAnalyzerRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getAnalyzerRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @deprecated Use setRecognitionInput instead\n     * @method setAnalyzerRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setAnalyzerRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    /**\n     * Get analyzer input\n     *\n     * @method getRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            if (typeof obj === 'string') {\n                var cpt = obj.split(/[:-]+/);\n                this.startUnit = Number(cpt[0]);\n                this.startComponent = Number(cpt[1]);\n                this.startPoint = Number(cpt[2]);\n                this.endUnit = Number(cpt[3]);\n                this.endComponent = Number(cpt[4]);\n                this.endPoint = Number(cpt[5]);\n            } else {\n                this.startUnit = obj.startUnit;\n                this.startComponent = obj.startComponent;\n                this.startPoint = obj.startPoint;\n                this.endUnit = obj.endUnit;\n                this.endComponent = obj.endComponent;\n                this.endPoint = obj.endPoint;\n            }\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResult.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResponseWSMessage.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    /**\n     * Get shape document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getShapeDocument\n     * @returns {ShapeDocument}\n     */\n    ShapeResult.prototype.getShapeDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResult.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResponseWSMessage.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    /**\n     * Get music document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMusicDocument\n     * @returns {MusicDocument}\n     */\n    MusicResult.prototype.getMusicDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    /**\n     * Get analyzer document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getAnalyzerDocument\n     * @returns {AnalyzerDocument}\n     */\n    AnalyzerResult.prototype.getAnalyzerDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);","'use strict';\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    NetworkInterface.parseURL = function (url) {\n\n        var parser = document.createElement('a'),\n            searchObject = {},\n            queries, split, i;\n        // Let the browser do the work\n        parser.href = url;\n        // Convert query string to object\n        queries = parser.search.replace(/^\\?/, '').split('&');\n        for (i = 0; i < queries.length; i++) {\n            split = queries[i].split('=');\n            searchObject[split[0]] = split[1];\n        }\n        return {\n            protocol: parser.protocol,\n            host: parser.host,\n            hostname: parser.hostname,\n            port: parser.port,\n            pathname: parser.pathname,\n            search: parser.search,\n            searchObject: searchObject,\n            hash: parser.hash\n        };\n    };\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.xhr = function (type, url, data) {\n\n        return Q.Promise(function (resolve, reject, notify) {\n\n            function onStateChange() {\n                if (request.readyState === 4) {\n                    if (request.status >= 200 && request.status < 300) {\n                        resolve(NetworkInterface.parse(request));\n                    }\n                }\n            }\n\n            function onLoad() {\n                if (request.status >= 200 && request.status < 300) {\n                    resolve(NetworkInterface.parse(request));\n                } else {\n                    reject(new Error(request.responseText));\n                }\n            }\n\n            function onError() {\n                reject(new Error('Can\\'t XHR ' + url));\n            }\n\n            function onProgress(e) {\n                notify(e.loaded / e.total);\n            }\n\n            var request = new XMLHttpRequest();\n            request.open(type, url, true);\n            request.withCredentials = true;\n            request.setRequestHeader('Accept', 'application/json');\n            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            request.onerror = onError;\n            request.onprogress = onProgress;\n            request.onload = onLoad;\n            request.onreadystatechange = onStateChange;\n            request.send(NetworkInterface.transformRequest(data));\n        });\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return scope.NetworkInterface.xhr('GET', src, undefined);\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.put = function (url, data) {\n        return scope.NetworkInterface.xhr('PUT', url, data);\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.post = function (url, data) {\n        return scope.NetworkInterface.xhr('POST', url, data);\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.delete = function (url, data) {\n        return scope.NetworkInterface.xhr('DELETE', url, data);\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n","'use strict';\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface() {\n    }\n\n    NetworkWSInterface.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.close();\n            this._url = url;\n        }\n    };\n\n    NetworkWSInterface.prototype.getUrl = function () {\n        return this._url;\n    };\n\n    NetworkWSInterface.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this.close();\n            this._callback = callback;\n        }\n    };\n\n    NetworkWSInterface.prototype.getCallback = function () {\n        return this._callback;\n    };\n\n    NetworkWSInterface.prototype.getState = function () {\n        return _getWebSocketState(this._socket);\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        return this.getState() === 3;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        return this.getState() === 2;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        return this.getState() === 1;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        return this.getState() === 0;\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        if (this.getUrl() && this.getCallback() && (this.getState() < 0)) {\n            this._socket = _openWebSocket(this.getUrl(), this.getCallback());\n        }\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this.getState() < 2) {\n            _closeWebSocket(this._socket, code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.send = function (request) {\n        var state = _getWebSocketState(this._socket);\n        if (state  === 1) {\n            _sendMessage(this._socket, request);\n        }\n    };\n\n    /**\n     *\n     * @param url\n     * @param callback\n     * @returns {WebSocket}\n     * @private\n     */\n    var _openWebSocket = function (url, callback) {\n        function onOpen(e) {\n            callback(e);\n        }\n        function onClose(e) {\n            callback(e);\n        }\n        function onError(e) {\n            callback(e);\n        }\n        function onMessage(e) {\n            callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        }\n\n        var socket = new WebSocket(url);\n        socket.onopen = onOpen;\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n        return socket;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param code\n     * @param reason\n     * @private\n     */\n    var _closeWebSocket = function (socket, code, reason) {\n        if (socket) {\n            socket.close(code, reason);\n        }\n    };\n\n    /**\n     *\n     * @param socket\n     * @returns {*}\n     * @private\n     */\n    var _getWebSocketState = function (socket) {\n        if (socket) {\n            return socket.readyState;\n        }\n        return -1;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param message\n     * @private\n     */\n    var _sendMessage = function (socket, message) {\n        if (socket) {\n            socket.send(JSON.stringify(message));\n        }\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.setUrl('https://cloud.myscript.com');\n        if (host) {\n            this.setUrl('https://' + host);\n        }\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @deprecated use getUrl instead\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @deprecated use setUrl instead\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl('https://' + host);\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getUrl\n     * @returns {String}\n     */\n    AbstractRecognizer.prototype.getUrl = function() {\n        return this.url;\n    };\n\n    /**\n     * Set the recognition service url\n     *\n     * @method setUrl\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.url = url;\n        }\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return scope.NetworkInterface.get(this.getUrl() + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            }\n        );\n    };\n\n    /**\n     * Do REST recognition\n     *\n     * @private\n     * @method doRestRecognition\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.doRestRecognition = function (input, applicationKey, hmacKey, instanceId) {\n        if (input.getComponents) {\n            _filterStrokes(input.getComponents(), this.getPrecision());\n        } else if (input.getInputUnits) {\n            for (var i in input.getInputUnits()) {\n                _filterStrokes(input.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n\n        if (input instanceof scope.TextRecognitionInput) {\n            return _doTextRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.ShapeRecognitionInput) {\n            return _doShapeRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MathRecognitionInput) {\n            return _doMathRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MusicRecognitionInput) {\n            return _doMusicRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.AnalyzerRecognitionInput) {\n            return _doAnalyzerRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * Clear REST recognition\n     *\n     * @method clearRestRecognition\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.clearRestRecognition = function (instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n        return _clearShapeRecognition(this.getUrl(), data);\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @private\n     * @method _doTextRecognition\n     * @param {String} url\n     * @param {TextRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doTextRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.TextRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doShapeRecognition\n     * @param {String} url\n     * @param {ShapeRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doShapeRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.ShapeRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition\n     *\n     * @private\n     * @method _clearShapeRecognition\n     * @param {String} url\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _clearShapeRecognition = function (url, instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doMathRecognition\n     * @param {String} url\n     * @param {MathRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMathRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MathRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @private\n     * @method _doMusicRecognition\n     * @param {String} url\n     * @param {MusicRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMusicRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MusicRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method _doAnalyzerRecognition\n     * @param {String} url\n     * @param {AnalyzerRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doAnalyzerRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.AnalyzerRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @deprecated\n     * @method computeHmac\n     * @param {String} applicationKey\n     * @param {String} data\n     * @param {String} hmacKey\n     */\n    AbstractRecognizer.prototype.computeHmac = function (applicationKey, data, hmacKey) {\n        return _computeHmac(data, applicationKey, hmacKey);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.Stroke) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    var _fillData = function (data, input, instanceId, applicationKey, hmacKey) {\n        data.setRecognitionInput(input);\n        data.setApplicationKey(applicationKey);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(_computeHmac(data.getRecognitionInput(), applicationKey, hmacKey));\n        }\n    };\n\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @constructor\n     */\n    function AbstractWSRecognizer() {\n        this._wsInterface = new scope.NetworkWSInterface();\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @deprecated use getUrl instead\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractWSRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @deprecated use setUrl instead\n     * @method setHost\n     * @param {String}\n     */\n    AbstractWSRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl('wss://' + host);\n        }\n    };\n\n    AbstractWSRecognizer.prototype.setUrl = function (url) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    AbstractWSRecognizer.prototype.setCallback = function (callback) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractWSRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractWSRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        if (message.getComponents) {\n            _filterStrokes(message.getComponents(), this.getPrecision());\n        } else if (message.getInputUnits) {\n            for (var i in message.getInputUnits()) {\n                _filterStrokes(message.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(_computeHmac(challenge, applicationKey, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {String} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.Stroke) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript, CryptoJS);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, inputUnits, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this.setUrl('wss://cloud.myscript.com');\n        if (host) {\n            this.setUrl('wss://' + host);\n        }\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    TextWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/text');\n        }\n    };\n\n    TextWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, message.data);\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.TextResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (inputUnits, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.ShapeRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n        return scope.AbstractRecognizer.prototype.clearRestRecognition.call(this, instanceId); // super\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MathRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.MathParameter();\n        this.setUrl('wss://cloud.myscript.com');\n        if (host) {\n            this.setUrl('wss://' + host);\n        }\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    MathWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/math');\n        }\n    };\n\n    MathWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, message.data);\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.MathResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MusicRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * Set the context (legacy code for non-regression)\n     *\n     * @private\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype._setContext = function (context) {\n        this.context = context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponents = function (components, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponent = function (component, context, parameters) {\n        if (component instanceof scope.Stroke) {\n            this.drawStroke(component, context, parameters);\n        } else if (component instanceof scope.CharacterInputComponent) {\n            this.drawCharacter(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {Rectangle} rectangle\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var params = this.getParameters();\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getRectColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawCharacter = function (character, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method drawStroke\n     * @param {Stroke} stroke\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (stroke && stroke.getLength() > 0) {\n            if (stroke instanceof scope.StrokeComponent) {\n                _renderStroke(stroke, this.getContext());\n            } else {\n                this.drawStart(stroke.getX()[0], stroke.getY()[0]);\n                for (var i = 0; i < stroke.getLength(); ++i) {\n                    this.drawContinue(stroke.getX()[i], stroke.getY()[i], context, parameters);\n                }\n                this.drawEnd(stroke.getX()[stroke.getLength() - 1], stroke.getY()[stroke.getLength() - 1], context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw stroke components\n     *\n     * @private\n     * @method drawStrokes\n     * @param {Stroke[]} strokes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes, context, parameters) {\n        for (var i = 0; i < strokes.length; i++) {\n            this.drawStroke(strokes[i], context, parameters);\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x: (point.x - Math.sin(angle) * radius),\n            y: (point.y + Math.cos(angle) * radius)\n        }, {\n            x: (point.x + Math.sin(angle) * radius),\n            y: (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x: ((point2.x + point1.x) / 2),\n            y: ((point2.y + point1.y) / 2),\n            p: ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color) {\n        if (color !== undefined) {\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3) {\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++) {\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    /**\n     * DEPRECATED METHODS\n     */\n\n    /**\n     * Record the beginning of drawing\n     *\n     * @deprecated\n     * @method drawStart\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStart = function (x, y, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        this.points = [];\n        this.drawing = true;\n        this.points.push(new scope.QuadraticPoint({x: x, y: y}));\n    };\n\n    /**\n     * Record the drawing\n     *\n     * @deprecated\n     * @method drawContinue\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawContinue = function (x, y, context, parameters) {\n        if (this.drawing) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            var params = this.getParameters();\n            var delta = 2 + (params.getWidth() / 4);\n            var last = this.points[this.points.length - 1];\n\n            if (Math.abs(last.getX() - x) >= delta || Math.abs(last.getY() - y) >= delta) {\n\n                if (this.points.length === 1) { // firstPoint\n\n                    var pA = this.points[this.points.length - 1]; // firstPoint\n                    var pB = new scope.QuadraticPoint({x: x, y: y});\n                    var pAB = new scope.QuadraticPoint({\n                        x: 0.5 * (pA.getX() + pB.getX()),\n                        y: 0.5 * (pA.getY() + pB.getY())\n                    });\n                    _computePointParameters(pA, pAB, params.getPressureType());\n                    _computePointParameters(pAB, pB, params.getPressureType());\n\n                    _computeFirstControls(pA, pAB, params.getWidth());\n                    _computeControls(pAB, pB, params.getWidth());\n\n                    this.points.push(pAB);\n                    this.points.push(pB);\n\n                    _drawFirstSegment(pA, pAB, this.getContext(), params);\n\n                } else {\n                    var pAB = this.points[this.points.length - 2]; // jshint ignore:line\n                    var pB = this.points[this.points.length - 1]; // jshint ignore:line\n                    var pC = new scope.QuadraticPoint({x: x, y: y});\n                    var pBC = new scope.QuadraticPoint({\n                        x: 0.5 * (pB.getX() + pC.getX()),\n                        y: 0.5 * (pB.getY() + pC.getY())\n                    });\n                    _computePointParameters(pB, pBC, params.getPressureType());\n                    _computePointParameters(pBC, pC, params.getPressureType());\n\n                    _computeControls(pB, pBC, params.getWidth());\n                    _computeControls(pBC, pC, params.getWidth());\n\n                    this.points.push(pBC);\n                    this.points.push(pC);\n\n                    _drawSegment(pAB, pB, pBC, this.getContext(), params);\n                }\n            }\n        }\n    };\n\n    /**\n     * Stop record of drawing\n     *\n     * @deprecated\n     * @method drawEnd\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawEnd = function (x, y, context, parameters) {\n        if (this.drawing) {\n            var params = this.getParameters();\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            if (this.points.length === 1) {\n                _drawPoint(new scope.QuadraticPoint({x: x, y: y}), this.getContext(), params);\n            } else if (this.points.length > 1) {\n                var pA = this.points[this.points.length - 1];\n                var pB = new scope.QuadraticPoint({x: x, y: y});\n                var pAB = new scope.QuadraticPoint({\n                    x: 0.5 * (pA.getX() + pB.getX()),\n                    y: 0.5 * (pA.getY() + pB.getY())\n                });\n                _computePointParameters(pA, pAB, params.getPressureType());\n                _computePointParameters(pAB, pB, params.getPressureType());\n\n                _computeControls(pA, pAB, params.getWidth());\n                _computeLastControls(pB, params.getWidth());\n\n                this.points.push(pAB);\n                this.points.push(pB);\n\n                _drawLastSegment(pAB, pB, this.getContext(), params);\n            }\n            this.drawing = false;\n        }\n    };\n\n    /**\n     * Draw point on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawPoint\n     * @param {QuadraticPoint} point\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawPoint = function (point, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.arc(point.getX(), point.getY(), 0.25 * parameters.getWidth(), 0, 2 * Math.PI);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw the first stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawFirstSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawFirstSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw middle stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {QuadraticPoint} pC\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawSegment = function (pA, pB, pC, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.quadraticCurveTo(pB.getP1().getX(), pB.getP1().getY(), pC.getP1().getX(), pC.getP1().getY());\n            context.lineTo(pC.getP2().getX(), pC.getP2().getY());\n            context.quadraticCurveTo(pB.getP2().getX(), pB.getP2().getY(), pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw the last stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawLastSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLastSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Compute distance and unit vector from the previous point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePointParameters\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     * @param {String} pressureType\n     */\n    var _computePointParameters = function (previous, point, pressureType) {\n        var dx = point.getX() - previous.getX(),\n            dy = point.getY() - previous.getY(),\n            d = Math.sqrt((dx * dx) + (dy * dy));\n\n        if (d !== 0) {\n            point.setDistance(d);\n            point.setCos(dx / d);\n            point.setSin(dy / d);\n        }\n        point.setLength(previous.getLength() + point.getDistance());\n\n        switch (pressureType) {\n            case 'SIMULATED':\n                _computePressure(point);\n                break;\n            case 'CONSTANT':\n                point.setPressure(1.0);\n                break;\n            case 'REAL':\n                // keep the current pressure\n                break;\n            default:\n                throw new Error('Unknown pressure type');\n        }\n    };\n\n    /**\n     * Compute simulated pressure of given point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePressure\n     * @param {QuadraticPoint} point\n     */\n    var _computePressure = function (point) {\n        var k, pressure;\n        if (point.getDistance() < 10) {\n            k = 0.2 + Math.pow(0.1 * point.getDistance(), 0.4);\n        } else if (point.getDistance() > point.getLength() - 10) {\n            k = 0.2 + Math.pow(0.1 * (point.getLength() - point.getDistance()), 0.4);\n        } else {\n            k = 1.0;\n        }\n\n        pressure = k * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(point.getDistance()));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        point.setPressure(pressure);\n    };\n\n    /**\n     * Compute control points of the first point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeFirstControls\n     * @param {QuadraticPoint} first First point of the list to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeFirstControls = function (first, next, penWidth) {\n        var r = 0.5 * (penWidth * first.getPressure()),\n            nx = r * next.getSin(),\n            ny = r * next.getCos();\n\n        first.getP1().setX(first.getX() - nx);\n        first.getP1().setY(first.getY() + ny);\n        first.getP2().setX(first.getX() + nx);\n        first.getP2().setY(first.getY() - ny);\n    };\n\n    /**\n     * Compute control points between two points.\n     *\n     * @private\n     * @deprecated\n     * @method _computeControls\n     * @param {QuadraticPoint} point Point to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeControls = function (point, next, penWidth) {\n        var cos = point.getCos() + next.getCos(),\n            sin = point.getSin() + next.getSin(),\n            u = Math.sqrt((cos * cos) + (sin * sin));\n\n        if (u !== 0) {\n            // compute control points\n            var r = 0.5 * penWidth * point.getPressure();\n            var nx = -r * sin / u;\n            var ny = r * cos / u;\n            point.getP1().setX(point.getX() + nx);\n            point.getP1().setY(point.getY() + ny);\n            point.getP2().setX(point.getX() - nx);\n            point.getP2().setY(point.getY() - ny);\n        }\n    };\n\n    /**\n     * Compute control points of the last point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeLastControls\n     * @param {QuadraticPoint} last Last point to be computed\n     * @param {Number} penWidth Pen width\n     */\n    var _computeLastControls = function (last, penWidth) {\n        var r = 0.5 * penWidth * last.getPressure(),\n            nx = -r * last.getSin(),\n            ny = r * last.getCos();\n\n        last.getP1().setX(last.getX() + nx);\n        last.getP1().setY(last.getY() + ny);\n        last.getP2().setX(last.getX() - nx);\n        last.getP2().setY(last.getY() - ny);\n    };\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (inputUnits, recognitionResult, context, parameters) {\n        this.drawInputUnits(inputUnits, context, parameters);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits, context, parameters) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents(), context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractTextInputComponent) {\n                _drawTextComponent(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @deprecated\n     * @method drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawTextComponent = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawTextComponent(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw text component\n     *\n     * @private\n     * @method _drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextComponent = function (component, context, parameters) {\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, context, parameters);\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (this.isTypesetting()) {\n            this.drawShapes(components, recognitionResult.getSegments(), context, parameters);\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                _drawShapePrimitive(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes, context, parameters) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            _drawShapeRecognized(candidate, this.getContext(), this.getParameters());\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            this.drawShapeNotRecognized(components, segment.getInkRanges(), context, parameters);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @deprecated\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeRecognized(shapeRecognized, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges, context, parameters) {\n        var notRecognized = _extractShapeNotRecognized(components, inkRanges);\n        this.drawComponents(notRecognized, context, parameters);\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @deprecated\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapePrimitive(primitive, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @deprecated\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeLine = function (shapeLine, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeLine(shapeLine, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @deprecated\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawShapeEllipse(shapeEllipse, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @private\n     * @method _drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        for (var i in shapeRecognized.getPrimitives()) {\n            _drawShapePrimitive(shapeRecognized.getPrimitives()[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @private\n     * @method _drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            _drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            _drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @private\n     * @method _drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeLine = function (shapeLine, context, parameters) {\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), context, parameters);\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @private\n     * @method _drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            context, parameters);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Get strokes from shape inkRange\n     *\n     * @deprecated\n     * @method extractStroke\n     * @param {Stroke[]} strokes\n     * @param {ShapeInkRange} inkRange\n     * @result {Stroke[]} List of strokes from inkRange\n     */\n    ShapeRenderer.prototype.extractStroke = function (strokes, inkRange) {\n        return _extractShapeNotRecognized(strokes, inkRange);\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param inkRanges\n     * @returns {*}\n     */\n    var _extractShapeNotRecognized = function (components, inkRanges) {\n        var result = [];\n\n        for (var i in inkRanges) {\n            var inkRange = inkRanges[i];\n\n            var firstPointIndex = Math.floor(inkRange.getFirstPoint());\n            var lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n            for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n                var currentStroke = components[strokeIndex];\n                var currentStrokePointCount = currentStroke.getX().length;\n\n                var newStroke = new scope.Stroke(), x = [], y = [];\n\n                for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                    x.push(currentStroke.getX()[pointIndex]);\n                    y.push(currentStroke.getY()[pointIndex]);\n                }\n\n                newStroke.setX(x);\n                newStroke.setY(y);\n                result.push(newStroke);\n            }\n        }\n        return result;\n\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = _removeMathScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @deprecated\n     * @param {AbstractComponent[]} components\n     * @param {MathScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MathRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        return _removeMathScratchOut(components, scratchOutResults);\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMathScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getErasedInkRanges()[n].getComponent());\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getInkRanges()[p].getComponent());\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = _removeMusicScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @deprecated\n     * @param {AbstractComponent[]} components\n     * @param {MusicScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MusicRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        return _removeMusicScratchOut(components, scratchOutResults);\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawStaff = function (staff, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawStaff(staff, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawComponents = function (components, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                _drawMusicNode(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw music node\n     *\n     * @method drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawMusicNode = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawMusicNode(component, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @private\n     * @method _drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStaff = function (staff, context, parameters) {\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw music node\n     *\n     * @private\n     * @method _drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawMusicNode = function (component, context, parameters) {\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, context, parameters);\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, context, parameters);\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, context, parameters);\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, context, parameters);\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, context, parameters);\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, context, parameters);\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, context, parameters);\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, context, parameters);\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, context, parameters);\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, context, parameters);\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, context, parameters);\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, context, parameters);\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, context, parameters);\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMusicScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (this.isTypesetting()) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes(), context, parameters);\n            _drawTables(components, recognitionResult.getTables(), this.getContext(), this.getParameters());\n            _drawTextLines(components, recognitionResult.getTextLines(), this.getContext(), this.getParameters());\n            //_drawGroups(components, recognitionResult.getGroups(), this.getContext(), this.getParameters()); // TODO: not implemented\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @deprecated\n     * @method drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTables = function (components, tables, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in tables) {\n            if (this.getShowBoundingBoxes()) {\n                for (var j in tables[i].getCells()) {\n                    _drawCell(tables[i].getCells()[j], this.getContext(), this.getParameters());\n                }\n            }\n        }\n        _drawTables(components, tables, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @deprecated\n     * @method drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTextLines = function (components, textLines, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data && this.getShowBoundingBoxes()) {\n                this.drawRectangle(data.getBoundingBox(), context, parameters);\n            }\n        }\n        _drawTextLines(components, textLines, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @deprecated\n     * @method drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawText(boundingBox, text, justificationType, textHeight, baseline, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw Underline\n     *\n     * @deprecated\n     * @method drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        _drawUnderline(boundingBox, underline, text, textHeight, baseline, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @deprecated\n     * @method drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        _drawGroups(components, groups, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @deprecated\n     * @method drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n            _drawCell(cell, this.getContext(), this.getParameters());\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @private\n     * @method _drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTables = function (components, tables, context, parameters) {\n        for (var i in tables) {\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @private\n     * @method _drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                _drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    _drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @private\n     * @method _drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n            context.textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            context.fillText(text, boundingBox.getX(), baseline);\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @private\n     * @method _drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n\n    /**\n     * Draw Underline\n     *\n     * @private\n     * @method _drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), context, parameters);\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @private\n     * @method _drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            var rectangle = cell.getData().getBoundingBox();\n            context.save();\n            try {\n                context.fillStyle = parameters.getRectColor();\n                context.strokeStyle = parameters.getColor();\n                context.lineWidth = 0.5 * parameters.getWidth();\n                context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n            } finally {\n                context.restore();\n            }\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n        this.canvasRatio = 1;\n\n        // Capture\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n        this.canvasRatio = _getCanvasRatio(this._renderingCanvas);\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer();\n        this._mathRecognizer = new scope.MathRecognizer();\n        this._shapeRecognizer = new scope.ShapeRecognizer();\n        this._musicRecognizer = new scope.MusicRecognizer();\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer();\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this));\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this));\n\n        this._attachListeners(element);\n\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            ssl: true,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        // Recognition type\n        this.setType(this.options.type);\n\n        this.setHost(this.options.host);\n\n        this.setTextParameters(this.options.textParameters); // jshint ignore:line\n        this.setMathParameters(this.options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(this.options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(this.options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(this.options.analyzerParameters); // jshint ignore:line\n\n        this.setProtocol(this.options.protocol);\n        this.setTimeout(this.options.timeout);\n        this.setApplicationKey(this.options.applicationKey);\n        this.setHmacKey(this.options.hmacKey);\n\n        this.setPenParameters(this.options.penParameters);\n\n        this.setPrecision(this.options.precision);\n        this.setTypeset(this.options.typeset);\n        this.setComponents(this.options.components);\n\n        this.setWidth(this.options.width);\n        this.setHeight(this.options.height);\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        this._captureCanvas.width = width * this.canvasRatio;\n        this._captureCanvas.style.width = width + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n        this._renderingCanvas.width = width * this.canvasRatio;\n        this._renderingCanvas.style.width = width + 'px';\n        this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        this._captureCanvas.height = height * this.canvasRatio;\n        this._captureCanvas.style.height = height + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n        this._renderingCanvas.height = height * this.canvasRatio;\n        this._renderingCanvas.style.height = height + 'px';\n        this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Set the recognition precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    InkPaper.prototype.setPrecision = function (precision) {\n        this._textRecognizer.setPrecision(precision);\n        this._textWSRecognizer.setPrecision(precision);\n        this._mathRecognizer.setPrecision(precision);\n        this._mathWSRecognizer.setPrecision(precision);\n        this._shapeRecognizer.setPrecision(precision);\n        this._musicRecognizer.setPrecision(precision);\n        this._analyzerRecognizer.setPrecision(precision);\n    };\n\n    /**\n     * Get the default components\n     *\n     * @method getComponents\n     * @return {Array} components\n     */\n    InkPaper.prototype.getComponents = function () {\n        return this.options.components;\n    };\n\n    /**\n     * Set the default components\n     *\n     * @method setComponents\n     * @param {Array} components\n     */\n    InkPaper.prototype.setComponents = function (components) {\n        this.options.components = components;\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        this._captureCanvas.height = height * this.canvasRatio;\n        this._captureCanvas.style.height = height + 'px';\n        this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n        this._renderingCanvas.height = height * this.canvasRatio;\n        this._renderingCanvas.style.height = height + 'px';\n        this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @deprecated Use setTextParameters instead\n     * @method setLanguage\n     * @param  String language\n     */\n    InkPaper.prototype.setLanguage = function (language) {\n        if (this.options.type === scope.RecognitionType.TEXT) {\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setLanguage(language);\n        }\n    };\n\n    /**\n     * Set math recognition format result types\n     *\n     * @deprecated Use setMathParameters instead\n     * @method setResultTypes\n     * @param  Array resultTypes\n     */\n    InkPaper.prototype.setResultTypes = function (resultTypes) {\n        if (this.options.type === scope.RecognitionType.MATH) {\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setResultTypes(resultTypes.map(function (x) {\n                return x.toUpperCase();\n            }));\n        }\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n            this._initRenderingCanvas();\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._selectedRenderer.getParameters()[i] = penParameters[i]; // Override options\n                }\n            }\n            var params = this._selectedRenderer.getParameters();\n            this._inkGrabber.setParameters(params); // Override options\n            this._textRenderer.setParameters(params); // Override options\n            this._mathRenderer.setParameters(params); // Override options\n            this._shapeRenderer.setParameters(params); // Override options\n            this._musicRenderer.setParameters(params); // Override options\n            this._analyzerRenderer.setParameters(params); // Override options\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @param {String} [inputMode] input mode\n     */\n    InkPaper.prototype.getAvailableLanguages = function (inputMode) {\n        this._selectedRESTRecognizer.getAvailableLanguageList(\n            this.getApplicationKey(),\n            inputMode ? inputMode : this._textRecognizer.getParameters().getInputMode()\n        ).then(\n            function (data) {\n                this._onResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the recognition callback\n     *\n     * @method setCallback\n     * @deprecated Use setResultCallback instead\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     */\n    InkPaper.prototype.setCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        return this._doRecognition(this.components);\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this.components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            this.redoComponents.push(this.components.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this.redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this.components.push(this.redoComponents.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            if (this._instanceId) {\n                this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                this._instanceId = undefined;\n            }\n        }\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this._inkGrabber.clear();\n        this._instanceId = undefined;\n\n        this._initRenderingCanvas();\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n\n        if (this._captureCanvas.clientHeight != this._captureCanvas.height) {\n            this._captureCanvas.height = this._captureCanvas.clientHeight;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight;\n        }\n        if (this._captureCanvas.clientWidth != this._captureCanvas.width) {\n            this._captureCanvas.width = this._captureCanvas.clientWidth;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth;\n        }\n\n        if (this.canRedo()) {\n            this.redoComponents = [];\n            this._onChange();\n        }\n        this._inkGrabber.startCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this.components.push(stroke);\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            }\n        }\n    };\n\n    /**\n     * Do recognition\n     *\n     * @private\n     * @method _doRecognition\n     * @param {AbstractComponent[]} components Input components\n     */\n    InkPaper.prototype._doRecognition = function (components) {\n        if (components.length > 0) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                if (this._initialized) {\n                    var inputWS = [];\n                    if (this._selectedRecognizer instanceof scope.TextWSRecognizer) {\n                        var inputUnitWS = new scope.TextInputUnit();\n                        inputUnitWS.setComponents(this.getComponents().concat(components.slice(this.lastNonRecoComponentIdx)));\n                        inputWS = [inputUnitWS];\n                    } else {\n                        inputWS = components.slice(this.lastNonRecoComponentIdx);\n                    }\n                    this.lastNonRecoComponentIdx = components.length;\n\n\n                    if (this.isStarted) {\n                        this._selectedRecognizer.continueWSRecognition(inputWS, this._instanceId);\n                    } else {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(inputWS);\n                    }\n                }\n            } else {\n                var input = [];\n                if (this._selectedRecognizer instanceof scope.TextRecognizer) {\n                    var inputUnit = new scope.TextInputUnit();\n                    inputUnit.setComponents(this.getComponents().concat(components));\n                    input = [inputUnit];\n                } else if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                    input = components.slice(this.lastNonRecoComponentIdx);\n                    this.lastNonRecoComponentIdx = components.length;\n                } else {\n                    input = input.concat(this.getComponents(), components);\n                }\n                this._selectedRecognizer.doSimpleRecognition(\n                    this.getApplicationKey(),\n                    this._instanceId,\n                    input,\n                    this.getHmacKey()\n                ).then(\n                    function (data) {\n                        this._parseResult(data, input);\n                    }.bind(this),\n                    function (error) {\n                        this._onResult(undefined, error);\n                    }.bind(this)\n                );\n            }\n        } else {\n            this.isStarted = false;\n            this._selectedRenderer.clear();\n            this._initRenderingCanvas();\n            this._onResult();\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('failure', {detail: err})); // FIXME: mark as deprecated\n            this._element.dispatchEvent(new CustomEvent('error', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function () {\n        var data = {\n            canUndo: this.canUndo(),\n            undoLength: this.components.length,\n            canRedo: this.canRedo(),\n            redoLength: this.redoComponents.length\n        };\n\n        if (this.changeCallback) {\n            this.changeCallback(data)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: data}));\n    };\n\n    InkPaper.prototype._parseResult = function (data, input) {\n\n        if (!this._instanceId) {\n            this._instanceId = data.getInstanceId();\n        } else if (this._instanceId !== data.getInstanceId()) {\n            this._onResult(data);\n            return data;\n        }\n\n        if (data.getDocument().hasScratchOutResults() || this._selectedRenderer.isTypesetting()) {\n            this._selectedRenderer.clear();\n            this._selectedRenderer.drawRecognitionResult(input, data.getDocument());\n        }\n\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service url\n     *\n     * @param {String} host\n     */\n    InkPaper.prototype.setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._textWSRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._mathWSRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n                console.log('pointerenter');\n                console.log(e);\n            }\n        }, false);\n\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n        this._drawInput(this.components);\n    };\n\n    InkPaper.prototype._drawInput = function (components) {\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            }\n        }\n        this._selectedRenderer.drawComponents(this.getComponents().concat(components));\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this.lastNonRecoComponentIdx = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge(this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    break;\n                default:\n                {\n                    this._parseResult(message, this.components);\n                    break;\n                }\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n    /**\n     * Tool to get canvas ratio (retina display)\n     *\n     * @private\n     * @param {Element} canvas\n     * @returns {Number}\n     */\n    function _getCanvasRatio(canvas) {\n        if (canvas) {\n            var context = canvas.getContext('2d'),\n                devicePixelRatio = window.devicePixelRatio || 1,\n                backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        }\n        return 1;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n"],"sourceRoot":"/source/"}